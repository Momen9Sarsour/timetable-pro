app\Http\Controllers\DataEntry\CrossoverTypeController.php
<?php

namespace App\Http\Controllers\DataEntry;

use App\Http\Controllers\Controller;
use App\Models\CrossoverType;
use Exception;
use Illuminate\Http\Request;
use Illuminate\Validation\Rule;
use Illuminate\Support\Facades\Log;

class CrossoverTypeController extends Controller
{
    /**
     * Display a listing of the resource.
     */
    public function index()
    {
        try {
            $crossoverTypes = CrossoverType::latest('crossover_id')->paginate(15);
            return view('dashboard.algorithm.crossover-types', compact('crossoverTypes'));
        } catch (Exception $e) {
            Log::error("Error fetching Crossover Types: " . $e->getMessage());
            return redirect()->back()->with('error', 'Could not load Crossover Methods page.');
        }
    }

    /**
     * Show the form for creating a new resource.
     */
    public function create()
    {
        //
    }

    /**
     * Store a newly created resource in storage.
     */
    public function store(Request $request)
    {
        $validatedData = $request->validate([
            'name' => 'required|string|max:100|unique:crossover_types,name',
            'slug' => 'required|string|max:255|unique:crossover_types,slug|alpha_dash',
            'description' => 'nullable|string|max:500',
            'is_active' => 'sometimes|boolean',
        ]);

        try {
            $dataToCreate = $validatedData;
            $dataToCreate['is_active'] = $request->has('is_active');
            CrossoverType::create($dataToCreate);
            return redirect()->route('algorithm-control.crossover-types.index')->with('success', 'Crossover method created successfully.');
        } catch (Exception $e) {
            Log::error("Crossover Type Creation Failed: " . $e->getMessage());
            return redirect()->back()->with('error', 'Failed to create crossover method.')->withInput();
        }
    }

    /**
     * Display the specified resource.
     */
    public function show(CrossoverType $crossoverType)
    {
        //
    }

    /**
     * Show the form for editing the specified resource.
     */
    public function edit(CrossoverType $crossoverType)
    {
        //
    }

    /**
     * Update the specified resource in storage.
     */
    public function update(Request $request, CrossoverType $crossoverType)
    {
        $errorBagName = 'editCrossoverModal_' . $crossoverType->crossover_id;
        $validatedData = $request->validate([
            'name' => ['required', 'string', 'max:100', Rule::unique('crossover_types')->ignore($crossoverType->crossover_id, 'crossover_id')],
            'slug' => 'required|string|max:255|unique:crossover_types,slug,' . $crossoverType->crossover_id . ',crossover_id',
            'description' => 'nullable|string|max:500',
            'is_active' => 'sometimes|boolean',
        ]);

        try {
            $dataToUpdate = $validatedData;
            $dataToUpdate['is_active'] = $request->has('is_active');
            $crossoverType->update($dataToUpdate);
            return redirect()->route('algorithm-control.crossover-types.index')->with('success', 'Crossover method updated successfully.');
        } catch (Exception $e) {
            Log::error("Crossover Type Update Failed for ID {$crossoverType->crossover_id}: " . $e->getMessage());
            return redirect()->back()->withErrors(['update_error' => 'Failed to update crossover method.'], $errorBagName)->withInput();
        }
    }

    /**
     * Remove the specified resource from storage.
     */
    public function destroy(CrossoverType $crossoverType)
    {
        try {
            // (اختياري) التحقق إذا كانت الطريقة مستخدمة في أي عملية تشغيل سابقة
            // if ($crossoverType->populations()->exists()) {
            //     return redirect()->route('algorithm-control.crossover-types.index')->with('error', 'Cannot delete: This method is used in historical data.');
            // }
            $crossoverType->delete();
            return redirect()->route('algorithm-control.crossover-types.index')->with('success', 'Crossover method deleted successfully.');
        } catch (Exception $e) {
            Log::error("Crossover Type Deletion Failed for ID {$crossoverType->crossover_id}: " . $e->getMessage());
            return redirect()->route('algorithm-control.crossover-types.index')->with('error', 'Failed to delete crossover method.');
        }
    }
}
---------------------------------------------------------------------------------------------------------
app\Http\Controllers\DataEntry\DepartmentController.php
<?php

namespace App\Http\Controllers\DataEntry;

use App\Http\Controllers\Controller;
use App\Models\Department;
use Illuminate\Http\Request; // استيراد Request
use Illuminate\Support\Facades\Log; // لاستخدام اللوغ (اختياري لكن مفيد)
use Exception; // لاستخدام Exception في الـ catch
use Maatwebsite\Excel\Facades\Excel; // *** استيراد Excel Facade ***
use Illuminate\Support\Collection;   // *** استيراد Collection ***
use Illuminate\Support\Facades\Validator; // لاستخدام Validator يدوياً

class DepartmentController extends Controller
{
    // =============================================
    //            Web Controller Methods
    // =============================================

    /**
     * Display a listing of the departments (Web View).
     */
    public function index()
    {
        // جلب كل الأقسام مرتبة بالاسم
        // $departments = Department::orderBy('department_name')->get();
        $departments = Department::latest()->paginate(10);
        // إرسال البيانات إلى الـ view
        return view('dashboard.data-entry.departments', compact('departments'));
    }

    /**
     * Store a newly created department from web request.
     */
    public function store(Request $request)
    {
        // 1. التحقق من البيانات (Validation) - بسيط ومباشر
        $request->validate([
            'department_no' => 'required|string|max:20|unique:departments,department_no',
            'department_name' => 'required|string|max:255',
        ]);

        // 2. تجهيز البيانات (لا حاجة لمعالجة خاصة هنا)
        $data = $request->only(['department_no', 'department_name']);

        // 3. إضافة للـ Database باستخدام ::create
        try {
            Department::create($data);
            // 4. إعادة التوجيه لصفحة العرض مع رسالة نجاح
            return redirect()->route('data-entry.departments.index') // تأكد أن اسم الروت صحيح
                ->with('success', 'Department created successfully.');
        } catch (Exception $e) {
            // تسجيل الخطأ للمطور (اختياري)
            Log::error('Department Creation Failed (Web): ' . $e->getMessage());
            // 4. إعادة التوجيه للصفحة السابقة مع رسالة خطأ وإرجاع المدخلات
            return redirect()->back()
                ->with('error', 'Failed to create department.')
                ->withInput();
        }
    }

    /**
     * Update the specified department from web request.
     * (نستخدم Route Model Binding هنا لجلب $department تلقائياً)
     */
    public function update(Request $request, Department $department)
    {
        // 1. التحقق من البيانات (Validation) - مع تجاهل الصف الحالي لـ unique
        $request->validate([
            'department_no' => 'required|string|max:20|unique:departments,department_no,' . $department->id,
            'department_name' => 'required|string|max:255',
        ]);

        // 2. تجهيز البيانات
        $data = $request->only(['department_no', 'department_name']);

        // 3. تحديث في الـ Database باستخدام ->update()
        try {
            $department->update($data);
            // 4. إعادة التوجيه لصفحة العرض مع رسالة نجاح
            return redirect()->route('data-entry.departments.index') // تأكد أن اسم الروت صحيح
                ->with('success', 'Department updated successfully.');
        } catch (Exception $e) {
            // تسجيل الخطأ (اختياري)
            Log::error('Department Update Failed (Web): ' . $e->getMessage());
            // 4. إعادة التوجيه للصفحة السابقة مع رسالة خطأ وإرجاع المدخلات
            return redirect()->back()
                ->with('error', 'Failed to update department.')
                ->withInput();
        }
    }

    /**
     * Remove the specified department from web request.
     */
    public function destroy(Department $department)
    {
        // (اختياري) التحقق من السجلات المرتبطة قبل الحذف
        if ($department->instructors()->exists() || $department->subjects()->exists() || $department->plans()->exists()) {
            return redirect()->route('data-entry.departments.index') // تأكد أن اسم الروت صحيح
                ->with('error', 'Cannot delete department. It has associated records.');
        }

        // 1. حذف من الـ Database باستخدام ->delete()
        try {
            $department->delete();
            // 2. إعادة التوجيه لصفحة العرض مع رسالة نجاح
            return redirect()->route('data-entry.departments.index') // تأكد أن اسم الروت صحيح
                ->with('success', 'Department deleted successfully.');
        } catch (Exception $e) {
            // تسجيل الخطأ (اختياري)
            Log::error('Department Deletion Failed (Web): ' . $e->getMessage());
            // 2. إعادة التوجيه لصفحة العرض مع رسالة خطأ
            return redirect()->route('data-entry.departments.index') // تأكد أن اسم الروت صحيح
                ->with('error', 'Failed to delete department.');
        }
    }


    /**
     * Handle bulk upload of departments from Excel file.
     */
    public function bulkUpload(Request $request)
    {
        // 1. التحقق من الملف المرفوع
        $request->validate([
            'department_excel_file' => 'required|file|mimes:xlsx,xls,csv|max:2048', // 2MB max
        ], [], ['department_excel_file' => 'Excel file']); // اسم مخصص للحقل في رسائل الخطأ

        try {
            // 2. قراءة البيانات من ملف الإكسل
            // withHeadingRow: يفترض أن الصف الأول هو العناوين
            // mapInto: يحاول تحويل كل صف لمصفوفة (يمكن استخدام ToCollection أيضاً)
            $rows = Excel::toCollection(collect(), $request->file('department_excel_file'))->first();

            if ($rows->isEmpty()) {
                return redirect()->route('data-entry.departments.index')
                    ->with('error', 'The uploaded Excel file is empty or has no data rows.');
            }

            $createdCount = 0;
            $updatedCount = 0;
            $skippedRows = 0;
            $processedRows = collect(); // لتتبع الأرقام والأسماء التي تمت معالجتها من الملف لتجنب التكرار داخل الملف
            $skippedDetails = [];

            // الحصول على الصف الأول كعناوين (بتحويلها لـ snake_case ومتوافقة مع DB)
            $header = $rows->first()->map(function ($item) {
                return strtolower(str_replace(' ', '_', $item));
            });

            // إزالة صف العناوين من البيانات
            $dataRows = $rows->slice(1);

            foreach ($dataRows as $rowKey => $rowArray) {
                // تحويل الصف الحالي لمصفوفة باستخدام العناوين كمفاتيح
                $row = $header->combine($rowArray);

                $departmentNo = trim($row->get('department_no', '')); // القيمة من عمود B
                $departmentName = trim($row->get('department_name', '')); // القيمة من عمود C

                // 1. تجاهل الأسطر الفارغة تماماً (إذا كان الرقم والاسم فارغين)
                if (empty($departmentNo) && empty($departmentName)) {
                    $skippedRows++;
                    $skippedDetails[] = "Row " . ($rowKey + 2) . ": Skipped because both department_no and department_name are empty.";
                    continue;
                }

                // 2. تجاهل الأسطر التي قد تكون مدمجة أو لا تحتوي على البيانات المطلوبة
                // (نفترض أن department_no أو department_name يجب أن يكون موجوداً)
                if (empty($departmentNo) || empty($departmentName)) {
                    Log::warning("Skipping row " . ($rowKey + 1) . " due to missing department_no or department_name.", $row->toArray());
                    $skippedRows++;
                    $skippedDetails[] = "Row " . ($rowKey + 2) . ": Missing department_no or department_name.";
                    continue;
                }


                // 4. فحص التكرار داخل الملف نفسه (بناءً على department_no)
                if ($processedRows->contains('department_no', $departmentNo)) {
                    Log::info("Skipping duplicate department_no '{$departmentNo}' from Excel file (already processed).");
                    $skippedRows++;
                    $skippedDetails[] = "Row " . ($rowKey + 2) . ": Duplicate department_no '{$departmentNo}' in file.";
                    continue;
                }
                // أو بناءً على department_name إذا كان يجب أن يكون فريداً أيضاً
                if ($processedRows->contains('department_name', $departmentName)) {
                    Log::info("Skipping duplicate department_name '{$departmentName}' from Excel file (already processed).");
                    $skippedRows++;
                    $skippedDetails[] = "Row " . ($rowKey + 2) . ": Duplicate department_name '{$departmentName}' in file.";
                    continue;
                }


                // 3. البحث عن القسم في قاعدة البيانات وتحديثه أو إنشاؤه
                // البحث برقم القسم أولاً (لأنه يفترض أن يكون فريداً وأساسياً)
                $department = Department::where('department_no', $departmentNo)->first();

                if ($department) {
                    // القسم موجود، قم بالتحديث (فقط إذا كان الاسم مختلفاً)
                    if ($department->department_name !== $departmentName) {
                        $department->department_name = $departmentName;
                        $department->save();
                        $updatedCount++;
                    }
                } else {
                    // القسم غير موجود برقم القسم، ابحث بالاسم (احتياطي)
                    $departmentByName = Department::where('department_name', $departmentName)->first();
                    if ($departmentByName) {
                        // وجد بالاسم، قم بتحديث رقمه إذا كان مختلفاً
                        if ($departmentByName->department_no !== $departmentNo) {
                            $departmentByName->department_no = $departmentNo; // تحديث الرقم
                            $departmentByName->save();
                        }
                        $updatedCount++;
                        $department = $departmentByName; // استخدم هذا القسم لتتبع المعالج
                    } else {
                        // القسم غير موجود لا بالرقم ولا بالاسم، قم بإنشاء جديد
                        Department::create([
                            'department_no' => $departmentNo,
                            'department_name' => $departmentName,
                        ]);
                        $createdCount++;
                    }
                }
                // إضافة للبيانات التي تمت معالجتها من الملف
                $processedRows->push(['department_no' => $departmentNo, 'department_name' => $departmentName]);
            }

            $message = "Bulk upload completed. ";
            if ($createdCount > 0) $message .= "{$createdCount} new departments created. ";
            if ($updatedCount > 0) $message .= "{$updatedCount} departments updated. ";
            if ($skippedRows > 0) $message .= "{$skippedRows} rows skipped (empty or duplicate within file).";

            return redirect()->route('data-entry.departments.index')
                ->with('success', $message)
                ->with('skipped_details', $skippedDetails);
        } catch (Exception $e) {
            Log::error('Department Bulk Upload Failed: ' . $e->getMessage() . ' at ' . $e->getFile() . ':' . $e->getLine());
            return redirect()->route('data-entry.departments.index')
                ->with('error', 'An error occurred during bulk upload: ' . $e->getMessage());
        }
    }


    // =============================================
    //             API Controller Methods
    // =============================================

    /**
     * Display a listing of the departments (API).
     */
    public function apiIndex()
    {
        try {
            $departments = Department::orderBy('department_name')->get(['id', 'department_no', 'department_name']); // جلب حقول محددة
            // إرجاع استجابة JSON ناجحة
            return response()->json([
                'success' => true,
                'data' => $departments,
            ], 200);
        } catch (Exception $e) {
            Log::error('API Error fetching departments: ' . $e->getMessage());
            // إرجاع استجابة JSON للخطأ
            return response()->json(['success' => false, 'message' => 'Server Error'], 500);
        }
    }

    /**
     * Store a newly created department from API request.
     */
    public function apiStore(Request $request)
    {
        // 1. Validation (Laravel يعيد 422 JSON تلقائياً عند الفشل)
        $validatedData = $request->validate([
            'department_no' => 'required|string|max:20|unique:departments,department_no',
            'department_name' => 'required|string|max:255',
        ]);

        // 2. Add to Database
        try {
            // استخدام create وإرجاع الموديل المنشأ مباشرة
            $department = Department::create($validatedData);
            // 3. Return Success JSON Response (201 Created)
            return response()->json([
                'success' => true,
                'data' => $department, // إرجاع القسم المنشأ
                'message' => 'Department created successfully.'
            ], 201);
        } catch (Exception $e) {
            Log::error('API Department Creation Failed: ' . $e->getMessage());
            // 3. Return Error JSON Response
            return response()->json(['success' => false, 'message' => 'Failed to create department.'], 500);
        }
    }

    /**
     * Display the specified department (API).
     * (نستخدم Route Model Binding هنا أيضاً)
     */
    public function apiShow(Department $department)
    {
        // إرجاع القسم مباشرة
        return response()->json([
            'success' => true,
            'data' => $department,
        ], 200);
    }

    /**
     * Update the specified department from API request.
     * تحديث قسم محدد قادم من طلب API
     */
    public function apiUpdate(Request $request, Department $department)
    {
        // 1. Validation (استخدام sometimes لأن API قد يرسل جزءاً من البيانات)
        $validatedData = $request->validate([
            'department_no' => [
                'sometimes', // فقط تحقق إذا كان الحقل موجوداً في الطلب
                'required',
                'string',
                'max:20',
                'unique:departments,department_no,' . $department->id, // تجاهل الصف الحالي
            ],
            'department_name' => 'sometimes|required|string|max:255',
        ]);

        // 2. Update Database
        try {
            // تحديث القسم بالبيانات التي تم التحقق منها فقط
            $department->update($validatedData);
            // 3. Return Success JSON Response
            return response()->json([
                'success' => true,
                'data' => $department, // إرجاع القسم المحدث
                'message' => 'Department updated successfully.'
            ], 200);
        } catch (Exception $e) {
            Log::error('API Department Update Failed: ' . $e->getMessage());
            // 3. Return Error JSON Response
            return response()->json(['success' => false, 'message' => 'Failed to update department.'], 500);
        }
    }

    /**
     * Remove the specified department from API request.
     */
    public function apiDestroy(Department $department)
    {
        // (اختياري) التحقق من السجلات المرتبطة
        if ($department->instructors()->exists() || $department->subjects()->exists() || $department->plans()->exists()) {
            return response()->json([
                'success' => false,
                'message' => 'Cannot delete department due to associated records.'
            ], 409); // 409 Conflict
        }

        // 1. Delete from Database
        try {
            $department->delete();
            // 2. Return Success JSON Response (200 OK or 204 No Content)
            return response()->json([
                'success' => true,
                'message' => 'Department deleted successfully.'
            ], 200);
        } catch (Exception $e) {
            Log::error('API Department Deletion Failed: ' . $e->getMessage());
            // 2. Return Error JSON Response
            return response()->json(['success' => false, 'message' => 'Failed to delete department.'], 500);
        }
    }

    /**
     * Handle bulk upload of departments from Excel file via API.
     */
    public function apiBulkUpload(Request $request)
    {
        // 1. التحقق من الملف المرفوع
        $validator = Validator::make($request->all(), [
            'department_excel_file' => 'required|file|mimes:xlsx,xls,csv|max:2048',
        ], [], ['department_excel_file' => 'Excel file']);

        if ($validator->fails()) {
            return response()->json([
                'success' => false,
                'message' => 'Validation failed.',
                'errors' => $validator->errors()
            ], 422); // Unprocessable Entity
        }

        try {
            $rows = Excel::toCollection(collect(), $request->file('department_excel_file'))->first();

            if ($rows->isEmpty() || $rows->count() <= 1) { // أقل من أو يساوي 1 للتحقق من وجود صف بيانات واحد على الأقل بعد الهيدر
                return response()->json([
                    'success' => false,
                    'message' => 'The uploaded Excel file is empty or contains no data rows after the header.'
                ], 400); // Bad Request
            }

            $createdCount = 0;
            $updatedCount = 0;
            $skippedCount = 0; // لتعداد الصفوف المتجاهلة
            $skippedDetails = []; // لتخزين تفاصيل الصفوف المتجاهلة
            $processedRows = collect();

            $header = $rows->first()->map(fn($item) => strtolower(str_replace(' ', '_', $item ?? '')));
            $dataRows = $rows->slice(1);

            foreach ($dataRows as $rowKey => $rowArray) {
                $row = $header->combine($rowArray->map(fn($val) => trim($val ?? ''))); // Trim values

                $departmentNo = $row->get('department_no', '');
                $departmentName = $row->get('department_name', '');
                $currentRowNumber = $rowKey + 2; // رقم الصف الفعلي في الإكسل (مع الهيدر)

                if (empty($departmentNo) && empty($departmentName)) {
                    $skippedCount++;
                    $skippedDetails[] = "Row {$currentRowNumber}: Skipped because both department_no and department_name are empty.";
                    continue;
                }
                if (empty($departmentNo) || empty($departmentName)) {
                    $skippedCount++;
                    $skippedDetails[] = "Row {$currentRowNumber}: Skipped due to missing department_no or department_name.";
                    continue;
                }
                if ($processedRows->contains('department_no', $departmentNo)) {
                    $skippedCount++;
                    $skippedDetails[] = "Row {$currentRowNumber}: Skipped duplicate department_no '{$departmentNo}' from within this file.";
                    continue;
                }
                if ($processedRows->contains('department_name', $departmentName)) {
                    $skippedCount++;
                    $skippedDetails[] = "Row {$currentRowNumber}: Skipped duplicate department_name '{$departmentName}' from within this file.";
                    continue;
                }

                $department = Department::where('department_no', $departmentNo)->first();
                $updatedThisRow = false;

                if ($department) {
                    if ($department->department_name !== $departmentName) {
                        $department->department_name = $departmentName;
                        $department->save();
                        $updatedCount++;
                        $updatedThisRow = true;
                    }
                } else {
                    $departmentByName = Department::where('department_name', $departmentName)->first();
                    if ($departmentByName) {
                        if ($departmentByName->department_no !== $departmentNo) {
                            $departmentByName->department_no = $departmentNo;
                            $departmentByName->save();
                        }
                        $updatedCount++;
                        $updatedThisRow = true;
                        $department = $departmentByName;
                    } else {
                        Department::create([
                            'department_no' => $departmentNo,
                            'department_name' => $departmentName,
                        ]);
                        $createdCount++;
                    }
                }
                if (!$updatedThisRow && $department) { // لم يتم التحديث ولكنه موجود، يعتبر كأنه تمت معالجته
                    // No action needed, just mark as processed if it existed and wasn't updated
                }
                $processedRows->push(['department_no' => $departmentNo, 'department_name' => $departmentName]);
            }

            $summaryMessage = "Bulk upload processed.";
            $responseData = [
                'created_count' => $createdCount,
                'updated_count' => $updatedCount,
                'skipped_count' => $skippedCount,
                'skipped_details' => $skippedDetails,
            ];

            return response()->json([
                'success' => true,
                'message' => $summaryMessage,
                'data' => $responseData
            ], 200); // OK

        } catch (Exception $e) {
            Log::error('API Department Bulk Upload Failed: ' . $e->getMessage() . ' at ' . $e->getFile() . ':' . $e->getLine());
            return response()->json([
                'success' => false,
                'message' => 'An error occurred during bulk upload.',
                'error_details' => $e->getMessage() // إرسال تفاصيل الخطأ (للمطور)
            ], 500); // Internal Server Error
        }
    }
}
---------------------------------------------------------------------------------------------------------
app\Http\Controllers\DataEntry\InstructorController.php
<?php

namespace App\Http\Controllers\DataEntry;

use Exception;
use App\Models\Role;
use App\Models\User;
use App\Models\Department;
use App\Models\Instructor;
use Illuminate\Support\Str;
use Illuminate\Http\Request;
use Illuminate\Validation\Rule;
use Illuminate\Support\Facades\DB;
use App\Http\Controllers\Controller;
use Illuminate\Support\Facades\Hash;
use Maatwebsite\Excel\Facades\Excel;
use Illuminate\Support\Facades\Password;
use Illuminate\Support\Facades\Validator;
use Illuminate\Support\Facades\Log; // اختياري

class InstructorController extends Controller
{
    // =============================================
    //            Web Controller Methods
    // =============================================


    public function index(Request $request)
    {
        try {
            $instructors = Instructor::with(['user:id,name,email', 'department:id,department_name'])
                ->latest('id')
                ->paginate(15);
            // لجلب الأقسام لنموذج الإضافة/التعديل
            $departments = Department::orderBy('department_name')->get(['id', 'department_name']);
            // لجلب الأدوار المحتملة للمدرس (إذا أردت تحديدها في الفورم)
            $instructorRoles = Role::whereIn('name', ['instructor', 'hod'])->orderBy('display_name')->get(['id', 'display_name']);


            return view('dashboard.data-entry.instructors', compact('instructors', 'departments', 'instructorRoles'));
        } catch (Exception $e) {
            Log::error('Error fetching instructors: ' . $e->getMessage());
            return redirect()->back()->with('error', 'Could not load instructors list.');
        }
    }


    public function store(Request $request)
    {
        $errorBagName = 'addInstructorModal';
        $validatedData = $request->validateWithBag($errorBagName, [
            // User fields
            'name' => 'required|string|max:255',
            'email' => 'required|string|email|max:255|unique:users,email',
            'password' => 'required|string|min:8|confirmed', // استخدام قاعدة أبسط
            // 'password' => ['required', 'confirmed', Password::min(8)], // استخدام قاعدة أبسط
            'role_id_for_instructor' => 'required|integer|exists:roles,id', // دور المستخدم الجديد (مدرس/رئيس قسم)

            // Instructor fields
            'instructor_no' => 'required|string|max:20|unique:instructors,instructor_no',
            'academic_degree' => 'nullable|string|max:100',
            'department_id' => 'required|integer|exists:departments,id',
            'max_weekly_hours' => 'nullable|integer|min:0|max:100',
            // 'office_location' => 'nullable|string|max:255',
            // 'office_hours' => 'nullable|string|max:255',
            'availability_preferences' => 'nullable|string',
        ]);

        DB::beginTransaction(); // بدء Transaction
        try {
            // 1. إنشاء المستخدم
            $user = User::create([
                'name' => $validatedData['name'],
                'email' => $validatedData['email'],
                'password' => Hash::make($validatedData['password']),
                'role_id' => $validatedData['role_id_for_instructor'], // استخدام الدور المحدد
                'email_verified_at' => now(), // تفعيل الإيميل مباشرة (اختياري)
            ]);

            // 2. إنشاء المدرس وربطه باليوزر
            Instructor::create([
                'user_id' => $user->id,
                'instructor_no' => $validatedData['instructor_no'],
                'instructor_name' => $user->name, // استخدام اسم اليوزر كاسم افتراضي للمدرس
                'academic_degree' => $validatedData['academic_degree'],
                'department_id' => $validatedData['department_id'],
                'max_weekly_hours' => $validatedData['max_weekly_hours'],
                // 'office_location' => $validatedData['office_location'],
                // 'office_hours' => $validatedData['office_hours'],
                'availability_preferences' => $validatedData['availability_preferences'],
            ]);

            DB::commit(); // تأكيد العمليات

            return redirect()->route('data-entry.instructors.index')
                ->with('success', 'Instructor and user account created successfully.');
        } catch (Exception $e) {
            DB::rollBack(); // التراجع عن العمليات في حالة الخطأ
            Log::error('Instructor & User Creation Failed: ' . $e->getMessage());
            return redirect()->back()
                ->with('error', 'Failed to create instructor: ' . $e->getMessage())
                ->withInput()
                ->withErrors($validatedData, $errorBagName); // إعادة أخطاء التحقق إذا فشل بعد التحقق (نادر)
        }
    }


    public function update(Request $request, Instructor $instructor)
    {
        $user = $instructor->user; // جلب المستخدم المرتبط
        if (!$user) {
            // معالجة حالة عدم وجود مستخدم مرتبط (نادر الحدوث إذا كان الإنشاء صحيحاً)
            return redirect()->route('data-entry.instructors.index')->with('error', 'User account for this instructor not found.');
        }

        $errorBagName = 'editInstructorModal_' . $instructor->id;
        $validatedData = $request->validate([
            // User fields
            'name' => 'required|string|max:255',
            'email' => ['required', 'string', 'email', 'max:255', Rule::unique('users')->ignore($user->id)],
            'password' => 'nullable|string|min:8|confirmed', // اختياري
            // 'password' => ['nullable', 'confirmed', Password::min(8)], // اختياري
            'role_id_for_instructor' => 'required|integer|exists:roles,id',

            // Instructor fields
            'instructor_no' => ['required', 'string', 'max:20', Rule::unique('instructors')->ignore($instructor->id)],
            'academic_degree' => 'nullable|string|max:100',
            'department_id' => 'required|integer|exists:departments,id',
            'max_weekly_hours' => 'nullable|integer|min:0|max:100',
            // 'office_location' => 'nullable|string|max:255',
            // 'office_hours' => 'nullable|string|max:255',
            'availability_preferences' => 'nullable|string',
        ]);

        // dd('dddd');
        DB::beginTransaction();
        try {
            // 1. تحديث بيانات المستخدم
            $userData = [
                'name' => $validatedData['name'],
                'email' => $validatedData['email'],
                'role_id' => $validatedData['role_id_for_instructor'],
            ];
            if (!empty($validatedData['password'])) {
                $userData['password'] = Hash::make($validatedData['password']);
            }
            $user->update($userData);

            // 2. تحديث بيانات المدرس
            $instructor->update([
                'instructor_no' => $validatedData['instructor_no'],
                'instructor_name' => $validatedData['name'], // تحديث اسم المدرس ليتطابق
                'academic_degree' => $validatedData['academic_degree'],
                'department_id' => $validatedData['department_id'],
                'max_weekly_hours' => $validatedData['max_weekly_hours'],
                // 'office_location' => $validatedData['office_location'],
                // 'office_hours' => $validatedData['office_hours'],
                'availability_preferences' => $validatedData['availability_preferences'],
            ]);

            DB::commit();
            return redirect()->route('data-entry.instructors.index')
                ->with('success', 'Instructor and user account updated successfully.');
        } catch (Exception $e) {
            DB::rollBack();
            Log::error('Instructor & User Update Failed for Instructor ID ' . $instructor->id . ': ' . $e->getMessage());
            return redirect()->back()
                ->with('error', 'Failed to update instructor: ' . $e->getMessage())
                ->withInput()
                ->withErrors($validatedData, $errorBagName);
        }
    }
  public function destroy(Instructor $instructor)
    {

        DB::beginTransaction();
        try {
            $user = $instructor->user; // جلب المستخدم المرتبط

            // حذف سجل المدرس أولاً (سيؤدي لتشغيل onDelete('set null') إذا كان user_id في instructors يقبله)
            // لكن بما أننا سنحذف اليوزر، ترتيب الحذف هنا ليس حرجاً جداً
            $instructor->delete();

            // ثم حذف المستخدم المرتبط (إذا وجد)
            if ($user) {
                // (اختياري) تحقق إذا كان هذا المستخدم له أدوار أخرى غير "instructor" أو "hod"
                // إذا كان له أدوار إدارية أخرى هامة، قد لا ترغب بحذفه تلقائياً
                // if ($user->role->name === 'admin' && User::where('role_id', $user->role_id)->count() <= 1) {
                //     DB::rollBack();
                //     return redirect()->route('data-entry.instructors.index')
                //                      ->with('error', 'Cannot delete the last admin user via instructor deletion.');
                // }
                $user->delete();
            }

            DB::commit();
            return redirect()->route('data-entry.instructors.index')
                ->with('success', 'Instructor and associated user account deleted successfully.');
        } catch (Exception $e) {
            DB::rollBack();
            Log::error('Instructor & User Deletion Failed for Instructor ID ' . $instructor->id . ': ' . $e->getMessage());
            return redirect()->route('data-entry.instructors.index')
                ->with('error', 'Failed to delete instructor: ' . $e->getMessage());
        }
    }
 private $createdCount = 0;
    private $updatedCount = 0;
    private $skippedCount = 0;
    private $skippedDetails = [];
    private $processedInstructorNos = []; // لتتبع التكرار داخل الملف

    /**
     * Handle the import of instructors from an Excel file.
     */
    public function importExcel(Request $request)
    {
        $request->validate(['instructor_excel_file' => 'required|file|mimes:xlsx,xls,csv|max:5120']);
        $this->resetCounters();

        try {
            $rows = Excel::toArray(new \stdClass(), $request->file('instructor_excel_file'))[0];
            if (count($rows) <= 1) {
                return redirect()->route('data-entry.instructors.index')->with('error', 'Uploaded Excel file is empty or contains only a header row.');
            }

            $header = array_map('strtolower', array_map('trim', array_shift($rows)));
            // البحث عن مواقع الأعمدة (مع مرونة في الأسماء)
            $instructorNoCol = $this->getColumnIndex($header, ['instructor_no', 'instructorno', 'رقم المدرس', 'الرقم الوظيفي']);
            $instructorNameCol = $this->getColumnIndex($header, ['instructor_name', 'instructorname', 'اسم المدرس', 'الاسم']);
            $departmentCol = $this->getColumnIndex($header, ['department_id', 'departmentid', 'department', 'القسم']);
            $emailCol = $this->getColumnIndex($header, ['email', 'البريد الالكتروني', 'الايميل']);
            $degreeCol = $this->getColumnIndex($header, ['academic_degree', 'academicdegree', 'degree', 'الدرجة العلمية']);
            $maxHoursCol = $this->getColumnIndex($header, ['max_weekly_hours', 'maxweeklyhours', 'ساعات الدوام']);

            if (is_null($instructorNoCol) || is_null($instructorNameCol) || is_null($departmentCol)) {
                $missing = [];
                if (is_null($instructorNoCol)) $missing[] = "'instructor_no'";
                if (is_null($instructorNameCol)) $missing[] = "'instructor_name'";
                if (is_null($departmentCol)) $missing[] = "'department_id' or 'department_name'";
                return redirect()->route('data-entry.instructors.index')->with('error', 'Excel file is missing required columns: ' . implode(', ', $missing));
            }

            $currentRowNumber = 1;
            DB::beginTransaction(); // بدء Transaction لضمان سلامة البيانات

            foreach ($rows as $row) {
                $currentRowNumber++;
                $rowData = [];
                foreach ($header as $index => $colName) {
                    $rowData[$colName] = $row[$index] ?? null;
                }

                if (count(array_filter($row)) == 0) {
                    $this->skippedDetails[] = "Row {$currentRowNumber}: Skipped (empty).";
                    $this->skippedCount++;
                    continue;
                }

                $instructorNo = trim($rowData[$header[$instructorNoCol]] ?? null);
                if (empty($instructorNo)) {
                    $this->skippedDetails[] = "Row {$currentRowNumber}: Skipped (missing instructor_no).";
                    $this->skippedCount++;
                    continue;
                }

                // منع تكرار معالجة نفس الرقم الوظيفي من الملف
                if (in_array($instructorNo, $this->processedInstructorNos)) {
                    $this->skippedDetails[] = "Row {$currentRowNumber}: Skipped (duplicate instructor_no '{$instructorNo}' within the file).";
                    $this->skippedCount++;
                    continue;
                }
                $this->processedInstructorNos[] = $instructorNo;

                $instructorNameInput = trim($rowData[$header[$instructorNameCol]] ?? null);
                $departmentIdentifier = trim($rowData[$header[$departmentCol]] ?? null);
                $emailInput = isset($emailCol) ? trim($rowData[$header[$emailCol]] ?? null) : null;
                $degreeInputFromFile = isset($degreeCol) ? trim($rowData[$header[$degreeCol]] ?? null) : null;
                $maxHoursInput = isset($maxHoursCol) ? trim($rowData[$header[$maxHoursCol]] ?? null) : null;

                if (empty($instructorNameInput) || empty($departmentIdentifier)) {
                    $this->skippedDetails[] = "Row {$currentRowNumber} (EmpNo:{$instructorNo}): Skipped (missing instructor_name or department).";
                    $this->skippedCount++;
                    continue;
                }

                // 1. استخراج الاسم والدرجة العلمية
                $name = $instructorNameInput;
                $degreeFromName = null;
                if (preg_match('/\(.+\)/u', $instructorNameInput, $matches)) {
                    $degreeFromName = trim($matches[0], '()');
                    $name = trim(str_replace($matches[0], '', $instructorNameInput));
                }
                $academicDegree = $degreeFromName ?: $degreeInputFromFile;

                // 2. البحث عن القسم
                $department = $this->findDepartment($departmentIdentifier);
                if (!$department) {
                    $this->skippedDetails[] = "Row {$currentRowNumber} (EmpNo:{$instructorNo}): Skipped (Department '{$departmentIdentifier}' not found).";
                    $this->skippedCount++;
                    continue;
                }

                // 3. تجهيز الإيميل
                $email = $emailInput;
                if (empty($email)) {
                    $baseEmailName = 'momen' . preg_replace('/[^A-Za-z0-9]/', '', $instructorNo); // إزالة أي رموز من رقم المدرس
                    $email = $this->generateUniqueEmail($baseEmailName, '@ptc.edu'); // افترض نطاق الكلية
                } else {
                    // التحقق من صحة الإيميل إذا تم إدخاله
                    $emailValidator = Validator::make(['email' => $email], ['email' => 'email']);
                    if ($emailValidator->fails()) {
                        $this->skippedDetails[] = "Row {$currentRowNumber} (EmpNo:{$instructorNo}): Skipped (Invalid email format '{$email}').";
                        $this->skippedCount++;
                        continue;
                    }
                }

                // 4. البحث عن المدرس أو إنشاء جديد (User و Instructor)
                $instructor = Instructor::where('instructor_no', $instructorNo)->first();
                $userToUpdateOrCreate = null;

                if ($instructor) { // تحديث مدرس موجود
                    $userToUpdateOrCreate = $instructor->user;
                    if (!$userToUpdateOrCreate) { // في حالة نادرة أن المدرس موجود بدون مستخدم
                        Log::warning("Instructor ID {$instructor->id} exists without a user. Creating a new user.");
                        $userToUpdateOrCreate = $this->createUserForInstructor($name, $email, 'instructor'); // افترض دور افتراضي
                        $instructor->user_id = $userToUpdateOrCreate->id;
                    }

                    // تحديث بيانات المستخدم
                    $userData = ['name' => $name, 'email' => $email];
                    // التحقق من تفرد الإيميل عند التحديث
                    if (User::where('email', $email)->where('id', '!=', $userToUpdateOrCreate->id)->exists()) {
                        $this->skippedDetails[] = "Row {$currentRowNumber} (EmpNo:{$instructorNo}): Skipped (Email '{$email}' already taken by another user).";
                        $this->skippedCount++;
                        continue;
                    }
                    $userToUpdateOrCreate->update($userData);

                    // تحديث بيانات المدرس
                    $instructor->instructor_name = $name;
                    $instructor->academic_degree = $academicDegree;
                    $instructor->department_id = $department->id;
                    if (!is_null($maxHoursInput) && is_numeric($maxHoursInput)) {
                        $instructor->max_weekly_hours = (int)$maxHoursInput;
                    }
                    // يمكن إضافة تحديث للحقول الأخرى المعلقة
                    $instructor->save();
                    $this->updatedCount++;
                } else { // إنشاء مدرس جديد ومستخدم جديد
                    // التحقق من تفرد الإيميل قبل إنشاء مستخدم جديد
                    if (User::where('email', $email)->exists()) {
                        $this->skippedDetails[] = "Row {$currentRowNumber} (EmpNo:{$instructorNo}): Skipped (Generated/Provided email '{$email}' already exists).";
                        $this->skippedCount++;
                        continue;
                    }
                    $userToUpdateOrCreate = $this->createUserForInstructor($name, $email, 'instructor'); // افترض دور افتراضي

                    Instructor::create([
                        'user_id' => $userToUpdateOrCreate->id,
                        'instructor_no' => $instructorNo,
                        'instructor_name' => $name,
                        'academic_degree' => $academicDegree,
                        'department_id' => $department->id,
                        'max_weekly_hours' => (!is_null($maxHoursInput) && is_numeric($maxHoursInput)) ? (int)$maxHoursInput : null,
                        // يمكن إضافة الحقول المعلقة
                    ]);
                    $this->createdCount++;
                }
            } // نهاية حلقة الصفوف

            DB::commit(); // تأكيد كل العمليات

            // بناء رسالة النجاح
            $messages = [];
            if ($this->createdCount > 0) $messages[] = "{$this->createdCount} new instructor(s) created.";
            if ($this->updatedCount > 0) $messages[] = "{$this->updatedCount} existing instructor(s) updated.";
            if ($this->skippedCount > 0) $messages[] = "{$this->skippedCount} row(s) were skipped.";
            if (empty($messages)) {
                return redirect()->route('data-entry.instructors.index')->with('info', 'Excel file processed. No changes made or no valid data found.');
            } else {
                return redirect()->route('data-entry.instructors.index')->with('success', implode(' ', $messages))->with('skipped_details', $this->skippedDetails);
            }
        } catch (Exception $e) {
            DB::rollBack(); // تراجع في حالة الخطأ
            Log::error('Instructors Excel Import Failed: ' . $e->getMessage() . ' at ' . $e->getFile() . ':' . $e->getLine());
            return redirect()->route('data-entry.instructors.index')
                ->with('error', 'An error occurred during Excel import: ' . $e->getMessage())
                ->with('skipped_details', $this->skippedDetails); // إرجاع ما تم تخطيه حتى الآن
        }
    }

    // --- دوال مساعدة للـ Import ---
    private function resetCounters()
    {
        $this->createdCount = 0;
        $this->updatedCount = 0;
        $this->skippedCount = 0;
        $this->skippedDetails = [];
        $this->processedInstructorNos = [];
    }
    private function getColumnIndex(array $header, array $possibleNames)
    {
        $normalizedHeader = array_map(fn($h) => strtolower(str_replace([' ', '_', '-'], '', trim($h))), $header);

        foreach ($possibleNames as $name) {
            $normalizedName = strtolower(str_replace([' ', '_', '-'], '', trim($name)));
            $index = array_search($normalizedName, $normalizedHeader);
            if ($index !== false) {
                return $index; // Return the original index from the header
            }
        }
        return null;
    }

    private function findDepartment($identifier)
    {
        if (is_numeric($identifier)) return Department::find($identifier);
        $normalized = $this->normalizeArabicStringForSearch($identifier);
        return Department::whereRaw('REPLACE(LOWER(department_name), " ", "") LIKE ?', ["%{$normalized}%"])
            ->orWhereRaw('LOWER(department_no) LIKE ?', ["%{$normalized}%"])
            ->first();
    }

    private function normalizeArabicStringForSearch($string)
    {
        // Normalize Hamza (أ, إ, آ -> ا)
        $string = str_replace(['أ', 'إ', 'آ'], 'ا', $string);
        // Normalize Alef Maqsura (ى -> ي)
        $string = str_replace('ى', 'ي', $string);
        // Normalize Taa Marbuta (ة -> ه)
        $string = str_replace('ة', 'ه', $string);
        // Remove "ال" from the beginning of words
        $string = preg_replace('/\bال/u', '', $string);
        // Remove extra spaces and convert to lowercase
        $string = strtolower(preg_replace('/\s+/u', '', trim($string)));

        $string = preg_replace('/[أإآ]/u', 'ا', $string); // توحيد الألفات
        $string = preg_replace('/^ال/u', '', $string); // إزالة "ال" التعريف من البداية
        $string = preg_replace('/\s+/u', '', trim($string)); // إزالة كل الفراغات وتحويل لحروف صغيرة
        return strtolower($string);
    }

    private function generateUniqueEmail($baseName, $domain, $counter = 0) {
        $email = $baseName . ($counter > 0 ? str_pad($counter, 2, '0', STR_PAD_LEFT) : '') . $domain;
        if (User::where('email', $email)->exists()) {
            return $this->generateUniqueEmail($baseName, $domain, $counter + 1);
        }
        return $email;
    }
  private function createUserForInstructor($name, $email, $roleName = 'instructor')
    {
        $role = Role::where('name', $roleName)->first();
        if (!$role) { // دور افتراضي إذا لم يوجد
            $role = Role::firstOrCreate(['name' => 'instructor'], ['display_name' => 'Instructor']);
        }
        return User::create([
            'name' => $name,
            'email' => $email,
            'password' => Hash::make('123456789'), // كلمة مرور افتراضية
            'role_id' => $role->id,
            'email_verified_at' => now(),
        ]);
    }


    // =============================================
    //             API Controller Methods
    // =============================================

    /**
     * Display a listing of the instructors (API).
     */
    public function apiIndex(Request $request)
    {
        try {
            $query = Instructor::with([
                'user:id,name,email,role_id', // جلب دور المستخدم أيضاً
                'user.role:id,name,display_name', // تفاصيل الدور
                'department:id,department_name'
            ]);

            if ($request->has('department_id')) {
                $query->where('department_id', $request->department_id);
            }
            if ($request->has('q')) {
                $searchTerm = $request->q;
                $query->where(function ($q) use ($searchTerm) {
                    $q->where('instructor_no', 'like', "%{$searchTerm}%")
                        ->orWhere('instructor_name', 'like', "%{$searchTerm}%")
                        ->orWhereHas('user', fn($userQuery) => $userQuery->where('name', 'like', "%{$searchTerm}%")->orWhere('email', 'like', "%{$searchTerm}%"));
                });
            }

            // --- الـ Pagination للـ API (معطل حالياً، جلب الكل) ---
            $instructors = $query->latest('id')->get();
            /*
            $perPage = $request->query('per_page', 15);
            $instructorsPaginated = $query->latest('id')->paginate($perPage);
            return response()->json([
                'success' => true,
                'data' => $instructorsPaginated->items(),
                'pagination' => [ 'total' => $instructorsPaginated->total(), ... ]
            ], 200);
            */

            return response()->json(['success' => true, 'data' => $instructors], 200);
        } catch (Exception $e) {
            Log::error('API Error fetching instructors: ' . $e->getMessage());
            return response()->json(['success' => false, 'message' => 'Server Error'], 500);
        }
    }

    /**
     * Store a newly created instructor and associated user from API request.
     */
    public function apiStore(Request $request)
    {
        $validator = Validator::make($request->all(), [
            // User fields
            'name' => 'required|string|max:255',
            'email' => 'required|string|email|max:255|unique:users,email',
            'password' => 'required|string|min:8', // لا حاجة لـ confirmed في API عادةً
            'role_id_for_instructor' => 'required|integer|exists:roles,id',

            // Instructor fields
            'instructor_no' => 'required|string|max:20|unique:instructors,instructor_no',
            'academic_degree' => 'nullable|string|max:100',
            'department_id' => 'required|integer|exists:departments,id',
            'max_weekly_hours' => 'nullable|integer|min:0|max:100',
            // 'office_location' => 'nullable|string|max:255',
            // 'office_hours' => 'nullable|string|max:255',
            'availability_preferences' => 'nullable|string', // أو 'nullable|json'
        ]);

        if ($validator->fails()) {
            return response()->json(['success' => false, 'message' => 'Validation failed', 'errors' => $validator->errors()], 422);
        }

        $validatedData = $validator->validated(); // الحصول على البيانات المتحقق منها

        DB::beginTransaction();
        try {
            $user = User::create([
                'name' => $validatedData['name'],
                'email' => $validatedData['email'],
                'password' => Hash::make($validatedData['password']),
                'role_id' => $validatedData['role_id_for_instructor'],
                'email_verified_at' => now(), // افترض التفعيل المباشر للـ API
            ]);

            $instructor = Instructor::create([
                'user_id' => $user->id,
                'instructor_no' => $validatedData['instructor_no'],
                'instructor_name' => $user->name,
                'academic_degree' => $validatedData['academic_degree'] ?? null,
                'department_id' => $validatedData['department_id'],
                'max_weekly_hours' => $validatedData['max_weekly_hours'] ?? null,
                // 'office_location' => $validatedData['office_location'] ?? null,
                // 'office_hours' => $validatedData['office_hours'] ?? null,
                'availability_preferences' => $validatedData['availability_preferences'] ?? null,
            ]);

            DB::commit();
            // تحميل العلاقات لعرضها في الاستجابة
            $instructor->load(['user.role', 'department']);
            return response()->json([
                'success' => true,
                'data' => $instructor,
                'message' => 'Instructor and user account created successfully.'
            ], 201);
        } catch (Exception $e) {
            DB::rollBack();
            Log::error('API Instructor & User Creation Failed: ' . $e->getMessage());
            return response()->json(['success' => false, 'message' => 'Failed to create instructor: ' . $e->getMessage()], 500);
        }
    }

    /**
     * Display the specified instructor (API).
     */
    public function apiShow(Instructor $instructor) // Route Model Binding
    {
        try {
            $instructor->load(['user.role', 'department', 'subjects:subjects.id,subject_no,subject_name']); // تحميل المواد المعينة أيضاً
            return response()->json(['success' => true, 'data' => $instructor], 200);
        } catch (Exception $e) {
            Log::error("API Error fetching instructor ID {$instructor->id}: " . $e->getMessage());
            return response()->json(['success' => false, 'message' => 'Instructor not found or server error.'], 404); // أو 500
        }
    }

    /**
     * Update the specified instructor and associated user from API request.
     */
    public function apiUpdate(Request $request, Instructor $instructor)
    {
        $user = $instructor->user;
        if (!$user) {
            return response()->json(['success' => false, 'message' => 'User account for this instructor not found.'], 404);
        }

        $validator = Validator::make($request->all(), [
            // User fields (sometimes لأن الـ API قد يرسل جزءاً من البيانات)
            'name' => 'sometimes|required|string|max:255',
            'email' => ['sometimes', 'required', 'string', 'email', 'max:255', Rule::unique('users')->ignore($user->id)],
            'password' => 'required|string|min:8', // كلمة المرور اختيارية
            'role_id_for_instructor' => 'sometimes|required|integer|exists:roles,id',

            // Instructor fields
            'instructor_no' => ['sometimes', 'required', 'string', 'max:20', Rule::unique('instructors')->ignore($instructor->id)],
            'academic_degree' => 'sometimes|nullable|string|max:100',
            'department_id' => 'sometimes|required|integer|exists:departments,id',
            'max_weekly_hours' => 'sometimes|nullable|integer|min:0|max:100',
            // 'office_location' => 'sometimes|nullable|string|max:255',
            // 'office_hours' => 'sometimes|nullable|string|max:255',
            'availability_preferences' => 'sometimes|nullable|string',
        ]);

        if ($validator->fails()) {
            return response()->json(['success' => false, 'message' => 'Validation failed', 'errors' => $validator->errors()], 422);
        }

        $validatedData = $validator->validated(); // الحصول فقط على البيانات التي تم التحقق منها وتم إرسالها

        DB::beginTransaction();
        try {
            // 1. تحديث بيانات المستخدم (فقط إذا تم إرسالها)
            $userDataToUpdate = [];
            if (isset($validatedData['name'])) $userDataToUpdate['name'] = $validatedData['name'];
            if (isset($validatedData['email'])) $userDataToUpdate['email'] = $validatedData['email'];
            if (isset($validatedData['role_id_for_instructor'])) $userDataToUpdate['role_id'] = $validatedData['role_id_for_instructor'];
            if (!empty($validatedData['password'])) {
                $userDataToUpdate['password'] = Hash::make($validatedData['password']);
            }
            if (!empty($userDataToUpdate)) {
                $user->update($userDataToUpdate);
            }

            // 2. تحديث بيانات المدرس (فقط إذا تم إرسالها)
            $instructorDataToUpdate = [];
            if (isset($validatedData['instructor_no'])) $instructorDataToUpdate['instructor_no'] = $validatedData['instructor_no'];
            if (isset($validatedData['name'])) $instructorDataToUpdate['instructor_name'] = $validatedData['name']; // تحديث اسم المدرس
            if (array_key_exists('academic_degree', $validatedData)) $instructorDataToUpdate['academic_degree'] = $validatedData['academic_degree'];
            if (isset($validatedData['department_id'])) $instructorDataToUpdate['department_id'] = $validatedData['department_id'];
            if (array_key_exists('max_weekly_hours', $validatedData)) $instructorDataToUpdate['max_weekly_hours'] = $validatedData['max_weekly_hours'];
            // if (array_key_exists('office_location', $validatedData)) $instructorDataToUpdate['office_location'] = $validatedData['office_location'];
            // if (array_key_exists('office_hours', $validatedData)) $instructorDataToUpdate['office_hours'] = $validatedData['office_hours'];
            if (array_key_exists('availability_preferences', $validatedData)) $instructorDataToUpdate['availability_preferences'] = $validatedData['availability_preferences'];

            if (!empty($instructorDataToUpdate)) {
                $instructor->update($instructorDataToUpdate);
            }

            DB::commit();
            $instructor->load(['user.role', 'department']); // إعادة تحميل العلاقات
            return response()->json([
                'success' => true,
                'data' => $instructor,
                'message' => 'Instructor and user account updated successfully.'
            ], 200);
        } catch (Exception $e) {
            DB::rollBack();
            Log::error('API Instructor & User Update Failed for Instructor ID ' . $instructor->id . ': ' . $e->getMessage());
            return response()->json(['success' => false, 'message' => 'Failed to update instructor: ' . $e->getMessage()], 500);
        }
    }

    /**
     * Remove the specified instructor and their associated user account (API).
     */
    public function apiDestroy(Instructor $instructor)
    {
        // (اختياري) التحقق من الارتباطات قبل الحذف
        // if ($instructor->sections()->exists() || $instructor->scheduleEntries()->exists()) {
        //     return response()->json(['success' => false, 'message' => 'Cannot delete: Instructor has assignments.'], 409);
        // }

        DB::beginTransaction();
        try {
            $user = $instructor->user;
            $instructor->delete(); // حذف المدرس
            if ($user) {
                // (اختياري) التحقق من الأدوار الأخرى للمستخدم قبل حذفه
                $user->delete(); // حذف المستخدم
            }
            DB::commit();
            return response()->json(['success' => true, 'message' => 'Instructor and associated user deleted successfully.'], 200);
        } catch (Exception $e) {
            DB::rollBack();
            Log::error('API Instructor & User Deletion Failed for Instructor ID ' . $instructor->id . ': ' . $e->getMessage());
            return response()->json(['success' => false, 'message' => 'Failed to delete instructor: ' . $e->getMessage()], 500);
        }
    }

    /**
     * API: Handle the import of instructors from an Excel file.
     */
    public function apiImportExcel(Request $request)
    {
        // 1. التحقق من وجود الملف وصيغته (باستخدام Validator لـ API)
        $validator = Validator::make($request->all(), [
            'instructor_excel_file' => 'required|file|mimes:xlsx,xls,csv|max:5120',
        ]);

        if ($validator->fails()) {
            return response()->json([
                'success' => false,
                'message' => 'Validation failed for uploaded file.',
                'errors' => $validator->errors()
            ], 422); // Unprocessable Entity
        }

        $this->resetCounters(); // إعادة تعيين العدادات لكل عملية رفع

        try {
            $rows = Excel::toArray(new \stdClass(), $request->file('instructor_excel_file'))[0];

            if (count($rows) <= 1) { // إذا كان الملف فارغاً أو يحتوي على العناوين فقط
                return response()->json(['success' => false, 'message' => 'Uploaded Excel file is empty or contains only a header row.'], 400);
            }

            $header = array_map('strtolower', array_map('trim', array_shift($rows)));
            $instructorNoCol = $this->getColumnIndex($header, ['instructor_no', 'instructorno', 'رقم المدرس', 'الرقم الوظيفي']);
            $instructorNameCol = $this->getColumnIndex($header, ['instructor_name', 'instructorname', 'اسم المدرس', 'الاسم']);
            $departmentCol = $this->getColumnIndex($header, ['department_id', 'departmentid', 'department', 'القسم']);
            $emailCol = $this->getColumnIndex($header, ['email', 'البريد الالكتروني', 'الايميل']);
            $degreeCol = $this->getColumnIndex($header, ['academic_degree', 'academicdegree', 'degree', 'الدرجة العلمية']);
            $maxHoursCol = $this->getColumnIndex($header, ['max_weekly_hours', 'maxweeklyhours', 'ساعات النصاب']);

            if (is_null($instructorNoCol) || is_null($instructorNameCol) || is_null($departmentCol)) {
                $missing = []; /* ... (نفس منطق تحديد الأعمدة المفقودة) ... */
                if(is_null($instructorNoCol)) $missing[] = "'instructor_no'";
                if(is_null($instructorNameCol)) $missing[] = "'instructor_name'";
                if(is_null($departmentCol)) $missing[] = "'department_id' or 'department_name'";
                return response()->json(['success' => false, 'message' => 'Excel file is missing required columns: ' . implode(', ', $missing)], 400);
            }

            $currentRowNumber = 1;
            // لا نحتاج Transaction هنا لكل صف، يمكن عمل Transaction كبير حول الحلقة كلها إذا أردت
            // ولكن إذا فشل صف واحد، قد ترغب في تجاهله فقط ومتابعة الباقي

            foreach ($rows as $row) {
                $currentRowNumber++;
                $rowData = []; foreach ($header as $index => $colName) { $rowData[$colName] = $row[$index] ?? null; }

                if (count(array_filter($row)) == 0) { $this->skippedDetails[] = "Row {$currentRowNumber}: Skipped (empty)."; $this->skippedCount++; continue; }

                $instructorNo = trim($rowData[$header[$instructorNoCol]] ?? null);
                if (empty($instructorNo)) { $this->skippedDetails[] = "Row {$currentRowNumber}: Skipped (missing instructor_no)."; $this->skippedCount++; continue; }

                if (in_array($instructorNo, $this->processedInstructorNos)) { $this->skippedDetails[] = "Row {$currentRowNumber}: Skipped (duplicate instructor_no '{$instructorNo}' within file)."; $this->skippedCount++; continue; }
                $this->processedInstructorNos[] = $instructorNo;

                $instructorNameInput = trim($rowData[$header[$instructorNameCol]] ?? null);
                $departmentIdentifier = trim($rowData[$header[$departmentCol]] ?? null);
                $emailInput = isset($emailCol) ? trim($rowData[$header[$emailCol]] ?? null) : null;
                $degreeInputFromFile = isset($degreeCol) ? trim($rowData[$header[$degreeCol]] ?? null) : null;
                $maxHoursInput = isset($maxHoursCol) ? trim($rowData[$header[$maxHoursCol]] ?? null) : null;

                if (empty($instructorNameInput) || empty($departmentIdentifier)) { $this->skippedDetails[] = "Row {$currentRowNumber} (EmpNo:{$instructorNo}): Skipped (missing name or department)."; $this->skippedCount++; continue; }

                $name = $instructorNameInput; $degreeFromName = null;
                if (preg_match('/\(.+\)/u', $instructorNameInput, $matches)) { $degreeFromName = trim($matches[0], '()'); $name = trim(str_replace($matches[0], '', $instructorNameInput)); }
                $academicDegree = $degreeFromName ?: $degreeInputFromFile;

                $department = $this->findDepartment($departmentIdentifier);
                if (!$department) { $this->skippedDetails[] = "Row {$currentRowNumber} (EmpNo:{$instructorNo}): Skipped (Department '{$departmentIdentifier}' not found)."; $this->skippedCount++; continue; }

                $email = $emailInput;
                if (empty($email)) { $baseEmailName = 'momen' . preg_replace('/[^A-Za-z0-9]/', '', $instructorNo); $email = $this->generateUniqueEmail($baseEmailName, '@ptc.edu', $instructorNo); }
                else { $emailValidator = Validator::make(['email' => $email], ['email' => 'email']); if ($emailValidator->fails()) { $this->skippedDetails[] = "Row {$currentRowNumber} (EmpNo:{$instructorNo}): Skipped (Invalid email '{$email}')."; $this->skippedCount++; continue; } }

                // --- التحديث أو الإنشاء (داخل Transaction لكل مدرس لضمان سلامة User و Instructor معاً) ---
                DB::transaction(function () use ($instructorNo, $name, $email, $academicDegree, $department, $maxHoursInput, $currentRowNumber) {
                    $instructor = Instructor::where('instructor_no', $instructorNo)->first();
                    $defaultRoleName = 'instructor'; // الدور الافتراضي للمدرس الجديد

                    if ($instructor) { // تحديث
                        $user = $instructor->user;
                        if (!$user) {
                            Log::warning("Instructor ID {$instructor->id} (EmpNo: {$instructorNo}) exists without a user. Creating user for update.");
                            $user = $this->createUserForInstructor($name, $email, $defaultRoleName);
                            $instructor->user_id = $user->id; // ربط المستخدم الجديد
                        } else {
                            if (User::where('email', $email)->where('id', '!=', $user->id)->exists()) {
                                $this->skippedDetails[] = "Row {$currentRowNumber} (EmpNo:{$instructorNo}): Update Skipped (Email '{$email}' already taken).";
                                $this->skippedCount++;
                                DB::rollBack(); // التراجع عن أي تغييرات محتملة في هذا الـ transaction
                                return; // الخروج من الـ closure الخاص بالـ transaction
                            }
                            $user->name = $name;
                            $user->email = $email;
                            // لا نغير كلمة المرور أو الدور عند التحديث من الإكسل عادةً إلا إذا كان هناك عمود مخصص
                            $user->save();
                        }
                        $instructor->instructor_name = $name;
                        $instructor->academic_degree = $academicDegree;
                        $instructor->department_id = $department->id;
                        if (!is_null($maxHoursInput) && is_numeric($maxHoursInput)) $instructor->max_weekly_hours = (int)$maxHoursInput;
                        $instructor->save();
                        $this->updatedCount++;
                    } else { // إنشاء جديد
                        if (User::where('email', $email)->exists()) {
                            $this->skippedDetails[] = "Row {$currentRowNumber} (EmpNo:{$instructorNo}): Create Skipped (Email '{$email}' already exists for new user).";
                            $this->skippedCount++;
                            DB::rollBack(); return;
                        }
                        $user = $this->createUserForInstructor($name, $email, $defaultRoleName);
                        Instructor::create([
                            'user_id' => $user->id, 'instructor_no' => $instructorNo, 'instructor_name' => $name,
                            'academic_degree' => $academicDegree, 'department_id' => $department->id,
                            'max_weekly_hours' => (!is_null($maxHoursInput) && is_numeric($maxHoursInput)) ? (int)$maxHoursInput : null,
                        ]);
                        $this->createdCount++;
                    }
                }); // نهاية الـ Transaction لكل مدرس
                // -----------------------------------------------------------------------------------

            } // نهاية حلقة الصفوف

            $summary = [];
            if ($this->createdCount > 0) $summary['new_instructors_created'] = $this->createdCount;
            if ($this->updatedCount > 0) $summary['existing_instructors_updated'] = $this->updatedCount;
            if ($this->skippedCount > 0) $summary['rows_skipped'] = $this->skippedCount;

            if (empty($summary) && empty(array_filter($this->skippedDetails))) {
                 return response()->json(['success' => true, 'message' => 'Excel file processed. No new data imported or all data already matched/skipped.', 'summary' => $summary, 'skipped_details' => $this->skippedDetails], 200);
            }

            return response()->json([
                'success' => true,
                'message' => "Instructors import processed.",
                'summary' => $summary,
                'skipped_details' => $this->skippedDetails
            ], 200);

        } catch (Exception $e) {
            Log::error('API Instructors Excel Import Failed: ' . $e->getMessage() . ' at ' . $e->getFile() . ':' . $e->getLine());
            // إرجاع أي تفاصيل تم تجميعها حتى الآن
            return response()->json([
                'success' => false,
                'message' => 'An error occurred during Excel import: ' . $e->getMessage(),
                'skipped_details' => $this->skippedDetails
            ], 500);
        }
    }
} 
---------------------------------------------------------------------------------------------------------
app\Http\Controllers\DataEntry\InstructorSectionController.php
<?php

namespace App\Http\Controllers\DataEntry;

use Exception;
use App\Models\Section;
use App\Models\Subject;
use App\Models\Instructor;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Log;
use App\Http\Controllers\Controller;

class InstructorSectionController extends Controller
{
    // =============================================
    //            Web Controller Methods
    // =============================================
    /**
     * Display a listing of the resource.
     */
    public function index()
    {
        try {
            // جلب المدرسين مع القسم وعدد المواد المعينة (لتجنب تحميل كل المواد)
            $instructors = Instructor::with(['user:id,name', 'department:id,department_name'])
                ->withCount('sections') // إضافة عمود subjects_count
                ->latest()
                ->paginate(10); // Pagination للصفحة الرئيسية

            return view('dashboard.data-entry.instructor-section', compact('instructors')); // View جديد للعرض
        } catch (Exception $e) {
            Log::error('Error fetching instructor-section index: ' . $e->getMessage());
            return redirect()->back()->with('error', 'Could not load instructor assignments.');
        }
    }

    /**
     * Show the form for editing the assigned subjects for a specific instructor.
     */

    public function editAssignments(Instructor $instructor) // Route Model Binding للمدرس
    {
        try {
            // جلب كل المواد مع شعبها (مع تحميل العلاقات اللازمة للشعبة)
            $allSubjectsWithSections = Subject::with([
                'subjectCategory:id,subject_category_name', // فئة المادة
                // جلب شعب المادة مع تحميل مدرسينها
                'planSubjectEntries.sections.instructors:id,instructor_name' // لمعرفة إذا كانت الشعبة مأخوذة
            ])
                ->orderBy('subject_no')
                ->get();

            // جلب IDs الشعب المعينة لهذا المدرس المحدد
            $assignedSectionIds = $instructor->sections()->pluck('sections.id')->toArray();

            return view('dashboard.data-entry.instructor-section-edit', compact(
                'instructor',
                'allSubjectsWithSections',
                'assignedSectionIds'
            ));
        } catch (Exception $e) {
            Log::error('Error loading edit assignments view for instructor ID ' . $instructor->id . ': ' . $e->getMessage());
            return redirect()->route('data-entry.instructor-section.index')->with('error', 'Could not load assignment editing page.');
        }
    }


    /**
     * Update the sections assigned to the specified instructor.
     */
    public function syncAssignments(Request $request, Instructor $instructor)
    {
        // 1. Validation (فقط section_ids)
        $validatedData = $request->validate([
            'section_ids' => 'nullable|array', // قد تكون فارغة إذا أردنا إزالة كل التعيينات
            'section_ids.*' => 'integer|exists:sections,id',
        ]);

        try {
            // 2. استخدام sync() لتحديث الارتباطات في جدول instructor_section
            $instructor->sections()->sync($validatedData['section_ids'] ?? []);

            // 3. Redirect إلى صفحة العرض الرئيسية مع رسالة نجاح
            return redirect()->route('data-entry.instructor-section.index')
                ->with('success', 'Section assignments updated successfully for ' . ($instructor->instructor_name ?? optional($instructor->user)->name));
        } catch (Exception $e) {
            Log::error('Error syncing sections for instructor ID ' . $instructor->id . ': ' . $e->getMessage());
            // العودة لصفحة التعديل نفسها مع رسالة خطأ
            return redirect()->route('data-entry.instructor-section.edit', $instructor->id)
                ->with('error', 'Failed to update section assignments.');
        }
    }
    // =============================================
    //             API Controller Methods
    // =============================================

    /**
     * Display a listing of instructors with their assigned subject count (API).
     */
    public function apiIndex(Request $request) // إضافة Request للـ pagination المستقبلي
    {
        try {
            $query = Instructor::with(['user:id,name', 'department:id,department_name'])
                ->withCount('subjects'); // حساب عدد المواد

            // (اختياري) فلترة بسيطة
            if ($request->has('department_id')) {
                $query->where('department_id', $request->department_id);
            }

            // --- جلب كل النتائج (بدون pagination حالياً) ---
            $instructors = $query->latest('id')->get();

            // --- كود الـ Pagination (معطل) ---
            /*
            $perPage = $request->query('per_page', 20);
            $instructorsPaginated = $query->latest('id')->paginate($perPage);
            return response()->json([
                'success' => true,
                'data' => $instructorsPaginated->items(),
                'pagination' => [ 'total' => $instructorsPaginated->total(), ... ]
            ], 200);
            */

            return response()->json(['success' => true, 'data' => $instructors], 200);
        } catch (Exception $e) {
            Log::error('API Error fetching instructor assignments index: ' . $e->getMessage());
            return response()->json(['success' => false, 'message' => 'Server Error'], 500);
        }
    }

 public function apiShowAssignments(Instructor $instructor) // Route Model Binding للمدرس
    {
        try {
            // جلب IDs الشعب المعينة لهذا المدرس المحدد
            $assignedSectionIdsForCurrentInstructor = $instructor->sections()->pluck('sections.id')->toArray();

            // جلب كل المواد مع شعبها، مع تحديد حالة كل شعبة
            $allSubjectsWithSections = Subject::with([
                'subjectCategory:id,subject_category_name',
                // جلب كل شعب المادة، مع تحميل المدرسين المعينين لكل شعبة
                'planSubjectEntries.sections' => function ($query) {
                    $query->with('instructors:instructors.id,instructors.instructor_name,instructors.user_id') // جلب معلومات المدرس المعين
                        ->select('sections.*'); // تأكد من جلب كل أعمدة sections
                },
                // تحميل علاقة user للمدرسين المعينين للشعبة (إذا أردت اسم اليوزر)
                'planSubjectEntries.sections.instructors.user:id,name'
            ])
                ->orderBy('subject_no')
                ->get();

            // معالجة البيانات لإضافة حالة التعيين لكل شعبة
            $subjectsFormatted = $allSubjectsWithSections->map(function ($subject) use ($assignedSectionIdsForCurrentInstructor, $instructor) {
                $processedSections = collect();
                $allSectionsTakenByOthersForThisSubject = true;

                if ($subject->planSubjectEntries->isNotEmpty()) {
                    foreach ($subject->planSubjectEntries as $planSubEntry) {
                        foreach ($planSubEntry->sections as $section) {
                            $isAssignedToCurrent = in_array($section->id, $assignedSectionIdsForCurrentInstructor);
                            $assignedToOtherInstructor = false;
                            $otherInstructorName = null;

                            if (!$section->instructors->isEmpty()) { // إذا كانت الشعبة معينة
                                if (!$isAssignedToCurrent) { // ولم تكن معينة للمدرس الحالي
                                    $assignedToOtherInstructor = true;
                                    $firstOtherInstructor = $section->instructors->first(fn($instr) => $instr->id !== $instructor->id);
                                    if ($firstOtherInstructor) {
                                        $otherInstructorName = $firstOtherInstructor->instructor_name ?? optional($firstOtherInstructor->user)->name;
                                    }
                                }
                            }

                            // اعرض الشعبة فقط إذا كانت متاحة أو معينة للمدرس الحالي
                            if (!$assignedToOtherInstructor || $isAssignedToCurrent) {
                                $allSectionsTakenByOthersForThisSubject = false; // على الأقل شعبة واحدة يمكن التفاعل معها
                            }

                            // إضافة معلومات مفيدة للـ API
                            $processedSections->push([
                                'id' => $section->id,
                                'section_number' => $section->section_number,
                                'activity_type' => $section->activity_type,
                                'student_count' => $section->student_count,
                                'academic_year' => $section->academic_year,
                                'semester' => $section->semester,
                                'branch' => $section->branch,
                                'is_assigned_to_current_instructor' => $isAssignedToCurrent,
                                'is_assigned_to_other_instructor' => $assignedToOtherInstructor,
                                'other_instructor_name' => $otherInstructorName,
                            ]);
                        }
                    }
                }

                // لا ترجع المادة إذا كانت كل شعبها مأخوذة من قبل مدرسين آخرين
                if ($allSectionsTakenByOthersForThisSubject && !$processedSections->contains('is_assigned_to_current_instructor', true) && $processedSections->isNotEmpty()) {
                    return null; // أو يمكنك إرجاع المادة مع مصفوفة شعب فارغة إذا أردت إظهارها
                }


                return [
                    'id' => $subject->id,
                    'subject_no' => $subject->subject_no,
                    'subject_name' => $subject->subject_name,
                    'subject_category' => optional($subject->subjectCategory)->subject_category_name,
                    'sections' => $processedSections->sortBy(['activity_type', 'section_number'])->values(), // values() لإعادة الفهرسة
                ];
            })->filter()->values(); // filter() لإزالة المواد التي أرجعت null, ثم values() لإعادة الفهرسة

            return response()->json([
                'success' => true,
                'data' => [
                    'instructor' => [ // بيانات المدرس الحالي
                        'id' => $instructor->id,
                        'name' => $instructor->instructor_name ?? optional($instructor->user)->name,
                        'instructor_no' => $instructor->instructor_no
                    ],
                    'assignable_subjects' => $subjectsFormatted // قائمة المواد مع شعبها وحالة التعيين
                ]
            ], 200);
        } catch (Exception $e) {
            Log::error("API Error fetching assignments for instructor ID {$instructor->id}: " . $e->getMessage());
            return response()->json(['success' => false, 'message' => 'Server Error: ' . $e->getMessage()], 500);
        }
    }

    /**
     * API: Sync sections for a specific instructor.
     * (نفس دالة apiSyncAssignments السابقة، تعمل على علاقة sections)
     */
    public function apiSyncAssignments(Request $request, Instructor $instructor)
    {
        $validatedData = $request->validate([
            'section_ids' => 'present|array',
            'section_ids.*' => 'integer|exists:sections,id',
        ]);

        try {
            $instructor->sections()->sync($validatedData['section_ids'] ?? []);

            // إرجاع قائمة المواد المعينة المحدثة للمدرس
            $updatedAssignedSections = $instructor->sections()
                ->with(['planSubject.subject:id,subject_no,subject_name']) // جلب معلومات المادة
                ->orderBy('activity_type')->orderBy('section_number')
                ->get(['sections.id', 'plan_subject_id', 'activity_type', 'section_number', 'student_count']); // تحديد حقول الشعبة

            return response()->json([
                'success' => true,
                'message' => 'Section assignments updated successfully.',
                'data' => $updatedAssignedSections
            ], 200);
        } catch (Exception $e) {
            Log::error('API Error syncing sections for instructor ID ' . $instructor->id . ': ' . $e->getMessage());
            return response()->json(['success' => false, 'message' => 'Failed to update assignments.'], 500);
        }
    }

    /**
     * API: Get sections currently assigned to a specific instructor.
     * جلب الشعب المعينة حالياً لمدرس محدد عبر API
     */
    public function apiGetAssignedSections(Instructor $instructor)
    {
        try {
            $assignedSections = $instructor->sections() // استدعاء علاقة sections الجديدة
                ->with([ // تحميل معلومات إضافية لكل شعبة
                    'planSubject.subject:id,subject_no,subject_name',
                    'planSubject.plan:id,plan_no'
                ])
                ->orderBy('academic_year')->orderBy('semester')
                ->orderBy('activity_type')->orderBy('section_number')
                ->get([ // تحديد الحقول المطلوبة من جدول sections وجداول الربط
                    'sections.id',
                    'sections.plan_subject_id',
                    'sections.academic_year',
                    'sections.semester',
                    'sections.activity_type',
                    'sections.section_number',
                    'sections.student_count',
                    'sections.section_gender',
                    'sections.branch'
                ]);

            return response()->json([
                'success' => true,
                'data' => $assignedSections
            ], 200);
        } catch (Exception $e) {
            Log::error("API Error fetching assigned sections for instructor ID {$instructor->id}: " . $e->getMessage());
            return response()->json(['success' => false, 'message' => 'Server Error: ' . $e->getMessage()], 500);
        }
    }

    /**
     * API: Get available sections that can be assigned.
     * جلب الشعب المتاحة (التي لم يتم تعيينها لأي مدرس بعد) عبر API.
     * يمكن فلترتها اختيارياً حسب plan_subject_id, academic_year, semester, branch.
     */
    public function apiGetAvailableSections(Request $request)
    {
        try {
            // جلب كل IDs الشعب التي تم تعيينها بالفعل لأي مدرس
            $assignedSectionIdsGlobally = DB::table('instructor_section')->pluck('section_id')->toArray();

            $query = Section::whereNotIn('id', $assignedSectionIdsGlobally) // استبعاد الشعب المعينة
                ->with([
                    'planSubject.subject:id,subject_no,subject_name',
                    'planSubject.plan:id,plan_no'
                ]);

            // (اختياري) فلاتر إضافية
            if ($request->filled('plan_subject_id')) {
                $query->where('plan_subject_id', $request->plan_subject_id);
            }
            if ($request->filled('academic_year')) {
                $query->where('academic_year', $request->academic_year);
            }
            if ($request->filled('semester')) {
                $query->where('semester', $request->semester);
            }
            if ($request->filled('branch')) {
                $query->where(function ($q) use ($request) {
                    is_null($request->branch) || $request->branch === '' || strtolower($request->branch) === 'none' ?
                        $q->whereNull('branch') :
                        $q->where('branch', $request->branch);
                });
            }
            if ($request->has('activity_type')) {
                $query->where('activity_type', $request->activity_type);
            }


            $availableSections = $query->orderBy('academic_year')->orderBy('semester')
                ->orderBy('activity_type')->orderBy('section_number')
                ->get([
                    'sections.id',
                    'sections.plan_subject_id',
                    'sections.academic_year',
                    'sections.semester',
                    'sections.activity_type',
                    'sections.section_number',
                    'sections.student_count',
                    'sections.section_gender',
                    'sections.branch'
                ]);

            return response()->json([
                'success' => true,
                'data' => $availableSections
            ], 200);
        } catch (Exception $e) {
            Log::error("API Error fetching available sections: " . $e->getMessage());
            return response()->json(['success' => false, 'message' => 'Server Error: ' . $e->getMessage()], 500);
        }
    }

}
---------------------------------------------------------------------------------------------------------
app\Http\Controllers\DataEntry\InstructorSubjectsController.php
<?php

namespace App\Http\Controllers\DataEntry;

use Exception;
use App\Models\Section;
use App\Models\Subject;
use App\Models\Instructor;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Log;
use App\Http\Controllers\Controller;
use Maatwebsite\Excel\Facades\Excel;

class InstructorSubjectsController extends Controller
{
    // =============================================
    //            Web Controller Methods
    // =============================================

    /**
     * Display a listing of instructors and their assigned subjects.
     */
    public function index()
    {
        try {
            // جلب المدرسين مع تحميل العلاقات اللازمة بكفاءة
            $instructors = Instructor::with([
                'user:id,name',
                'department:id,department_name',
                'subjects:subjects.id,subject_no,subject_name' // جلب المواد المعينة مع الحقول الأساسية
            ])
                ->withCount('subjects') // إضافة عمود subjects_count
                ->latest('id')
                ->paginate(15); // استخدام Pagination

            return view('dashboard.data-entry.instructor-subjects', compact('instructors'));
        } catch (Exception $e) {
            Log::error('Error fetching instructor-subject index: ' . $e->getMessage());
            return redirect()->back()->with('error', 'Could not load instructor-subject assignments page.');
        }
    }

    /**
     * Show the form for editing the assigned subjects for a specific instructor.
     */
    public function edit(Instructor $instructor)
    {
        try {
            // تحميل معلومات المدرس الأساسية
            $instructor->load('user:id,name', 'department:id,department_name');

            // جلب كل المواد المتاحة في النظام، مع تحميل قسم كل مادة
            $allSubjects = Subject::with('department:id,department_name')
                ->orderBy('subject_no')
                ->get(['id', 'subject_no', 'subject_name', 'department_id']);

            // جلب IDs المواد المعينة حالياً لهذا المدرس (الطريقة الأكثر أماناً)
            $assignedSubjectIds = $instructor->subjects()->pluck('subjects.id')->toArray();

            return view('dashboard.data-entry.instructor-subject-edit', compact(
                'instructor',
                'allSubjects',
                'assignedSubjectIds'
            ));
        } catch (Exception $e) {
            Log::error('Error loading edit assignments view for instructor ID ' . $instructor->id . ': ' . $e->getMessage() . ' at ' . $e->getFile() . ':' . $e->getLine());
            return redirect()->route('data-entry.instructor-subjects.index')->with('error', 'Could not load the assignment editing page. A server error occurred.');
        }
    }

    /**
     * Update the subjects assigned to the specified instructor.
     */
    public function sync(Request $request, Instructor $instructor)
    {
        $validatedData = $request->validate([
            'subject_ids' => 'nullable|array',
            'subject_ids.*' => 'integer|exists:subjects,id',
        ], [
            'subject_ids.array' => 'The selected subjects must be in a valid format.',
            'subject_ids.*.exists' => 'One or more of the selected subjects do not exist.',
        ]);

        try {
            // استخدام sync() لتحديث الارتباطات في الجدول الوسيط
            $instructor->subjects()->sync($validatedData['subject_ids'] ?? []);

            $instructorName = $instructor->instructor_name ?? optional($instructor->user)->name ?? "ID: {$instructor->id}";
            return redirect()->route('data-entry.instructor-subjects.index')
                ->with('success', 'Subject assignments updated successfully for ' . $instructorName);
        } catch (Exception $e) {
            Log::error('Error syncing subjects for instructor ID ' . $instructor->id . ': ' . $e->getMessage());
            return redirect()->route('data-entry.instructor-subjects.edit', $instructor->id)
                ->with('error', 'Failed to update subject assignments due to a server error.');
        }
    }

    /**
     * Handle the import of instructor-subject assignments from an Excel file.
     */
    public function importExcel(Request $request)
    {
        $request->validate([
            'assignments_excel_file' => 'required|file|mimes:xlsx,xls,csv|max:5120',
        ]);

        // تعريف العدادات
        $createdCount = 0;
        $alreadyExistedCount = 0;
        $skippedDetails = [];
        $processedInstructors = []; // لتجنب معالجة نفس المدرس مرتين

        try {
            $rows = Excel::toArray(new \stdClass(), $request->file('assignments_excel_file'))[0];
            if (count($rows) <= 1) {
                return redirect()->back()->with('error', 'The uploaded Excel file is empty or contains only a header row.');
            }

            $header = array_map('strtolower', array_map('trim', array_shift($rows)));
            $instructorCol = $this->getColumnIndex($header, ['instructor_name', 'instructor_id', 'instructorid']);
            $subjectCol = $this->getColumnIndex($header, ['subject_no', 'subject_id', 'subjectid', 'subjectname', 'subject_name']);

            if (is_null($instructorCol) || is_null($subjectCol)) {
                return redirect()->back()->with('error', 'Excel file is missing required columns: instructor identifier and subject identifier.');
            }

            $currentRowNumber = 1;

            DB::beginTransaction(); // بدء Transaction

            foreach ($rows as $row) {
                $currentRowNumber++;
                if (count(array_filter($row)) == 0) {
                    continue;
                } // تجاهل الصفوف الفارغة

                $instructorIdentifier = trim($row[$instructorCol] ?? null);
                $subjectsString = trim($row[$subjectCol] ?? null);

                if (empty($instructorIdentifier) || empty($subjectsString)) {
                    $skippedDetails[] = "Row {$currentRowNumber}: Skipped (missing instructor or subject information).";
                    continue;
                }

                // 1. إيجاد المدرس
                $instructor = $this->findInstructor($instructorIdentifier);
                if (!$instructor) {
                    $skippedDetails[] = "Row {$currentRowNumber}: Skipped (Instructor '{$instructorIdentifier}' not found).";
                    continue;
                }

                // تجاهل إذا تم معالجة المدرس من قبل في نفس الملف
                if (in_array($instructor->id, $processedInstructors)) {
                    $skippedDetails[] = "Row {$currentRowNumber}: Skipped (Instructor '{$instructor->instructor_name}' is duplicated in the file, only first entry is processed).";
                    continue;
                }
                $processedInstructors[] = $instructor->id;


                // 2. معالجة المواد
                $subjectIdentifiers = array_map('trim', explode(',', $subjectsString)); // تقسيم المواد
                $subjectIdsToAssign = [];

                foreach ($subjectIdentifiers as $subjectIdentifier) {
                    if (empty($subjectIdentifier)) continue;

                    $subject = $this->findSubject($subjectIdentifier);
                    if ($subject) {
                        $subjectIdsToAssign[] = $subject->id;
                    } else {
                        $skippedDetails[] = "Row {$currentRowNumber}: Subject '{$subjectIdentifier}' for instructor '{$instructor->instructor_name}' not found and was skipped.";
                    }
                }

                // 3. تحديث التعيينات (إضافة الجديد فقط)
                if (!empty($subjectIdsToAssign)) {
                    // جلب IDs المواد المعينة حالياً للمدرس
                    $currentlyAssignedIds = $instructor->subjects()->pluck('subjects.id')->toArray();

                    // حساب IDs المواد الجديدة فقط التي سيتم إضافتها
                    $newIdsToAdd = array_diff($subjectIdsToAssign, $currentlyAssignedIds);

                    if (!empty($newIdsToAdd)) {
                        // استخدام attach() لإضافة الجديد فقط دون التأثير على القديم
                        $instructor->subjects()->attach($newIdsToAdd);
                        $createdCount += count($newIdsToAdd);
                    }

                    // حساب عدد المواد التي كانت موجودة بالفعل
                    $alreadyExistedCount += count(array_intersect($subjectIdsToAssign, $currentlyAssignedIds));
                }
            }

            DB::commit(); // تأكيد كل التغييرات إذا لم تحدث أخطاء

            // بناء رسالة النجاح
            $messages = [];
            if ($createdCount > 0) $messages[] = "{$createdCount} new assignments were added.";
            if ($alreadyExistedCount > 0) $messages[] = "{$alreadyExistedCount} assignments already existed and were unchanged.";
            if (!empty($skippedDetails)) $messages[] = count($skippedDetails) . " entries were skipped.";

            if (empty($messages)) {
                return redirect()->route('data-entry.instructor-subjects.index')->with('info', 'Excel file processed. No changes were made.');
            } else {
                return redirect()->route('data-entry.instructor-subjects.index')
                    ->with('success', implode(' ', $messages))
                    ->with('skipped_details', $skippedDetails);
            }
        } catch (Exception $e) {
            DB::rollBack(); // التراجع عن أي تغييرات في حال حدوث خطأ
            Log::error('Instructor-Subject Excel Import Failed: ' . $e->getMessage());
            return redirect()->route('data-entry.instructor-subjects.index')
                ->with('error', 'An error occurred during Excel import: ' . $e->getMessage());
        }
    }

    private function getColumnIndex(array $header, array $possibleNames): ?int
    {
        // تنظيف وتوحيد الأسماء المحتملة (حروف صغيرة وبدون فراغات)
        $normalizedPossibleNames = array_map(fn($name) => strtolower(str_replace([' ', '_'], '', $name)), $possibleNames);

        // تنظيف العناوين الفعلية من الملف
        $normalizedHeader = array_map(fn($h) => strtolower(str_replace([' ', '_'], '', $h)), $header);

        foreach ($normalizedPossibleNames as $name) {
            $index = array_search($name, $normalizedHeader);
            if ($index !== false) {
                return $index; // وجدنا تطابقاً، أرجع الفهرس
            }
        }

        return null; // لم يتم العثور على أي اسم مطابق
    }

    private function findInstructor($identifier)
    {
        if (is_numeric($identifier)) {
            return Instructor::find($identifier);
        }
        // البحث بالاسم (في instructor_name أو user->name)
        return Instructor::where('instructor_name', 'like', "%{$identifier}%")
            ->orWhereHas('user', fn($q) => $q->where('name', 'like', "%{$identifier}%"))
            ->first();
    }

    private function findSubject($identifier)
    {
        // إذا كان المعرّف فارغاً، لا تبحث
        if (empty($identifier)) {
            return null;
        }

        // 1. البحث بالـ ID إذا كان المعرّف رقمياً
        if (is_numeric($identifier)) {
            $subject = Subject::find($identifier);
            if ($subject) {
                return $subject;
            }
        }

        // 2. البحث برقم المادة (subject_no) - تجاهل حالة الأحرف والفراغات
        $normalizedIdentifier = strtolower(trim($identifier));
        $subject = Subject::whereRaw('LOWER(REPLACE(subject_no, " ", "")) = ?', [$normalizedIdentifier])->first();
        if ($subject) {
            return $subject;
        }

        // 3. البحث باسم المادة (subject_name) - تجاهل حالة الأحرف، الفراغات، والهمزات
        $normalizedArabicIdentifier = $this->normalizeArabicString($identifier);
        // البحث بتطابق شبه تام (بعد إزالة الفراغات)
        $subject = Subject::whereRaw('REPLACE(LOWER(subject_name), " ", "") = ?', [$normalizedArabicIdentifier])->first();
        if ($subject) {
            return $subject;
        }
        // إذا فشل، جرب بحثاً أوسع قليلاً (قد يكون أقل دقة إذا كانت الأسماء متشابهة)
        return Subject::whereRaw('LOWER(subject_name) LIKE ?', ["%{$normalizedArabicIdentifier}%"])->first();
    }

    /**

     **3. `normalizeArabicString($string)`**

     *   **وظيفتها:** تأخذ نصاً (غالباً باللغة العربية) وتقوم بتنظيفه لتوحيد صيغته قبل مقارنته مع ما هو موجود في قاعدة البيانات. تزيل الفراغات الزائدة وتوحد أشكال الهمزة.

     * Helper function to normalize a string for comparison.
     * It converts to lowercase, trims whitespace, and normalizes Arabic Alif variants.
     *
     * @param string $string The input string.
     * @return string The normalized string.
     */

    private function normalizeArabicString($string): string
    {
        // 1. إزالة الفراغات من البداية والنهاية وتحويل لحروف صغيرة
        $string = strtolower(trim($string));

        // 2. توحيد أشكال حرف الألف (أ, إ, آ) إلى ألف بدون همزة (ا)
        // هذا يجعل البحث عن "اساسيات" يجد "أساسيات" والعكس
        $string = str_replace(['أ', 'إ', 'آ'], 'ا', $string);

        // 3. (اختياري) توحيد الياء والتاء المربوطة
        // $string = str_replace(['ى'], 'ي', $string); // ياء مقصورة إلى ياء عادية
        // $string = str_replace(['ة'], 'ه', $string); // تاء مربوطة إلى هاء

        // 4. إزالة الفراغات المتعددة بين الكلمات واستبدالها بفراغ واحد
        $string = preg_replace('/\s+/u', ' ', $string);

        return $string;
    }

  // =============================================
    //             API Controller Methods
    // =============================================

    /**
     * Display a listing of instructors with their assigned subject count (API).
     */
    public function apiIndex(Request $request) // إضافة Request للـ pagination المستقبلي
    {
        try {
            $query = Instructor::with(['user:id,name', 'department:id,department_name'])
                ->withCount('subjects'); // حساب عدد المواد

            // (اختياري) فلترة بسيطة
            if ($request->has('department_id')) {
                $query->where('department_id', $request->department_id);
            }

            // --- جلب كل النتائج (بدون pagination حالياً) ---
            $instructors = $query->latest('id')->get();

            // --- كود الـ Pagination (معطل) ---
            /*
            $perPage = $request->query('per_page', 20);
            $instructorsPaginated = $query->latest('id')->paginate($perPage);
            return response()->json([
                'success' => true,
                'data' => $instructorsPaginated->items(),
                'pagination' => [ 'total' => $instructorsPaginated->total(), ... ]
            ], 200);
            */

            return response()->json(['success' => true, 'data' => $instructors], 200);
        } catch (Exception $e) {
            Log::error('API Error fetching instructor assignments index: ' . $e->getMessage());
            return response()->json(['success' => false, 'message' => 'Server Error'], 500);
        }
    }

  public function apiShowAssignments(Instructor $instructor) // Route Model Binding للمدرس
    {
        try {
            // جلب IDs الشعب المعينة لهذا المدرس المحدد
            $assignedSectionIdsForCurrentInstructor = $instructor->sections()->pluck('sections.id')->toArray();

            // جلب كل المواد مع شعبها، مع تحديد حالة كل شعبة
            $allSubjectsWithSections = Subject::with([
                'subjectCategory:id,subject_category_name',
                // جلب كل شعب المادة، مع تحميل المدرسين المعينين لكل شعبة
                'planSubjectEntries.sections' => function ($query) {
                    $query->with('instructors:instructors.id,instructors.instructor_name,instructors.user_id') // جلب معلومات المدرس المعين
                        ->select('sections.*'); // تأكد من جلب كل أعمدة sections
                },
                // تحميل علاقة user للمدرسين المعينين للشعبة (إذا أردت اسم اليوزر)
                'planSubjectEntries.sections.instructors.user:id,name'
            ])
                ->orderBy('subject_no')
                ->get();

            // معالجة البيانات لإضافة حالة التعيين لكل شعبة
            $subjectsFormatted = $allSubjectsWithSections->map(function ($subject) use ($assignedSectionIdsForCurrentInstructor, $instructor) {
                $processedSections = collect();
                $allSectionsTakenByOthersForThisSubject = true;

                if ($subject->planSubjectEntries->isNotEmpty()) {
                    foreach ($subject->planSubjectEntries as $planSubEntry) {
                        foreach ($planSubEntry->sections as $section) {
                            $isAssignedToCurrent = in_array($section->id, $assignedSectionIdsForCurrentInstructor);
                            $assignedToOtherInstructor = false;
                            $otherInstructorName = null;

                            if (!$section->instructors->isEmpty()) { // إذا كانت الشعبة معينة
                                if (!$isAssignedToCurrent) { // ولم تكن معينة للمدرس الحالي
                                    $assignedToOtherInstructor = true;
                                    $firstOtherInstructor = $section->instructors->first(fn($instr) => $instr->id !== $instructor->id);
                                    if ($firstOtherInstructor) {
                                        $otherInstructorName = $firstOtherInstructor->instructor_name ?? optional($firstOtherInstructor->user)->name;
                                    }
                                }
                            }

                            // اعرض الشعبة فقط إذا كانت متاحة أو معينة للمدرس الحالي
                            if (!$assignedToOtherInstructor || $isAssignedToCurrent) {
                                $allSectionsTakenByOthersForThisSubject = false; // على الأقل شعبة واحدة يمكن التفاعل معها
                            }

                            // إضافة معلومات مفيدة للـ API
                            $processedSections->push([
                                'id' => $section->id,
                                'section_number' => $section->section_number,
                                'activity_type' => $section->activity_type,
                                'student_count' => $section->student_count,
                                'academic_year' => $section->academic_year,
                                'semester' => $section->semester,
                                'branch' => $section->branch,
                                'is_assigned_to_current_instructor' => $isAssignedToCurrent,
                                'is_assigned_to_other_instructor' => $assignedToOtherInstructor,
                                'other_instructor_name' => $otherInstructorName,
                            ]);
                        }
                    }
                }

                // لا ترجع المادة إذا كانت كل شعبها مأخوذة من قبل مدرسين آخرين
                if ($allSectionsTakenByOthersForThisSubject && !$processedSections->contains('is_assigned_to_current_instructor', true) && $processedSections->isNotEmpty()) {
                    return null; // أو يمكنك إرجاع المادة مع مصفوفة شعب فارغة إذا أردت إظهارها
                }


                return [
                    'id' => $subject->id,
                    'subject_no' => $subject->subject_no,
                    'subject_name' => $subject->subject_name,
                    'subject_category' => optional($subject->subjectCategory)->subject_category_name,
                    'sections' => $processedSections->sortBy(['activity_type', 'section_number'])->values(), // values() لإعادة الفهرسة
                ];
            })->filter()->values(); // filter() لإزالة المواد التي أرجعت null, ثم values() لإعادة الفهرسة

            return response()->json([
                'success' => true,
                'data' => [
                    'instructor' => [ // بيانات المدرس الحالي
                        'id' => $instructor->id,
                        'name' => $instructor->instructor_name ?? optional($instructor->user)->name,
                        'instructor_no' => $instructor->instructor_no
                    ],
                    'assignable_subjects' => $subjectsFormatted // قائمة المواد مع شعبها وحالة التعيين
                ]
            ], 200);
        } catch (Exception $e) {
            Log::error("API Error fetching assignments for instructor ID {$instructor->id}: " . $e->getMessage());
            return response()->json(['success' => false, 'message' => 'Server Error: ' . $e->getMessage()], 500);
        }
    }

    /**
     * API: Sync sections for a specific instructor.
     * (نفس دالة apiSyncAssignments السابقة، تعمل على علاقة sections)
     */
    public function apiSyncAssignments(Request $request, Instructor $instructor)
    {
        $validatedData = $request->validate([
            'section_ids' => 'present|array',
            'section_ids.*' => 'integer|exists:sections,id',
        ]);

        try {
            $instructor->sections()->sync($validatedData['section_ids'] ?? []);

            // إرجاع قائمة المواد المعينة المحدثة للمدرس
            $updatedAssignedSections = $instructor->sections()
                ->with(['planSubject.subject:id,subject_no,subject_name']) // جلب معلومات المادة
                ->orderBy('activity_type')->orderBy('section_number')
                ->get(['sections.id', 'plan_subject_id', 'activity_type', 'section_number', 'student_count']); // تحديد حقول الشعبة

            return response()->json([
                'success' => true,
                'message' => 'Section assignments updated successfully.',
                'data' => $updatedAssignedSections
            ], 200);
        } catch (Exception $e) {
            Log::error('API Error syncing sections for instructor ID ' . $instructor->id . ': ' . $e->getMessage());
            return response()->json(['success' => false, 'message' => 'Failed to update assignments.'], 500);
        }
    }

    /**
     * API: Get sections currently assigned to a specific instructor.
     * جلب الشعب المعينة حالياً لمدرس محدد عبر API
     */
    public function apiGetAssignedSections(Instructor $instructor)
    {
        try {
            $assignedSections = $instructor->sections() // استدعاء علاقة sections الجديدة
                ->with([ // تحميل معلومات إضافية لكل شعبة
                    'planSubject.subject:id,subject_no,subject_name',
                    'planSubject.plan:id,plan_no'
                ])
                ->orderBy('academic_year')->orderBy('semester')
                ->orderBy('activity_type')->orderBy('section_number')
                ->get([ // تحديد الحقول المطلوبة من جدول sections وجداول الربط
                    'sections.id',
                    'sections.plan_subject_id',
                    'sections.academic_year',
                    'sections.semester',
                    'sections.activity_type',
                    'sections.section_number',
                    'sections.student_count',
                    'sections.section_gender',
                    'sections.branch'
                ]);

            return response()->json([
                'success' => true,
                'data' => $assignedSections
            ], 200);
        } catch (Exception $e) {
            Log::error("API Error fetching assigned sections for instructor ID {$instructor->id}: " . $e->getMessage());
            return response()->json(['success' => false, 'message' => 'Server Error: ' . $e->getMessage()], 500);
        }
    }

    /**
     * API: Get available sections that can be assigned.
     * جلب الشعب المتاحة (التي لم يتم تعيينها لأي مدرس بعد) عبر API.
     * يمكن فلترتها اختيارياً حسب plan_subject_id, academic_year, semester, branch.
     */
    public function apiGetAvailableSections(Request $request)
    {
        try {
            // جلب كل IDs الشعب التي تم تعيينها بالفعل لأي مدرس
            $assignedSectionIdsGlobally = DB::table('instructor_section')->pluck('section_id')->toArray();

            $query = Section::whereNotIn('id', $assignedSectionIdsGlobally) // استبعاد الشعب المعينة
                ->with([
                    'planSubject.subject:id,subject_no,subject_name',
                    'planSubject.plan:id,plan_no'
                ]);

            // (اختياري) فلاتر إضافية
            if ($request->filled('plan_subject_id')) {
                $query->where('plan_subject_id', $request->plan_subject_id);
            }
            if ($request->filled('academic_year')) {
                $query->where('academic_year', $request->academic_year);
            }
            if ($request->filled('semester')) {
                $query->where('semester', $request->semester);
            }
            if ($request->filled('branch')) {
                $query->where(function ($q) use ($request) {
                    is_null($request->branch) || $request->branch === '' || strtolower($request->branch) === 'none' ?
                        $q->whereNull('branch') :
                        $q->where('branch', $request->branch);
                });
            }
            if ($request->has('activity_type')) {
                $query->where('activity_type', $request->activity_type);
            }


            $availableSections = $query->orderBy('academic_year')->orderBy('semester')
                ->orderBy('activity_type')->orderBy('section_number')
                ->get([
                    'sections.id',
                    'sections.plan_subject_id',
                    'sections.academic_year',
                    'sections.semester',
                    'sections.activity_type',
                    'sections.section_number',
                    'sections.student_count',
                    'sections.section_gender',
                    'sections.branch'
                ]);

            return response()->json([
                'success' => true,
                'data' => $availableSections
            ], 200);
        } catch (Exception $e) {
            Log::error("API Error fetching available sections: " . $e->getMessage());
            return response()->json(['success' => false, 'message' => 'Server Error: ' . $e->getMessage()], 500);
        }
    }

}
---------------------------------------------------------------------------------------------------------
app\Http\Controllers\DataEntry\MutationTypeController.php
<?php

namespace App\Http\Controllers\DataEntry;

use App\Http\Controllers\Controller;
use App\Models\MutationType;
use Illuminate\Http\Request;
use Exception;
use Illuminate\Validation\Rule;
use Illuminate\Support\Facades\Log;

class MutationTypeController extends Controller
{
    /**
     * Display a listing of the resource.
     */
    public function index()
    {
        try {
            $mutationTypes = MutationType::latest('mutation_id')->paginate(15);
            return view('dashboard.algorithm.mutation_types', compact('mutationTypes'));
        } catch (Exception $e) {
            Log::error("Error fetching mutation Types: " . $e->getMessage());
            return redirect()->back()->with('error', 'Could not load mutation Methods page.');
        }
    }

    /**
     * Show the form for creating a new resource.
     */
    public function create()
    {
        //
    }

    /**
     * Store a newly created resource in storage.
     */
    public function store(Request $request)
    {
        $validatedData = $request->validate([
            'name' => 'required|string|max:100|unique:mutation_types,name',
            'slug' => 'required|string|max:255|unique:mutation_types,slug|alpha_dash',
            'description' => 'nullable|string|max:500',
            'is_active' => 'sometimes|boolean',
        ]);

        try {
            $dataToCreate = $validatedData;
            $dataToCreate['is_active'] = $request->has('is_active');
            MutationType::create($dataToCreate);
            return redirect()->route('algorithm-control.mutation-types.index')->with('success', 'mutation method created successfully.');
        } catch (Exception $e) {
            Log::error("mutation Type Creation Failed: " . $e->getMessage());
            return redirect()->back()->with('error', 'Failed to create mutation method.')->withInput();
        }
    }

    /**
     * Display the specified resource.
     */
    public function show(string $id)
    {
        //
    }

    /**
     * Show the form for editing the specified resource.
     */
    public function edit(string $id)
    {
        //
    }

    /**
     * Update the specified resource in storage.
     */
    public function update(Request $request, MutationType $mutationType)
    {
        $errorBagName = 'editMutationModal_' . $mutationType->mutation_id;
        $validatedData = $request->validate([
            'name' => ['required', 'string', 'max:100', Rule::unique('mutation_types')->ignore($mutationType->mutation_id, 'mutation_id')],
            'slug' => 'required|string|max:255|unique:mutation_types,slug,' . $mutationType->mutation_id . ',mutation_id',
            'description' => 'nullable|string|max:500',
            'is_active' => 'sometimes|boolean',
        ]);

        try {
            $dataToUpdate = $validatedData;
            $dataToUpdate['is_active'] = $request->has('is_active');
            $mutationType->update($dataToUpdate);
            return redirect()->route('algorithm-control.mutation-types.index')->with('success', 'Mutation method updated successfully.');
        } catch (Exception $e) {
            Log::error("Mutation Type Update Failed for ID {$mutationType->mutation_id}: " . $e->getMessage());
            return redirect()->back()->withErrors(['update_error' => 'Failed to update mutation method.'], $errorBagName)->withInput();
        }
    }

    /**
     * Remove the specified resource from storage.
     */
    public function destroy(MutationType $mutationType)
    {
        try {
            // (اختياري) التحقق إذا كانت الطريقة مستخدمة في أي عملية تشغيل سابقة
            // if ($mutationType->populations()->exists()) {
            //     return redirect()->route('algorithm-control.mutation-types.index')->with('error', 'Cannot delete: This method is used in historical data.');
            // }
            $mutationType->delete();
            return redirect()->route('algorithm-control.mutation-types.index')->with('success', 'Mutation method deleted successfully.');
        } catch (Exception $e) {
            Log::error("Mutation Type Deletion Failed for ID {$mutationType->mutation_id}: " . $e->getMessage());
            return redirect()->route('algorithm-control.mutation-types.index')->with('error', 'Failed to delete mutation method.');
        }
    }
}
-----------------------------------------------------------------------------------------------------
app\Http\Controllers\DataEntry\PlanController.php
<?php

namespace App\Http\Controllers\DataEntry;

use App\Http\Controllers\Controller;
use App\Imports\PlanSubjectsImport;
use App\Models\Plan;
use App\Models\Department;
use App\Models\PlanSubject;
use App\Models\Subject;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Log;
use Illuminate\Validation\Rule;
use Exception;
use Illuminate\Support\Facades\Validator;
use Maatwebsite\Excel\Facades\Excel;
use Maatwebsite\Excel\Validators\ValidationException as ExcelValidationException;

class PlanController extends Controller
{
    // =============================================
    //            Web Controller Methods
    // =============================================
    // الدوال (index, store, update, destroy, manageSubjects, addSubject, removeSubject)
    // تبقى كما هي في الكود السابق الذي أرسلته - تأكد أنها موجودة وصحيحة.

    public function index()
    { /* ... كود index للويب مع pagination ... */
        try {
            $plans = Plan::with('department:id,department_name') // تحديد حقول القسم
                ->latest('id')
                ->paginate(15);
            $departments = Department::orderBy('department_name')->get(['id', 'department_name']); // تحديد الحقول
            return view('dashboard.data-entry.plans', compact('plans', 'departments'));
        } catch (Exception $e) {
            Log::error('Error fetching academic plans: ' . $e->getMessage());
            return redirect()->back()->with('error', 'Could not load academic plans.');
        }
    }
    public function store(Request $request)
    { /* ... كود store للويب ... */
        $validatedData = $request->validate(['plan_no' => 'required|string|max:50|unique:plans,plan_no', 'plan_name' => 'required|string|max:255', 'year' => 'required|integer|digits:4|min:2000', 'plan_hours' => 'required|integer|min:1', 'department_id' => 'required|integer|exists:departments,id', 'is_active' => 'sometimes|boolean',]);
        $data = $validatedData;
        $data['is_active'] = $request->has('is_active');
        try {
            Plan::create($data);
            return redirect()->route('data-entry.plans.index')->with('success', 'Academic Plan created successfully.');
        } catch (Exception $e) {
            Log::error('Plan Creation Failed: ' . $e->getMessage());
            return redirect()->back()->with('error', 'Failed to create academic plan.')->withInput();
        }
    }
    public function update(Request $request, Plan $plan)
    { /* ... كود update للويب ... */
        $validatedData = $request->validate(['plan_no' => 'required|string|max:50|unique:plans,plan_no,' . $plan->id, 'plan_name' => 'required|string|max:255', 'year' => 'required|integer|digits:4|min:2000', 'plan_hours' => 'required|integer|min:1', 'department_id' => 'required|integer|exists:departments,id', 'is_active' => 'sometimes|boolean',]);
        $data = $validatedData;
        $data['is_active'] = $request->has('is_active');
        try {
            $plan->update($data);
            return redirect()->route('data-entry.plans.index')->with('success', 'Academic Plan updated successfully.');
        } catch (Exception $e) {
            Log::error('Plan Update Failed: ' . $e->getMessage());
            return redirect()->back()->with('error', 'Failed to update academic plan.')->withInput();
        }
    }
    public function destroy(Plan $plan)
    { /* ... كود destroy للويب ... */
        // if ($plan->planSubjectEntries()->exists()) {
        //     return redirect()->route('data-entry.plans.index')->with('error', 'Cannot delete plan. It has subjects assigned.');
        // }
        try {
            Log::warning("Force deleting plan ID: {$plan->id} and its subjects.");
            // استخدام delete() على العلاقة لحذف كل سجلات plan_subjects المرتبطة
            $plan->planSubjectEntries()->delete();
            Log::info("Associated subjects for plan ID: {$plan->id} deleted.");
            $plan->delete();
            return redirect()->route('data-entry.plans.index')->with('success', 'Academic Plan deleted successfully.');
        } catch (Exception $e) {
            Log::error('Plan Deletion Failed: ' . $e->getMessage());
            return redirect()->route('data-entry.plans.index')->with('error', 'Failed to delete academic plan.');
        }
    }

    // --- الدوال المساعدة للرفع بالجملة ---
    private function normalizeArabicString($string)
    {
        if (is_null($string)) return null;
        $search = array('أ', 'إ', 'آ', 'ى', 'ة');
        $replace = array('ا', 'ا', 'ا', 'ي', 'ه');
        return str_replace($search, $replace, $string);
    }

    private function findRelatedId($modelClass, $nameColumn, $valueFromExcel, &$skippedDetails, $rowNum, $attributeFriendlyName, $searchByIdColumn = 'id', $searchByNoColumn = null, $noValueFromExcel = null)
    {
        if (is_numeric($valueFromExcel)) {
            $recordById = $modelClass::where($searchByIdColumn, $valueFromExcel)->first();
            if ($recordById) {
                return $recordById->id;
            }
        }
        if (!empty($valueFromExcel)) {
            $normalizedValue = $this->normalizeArabicString(strtolower(trim($valueFromExcel)));
            $recordByName = $modelClass::all()->first(function ($item) use ($nameColumn, $normalizedValue) {
                return $this->normalizeArabicString(strtolower(trim($item->$nameColumn))) === $normalizedValue;
            });
            if ($recordByName) {
                return $recordByName->id;
            }
        }
        if ($searchByNoColumn && !empty($noValueFromExcel)) {
            $recordByNo = $modelClass::where($searchByNoColumn, $noValueFromExcel)->first();
            if ($recordByNo) return $recordByNo->id;
        }
        $skippedDetails[] = "Row {$rowNum}: {$attributeFriendlyName} '{$valueFromExcel}' (or No: '{$noValueFromExcel}') not found or invalid. This row will be skipped.";
        return null;
    }

    /**
     * Handle bulk upload of academic plans from Excel file for Web.
     */
    public function bulkUpload(Request $request)
    {
        $request->validate([
            'plan_excel_file' => 'required|file|mimes:xlsx,xls,csv|max:5120',
        ], [], ['plan_excel_file' => 'Excel file']);

        try {
            $rows = Excel::toCollection(collect(), $request->file('plan_excel_file'))->first();
            if ($rows->isEmpty() || $rows->count() <= 1) {
                return redirect()->route('data-entry.plans.index')->with('error', 'Uploaded Excel file is empty or has no data rows.');
            }

            $createdCount = 0;
            $updatedCount = 0;
            $skippedCount = 0;
            $skippedDetails = [];
            $processedPlanNos = collect();
            $header = $rows->first()->map(fn($item) => strtolower(str_replace([' ', '-'], '_', $item ?? '')));
            $dataRows = $rows->slice(1);

            foreach ($dataRows as $rowKey => $rowArray) {
                $row = $header->combine($rowArray->map(fn($val) => trim($val ?? '')));
                $currentRowNumber = $rowKey + 2;

                $planNo = $row->get('plan_no');
                $planName = $row->get('plan_name');

                if (empty($planNo) && empty($planName)) {
                    $skippedCount++;
                    $skippedDetails[] = "Row {$currentRowNumber}: Skipped (empty plan_no & name).";
                    continue;
                }
                if (empty($planNo)) {
                    $skippedCount++;
                    $skippedDetails[] = "Row {$currentRowNumber} (Name: {$planName}): Skipped (missing plan_no).";
                    continue;
                }
                if (empty($planName)) {
                    $skippedCount++;
                    $skippedDetails[] = "Row {$currentRowNumber} (No: {$planNo}): Skipped (missing plan_name).";
                    continue;
                }

                if ($processedPlanNos->contains($planNo)) {
                    $skippedCount++;
                    $skippedDetails[] = "Row {$currentRowNumber}: Skipped (duplicate plan_no '{$planNo}' in this file).";
                    continue;
                }

                $departmentValueFromExcel = $row->get('department_id'); // Could be ID, Name, or department_no
                $departmentNoFromExcelIfText = (!is_numeric($departmentValueFromExcel) && !empty($departmentValueFromExcel)) ? $departmentValueFromExcel : null;

                $departmentId = $this->findRelatedId(
                    Department::class,
                    'department_name',
                    $departmentValueFromExcel,
                    $skippedDetails,
                    $currentRowNumber,
                    'Department',
                    'id',
                    'department_no',
                    $departmentNoFromExcelIfText
                );

                if (is_null($departmentId) && !empty($departmentValueFromExcel)) {
                    $skippedCount++;
                    continue;
                }
                if (is_null($departmentId) && empty($departmentValueFromExcel)) { // Department is required
                    $skippedCount++;
                    $skippedDetails[] = "Row {$currentRowNumber} (PlanNo: {$planNo}): Skipped - Department is required.";
                    continue;
                }

                $isActiveValue = $row->get('is_active', '1');
                $isActive = filter_var($isActiveValue, FILTER_VALIDATE_BOOLEAN, FILTER_NULL_ON_FAILURE);
                if (is_null($isActive)) {
                    $isActive = (strtolower(trim($isActiveValue)) === 'active' || $isActiveValue === '1' || strtolower(trim($isActiveValue)) === 'yes');
                }

                $dataToValidate = [
                    'plan_no' => $planNo,
                    'plan_name' => $planName,
                    'year' => $row->get('year'),
                    'plan_hours' => $row->get('plan_hours'),
                    'department_id' => $departmentId,
                    'is_active' => $isActive,
                ];

                $validator = Validator::make($dataToValidate, [
                    'plan_no' => 'required|string|max:50',
                    'plan_name' => 'required|string|max:255',
                    'year' => 'required|integer|digits:4|min:2000|max:' . (date('Y') + 10),
                    'plan_hours' => 'required|integer|min:1|max:300',
                    'department_id' => 'required|integer|exists:departments,id',
                    'is_active' => 'required|boolean',
                ]);

                if ($validator->fails()) {
                    $skippedCount++;
                    $errors = implode('; ', $validator->errors()->all());
                    $skippedDetails[] = "Row {$currentRowNumber} (PlanNo: {$planNo}): Skipped - Validation: {$errors}";
                    continue;
                }
                $validatedData = $validator->validated();

                $plan = Plan::updateOrCreate(['plan_no' => $validatedData['plan_no']], $validatedData);
                if ($plan->wasRecentlyCreated) {
                    $createdCount++;
                } elseif ($plan->wasChanged()) {
                    $updatedCount++;
                } else {
                    $skippedCount++;
                    $skippedDetails[] = "Row {$currentRowNumber} (PlanNo: {$planNo}): Data already up-to-date.";
                }
                $processedPlanNos->push($planNo);
            }

            $message = "Academic Plans bulk upload processed. ";
            if ($createdCount > 0) $message .= "{$createdCount} new created. ";
            if ($updatedCount > 0) $message .= "{$updatedCount} updated. ";
            if ($skippedCount > 0) $message .= "{$skippedCount} skipped. ";
            if (!empty($skippedDetails)) {
                session()->flash('skipped_details', $skippedDetails);
            }
            return redirect()->route('data-entry.plans.index')->with('success', trim($message));
        } catch (Exception $e) {
            Log::error('Plan Bulk Upload Failed: ' . $e->getMessage() . ' at ' . $e->getFile() . ':' . $e->getLine());
            return redirect()->route('data-entry.plans.index')->with('error', 'Upload error: ' . $e->getMessage());
        }
    }

    public function manageSubjects(Plan $plan)
    { /* ... كود manageSubjects للويب ... */
        try {
            $allSubjects = Subject::orderBy('subject_name')->get(['id', 'subject_no', 'subject_name']);
            $addedSubjectIds = $plan->planSubjectEntries()->pluck('subject_id')->toArray();
            return view('dashboard.data-entry.plan-subjects-manage', compact('plan', 'allSubjects', 'addedSubjectIds'));
        } catch (Exception $e) {
            Log::error("Error loading manage subjects view for Plan ID {$plan->id}: " . $e->getMessage());
            return redirect()->route('data-entry.plans.index')->with('error', 'Could not load plan subject management page.');
        }
    }

    public function addSubject(Request $request, Plan $plan, $level, $semester)
    { /* ... كود addSubject للويب ... */
        $validatedData = $request->validate(['subject_id' => ['required', 'integer', 'exists:subjects,id', Rule::unique('plan_subjects')->where(fn($q) => $q->where('plan_id', $plan->id)->where('plan_level', $level)->where('plan_semester', $semester))],], ['subject_id.unique' => 'Subject already added.', 'subject_id.*' => 'Invalid subject selected.']);
        try {
            PlanSubject::create(['plan_id' => $plan->id, 'subject_id' => $validatedData['subject_id'], 'plan_level' => $level, 'plan_semester' => $semester]);
            return redirect()->route('data-entry.plans.manageSubjects', $plan->id)->with('success', 'Subject added successfully.');
        } catch (Exception $e) {
            Log::error("Error adding subject {$request->subject_id} to plan {$plan->id} (L{$level}S{$semester}): " . $e->getMessage());
            return redirect()->route('data-entry.plans.manageSubjects', $plan->id)->with('error', 'Failed to add subject.')->withInput(['subject_id' => $request->subject_id]);
        }
    }

    public function removeSubject(Plan $plan, PlanSubject $planSubject)
    { /* ... كود removeSubject للويب ... */
        if ($planSubject->plan_id !== $plan->id) {
            abort(404);
        }
        try {
            $subjectName = optional($planSubject->subject)->subject_name ?? 'N/A';
            $planSubject->delete();
            return redirect()->route('data-entry.plans.manageSubjects', $plan->id)->with('success', "Subject '{$subjectName}' removed.");
        } catch (Exception $e) {
            Log::error("Error removing plan subject ID {$planSubject->id}: " . $e->getMessage());
            return redirect()->back()->with('error', 'Failed to remove subject.');
        }
    }


    /**
     * Handle the import of plan subjects from an Excel file for a specific plan.
     */
    public function importSubjectsExcel(Request $request, Plan $plan) // Route Model Binding للخطة
    {
        $request->validate([
            'plan_subjects_excel_file' => 'required|file|mimes:xlsx,xls,csv|max:5120', // 5MB max
        ]);

        try {
            // تمرير كائن الخطة الحالية للـ Importer
            $import = new PlanSubjectsImport($plan);

            Excel::import($import, $request->file('plan_subjects_excel_file'));

            $createdCount = $import->getCreatedCount();
            $updatedCount = $import->getUpdatedCount(); // سنستخدمه إذا كان هناك تحديث لحقول أخرى في plan_subjects
            $skippedCount = $import->getSkippedCount();
            $alreadyExistedCount = $import->getAlreadyExistedCount(); // عدد المواد التي كانت موجودة ولم تتغير
            $invalidPlanCount = $import->getInvalidPlanCount(); // عدد الصفوف التي لم تتطابق مع الخطة الحالية

            $messages = [];
            if ($createdCount > 0) $messages[] = "{$createdCount} new subject(s) added to the plan.";
            if ($updatedCount > 0) $messages[] = "{$updatedCount} existing subject assignment(s) updated."; // (إذا كان هناك تحديث)
            if ($alreadyExistedCount > 0) $messages[] = "{$alreadyExistedCount} subject(s) were already assigned and unchanged.";
            if ($invalidPlanCount > 0) $messages[] = "{$invalidPlanCount} row(s) were skipped as they did not match the current plan or had other critical errors.";
            if ($skippedCount > 0) $messages[] = "{$skippedCount} additional row(s) were skipped (e.g., empty or header).";


            if (empty($messages)) {
                $flashMessage = 'Excel file processed, but no changes were made or no valid data found.';
                return redirect()->route('data-entry.plans.manageSubjects', $plan->id)
                                 ->with('info', $flashMessage);
            } else {
                $flashMessage = "Plan subjects import processed: " . implode(' ', $messages);
                 return redirect()->route('data-entry.plans.manageSubjects', $plan->id)
                                  ->with('success', $flashMessage);
            }


        } catch (ExcelValidationException $e) {
             $failures = $e->failures();
             $errorMessages = [];
             foreach ($failures as $failure) {
                 $errorMessages[] = "Row " . $failure->row() . ": " . implode(', ', $failure->errors()) . " (Value: '" . ($failure->values()[$failure->attribute()] ?? 'N/A') . "')";
             }
             Log::warning('Plan Subjects Excel Import Validation Failures for Plan ID ' . $plan->id .': ', $failures);
             return redirect()->route('data-entry.plans.manageSubjects', $plan->id)
                              ->with('error', 'Import failed due to validation errors in the file. Please check details below.')
                              ->with('import_excel_errors', $errorMessages);

        } catch (Exception $e) {
            Log::error('Plan Subjects Excel Import Failed for Plan ID ' . $plan->id . ': ' . $e->getMessage());
            return redirect()->route('data-entry.plans.manageSubjects', $plan->id)
                             ->with('error', 'An error occurred during the Excel import: ' . $e->getMessage());
        }
    }
   public function apiIndex(Request $request)
    {
        try {
            $query = Plan::with('department:id,department_name'); // تحميل القسم مع حقول محددة

            // (اختياري) فلترة بسيطة
            if ($request->has('department_id')) {
                $query->where('department_id', $request->department_id);
            }
            if ($request->boolean('active')) { // للبحث عن الخطط الفعالة فقط ?active=true
                $query->where('is_active', true);
            }
            if ($request->boolean('inactive')) { // للبحث عن غير الفعالة ?inactive=true
                $query->where('is_active', false);
            }
            if ($request->has('year')) {
                $query->where('year', $request->year);
            }
            if ($request->has('q')) { // بحث بالرقم أو الاسم
                $searchTerm = $request->q;
                $query->where(function ($q) use ($searchTerm) {
                    $q->where('plan_no', 'like', "%{$searchTerm}%")
                        ->orWhere('plan_name', 'like', "%{$searchTerm}%");
                });
            }

            // --- جلب كل الخطط (الحالة الحالية) ---
            $plans = $query->latest('id') // الترتيب بالأحدث
                ->get();

            // --- كود الـ Pagination (معطل) ---
            /*
            $perPage = $request->query('per_page', 15);
            $plansPaginated = $query->latest('id')->paginate($perPage);
            return response()->json([
                'success' => true,
                'data' => $plansPaginated->items(),
                'pagination' => [ 'total' => $plansPaginated->total(), ... ]
            ], 200);
            */

            return response()->json(['success' => true, 'data' => $plans], 200);
        } catch (Exception $e) {
            Log::error('API Error fetching plans: ' . $e->getMessage());
            return response()->json(['success' => false, 'message' => 'Server Error'], 500);
        }
    }

    /**
     * Store a newly created academic plan from API request.
     * تخزين خطة جديدة قادمة من طلب API
     */
    public function apiStore(Request $request)
    {
        // 1. Validation
        $validatedData = $request->validate([
            'plan_no' => 'required|string|max:50|unique:plans,plan_no',
            'plan_name' => 'required|string|max:255',
            'year' => 'required|integer|digits:4|min:2000',
            'plan_hours' => 'required|integer|min:1',
            'department_id' => 'required|integer|exists:departments,id',
            'is_active' => 'sometimes|boolean', // API يمكنه إرسال true/false مباشرة
        ]);

        // 2. Prepare Data (Handle is_active default if not sent)
        $data = $validatedData;
        $data['is_active'] = $request->boolean('is_active'); // استخدام boolean() للتعامل مع true/false/'1'/'0'

        // 3. Add to Database
        try {
            $plan = Plan::create($data);
            $plan->load('department:id,department_name'); // تحميل القسم لعرضه
            // 4. Return Success JSON Response
            return response()->json([
                'success' => true,
                'data' => $plan,
                'message' => 'Academic Plan created successfully.'
            ], 201);
        } catch (Exception $e) {
            Log::error('API Plan Creation Failed: ' . $e->getMessage());
            return response()->json(['success' => false, 'message' => 'Failed to create plan.'], 500);
        }
    }

    /**
     * Display the specified academic plan (API).
     * عرض خطة محددة للـ API
     */
    public function apiShow(Plan $plan)
    {
        try {
            // تحميل القسم والمواد المرتبطة (مع تحديد الحقول)
            $plan->load([
                'department:id,department_name',
                // جلب مواد الخطة مرتبة حسب المستوى ثم الفصل
                'planSubjectEntries' => function ($query) {
                    $query->orderBy('plan_level')->orderBy('plan_semester');
                },
                'planSubjectEntries.subject:id,subject_no,subject_name' // تحميل تفاصيل المادة
            ]);
            return response()->json(['success' => true, 'data' => $plan], 200);
        } catch (Exception $e) {
            Log::error('API Error fetching plan details: ' . $e->getMessage());
            return response()->json(['success' => false, 'message' => 'Could not load plan details.'], 500);
        }
    }

    /**
     * Update the specified academic plan from API request.
     * تحديث خطة محددة قادمة من طلب API
     */
    public function apiUpdate(Request $request, Plan $plan)
    {
        // 1. Validation
        $validatedData = $request->validate([
            'plan_no' => ['sometimes', 'required', 'string', 'max:50', 'unique:plans,plan_no,' . $plan->id],
            'plan_name' => 'sometimes|required|string|max:255',
            'year' => 'sometimes|required|integer|digits:4|min:2000',
            'plan_hours' => 'sometimes|required|integer|min:1',
            'department_id' => 'sometimes|required|integer|exists:departments,id',
            'is_active' => 'sometimes|boolean',
        ]);

        // 2. Prepare Data for Update
        $data = $validatedData;
        // تحديث is_active فقط إذا تم إرسالها
        if ($request->has('is_active')) {
            $data['is_active'] = $request->boolean('is_active');
        }

        // 3. Update Database
        try {
            $plan->update($data);
            $plan->load('department:id,department_name'); // تحميل القسم بعد التحديث
            // 4. Return Success JSON Response
            return response()->json([
                'success' => true,
                'data' => $plan,
                'message' => 'Academic Plan updated successfully.'
            ], 200);
        } catch (Exception $e) {
            Log::error('API Plan Update Failed: ' . $e->getMessage());
            return response()->json(['success' => false, 'message' => 'Failed to update plan.'], 500);
        }
    }

    /**
     * Remove the specified academic plan from API request.
     * حذف خطة محددة قادمة من طلب API
     */
    public function apiDestroy(Plan $plan)
    {
        // التحقق من وجود مواد مرتبطة
        if ($plan->planSubjectEntries()->exists()) {
            return response()->json(['success' => false, 'message' => 'Cannot delete plan. It has subjects assigned.'], 409);
        }

        // 1. Delete
        try {
            $plan->delete();
            // 2. Return Success JSON Response
            return response()->json(['success' => true, 'message' => 'Academic Plan deleted successfully.'], 200);
        } catch (Exception $e) {
            Log::error('API Plan Deletion Failed: ' . $e->getMessage());
            return response()->json(['success' => false, 'message' => 'Failed to delete plan.'], 500);
        }
    }

    // --- API Methods for Plan Subjects (Add/Remove) ---

    /**
     * Add a subject to a plan via API.
     * (Note: Level and semester come from the request body here)
     */
    public function apiAddSubject(Request $request, Plan $plan)
    {
        $validatedData = $request->validate([
            'subject_id' => [
                'required',
                'integer',
                'exists:subjects,id',
                Rule::unique('plan_subjects')->where(function ($query) use ($plan, $request) {
                    return $query->where('plan_id', $plan->id)
                        ->where('plan_level', $request->input('plan_level'))
                        ->where('plan_semester', $request->input('plan_semester'));
                }),
            ],
            'plan_level' => 'required|integer|min:1',
            'plan_semester' => 'required|integer|min:1',
        ], ['subject_id.unique' => 'Subject already added to this level/semester.']);

        try {
            $planSubject = PlanSubject::create([
                'plan_id' => $plan->id,
                'subject_id' => $validatedData['subject_id'],
                'plan_level' => $validatedData['plan_level'],
                'plan_semester' => $validatedData['plan_semester'],
            ]);
            $planSubject->load('subject:id,subject_no,subject_name'); // Load subject details
            return response()->json(['success' => true, 'data' => $planSubject, 'message' => 'Subject added to plan.'], 201);
        } catch (Exception $e) {
            Log::error("API Error adding subject {$request->subject_id} to plan {$plan->id}: " . $e->getMessage());
            return response()->json(['success' => false, 'message' => 'Failed to add subject.'], 500);
        }
    }

    /**
     * Remove a subject from a plan via API.
     * (Uses Route Model Binding for PlanSubject)
     */
    public function apiRemoveSubject(Plan $plan, PlanSubject $planSubject)
    {
        if ($planSubject->plan_id !== $plan->id) {
            return response()->json(['success' => false, 'message' => 'Subject association not found in this plan.'], 404);
        }

        try {
            $planSubject->delete();
            return response()->json(['success' => true, 'message' => 'Subject removed from plan.'], 200);
        } catch (Exception $e) {
            Log::error("API Error removing plan subject ID {$planSubject->id} from plan {$plan->id}: " . $e->getMessage());
            return response()->json(['success' => false, 'message' => 'Failed to remove subject.'], 500);
        }
    }


    /**
     * Handle bulk upload of academic plans from Excel file via API.
     */
    public function apiBulkUpload(Request $request)
    {
        // 1. التحقق من الملف المرفوع
        $validator = Validator::make($request->all(), [
            'plan_excel_file' => 'required|file|mimes:xlsx,xls,csv|max:5120', // 5MB max
        ], [], ['plan_excel_file' => 'Excel file']);

        if ($validator->fails()) {
            return response()->json([
                'success' => false,
                'message' => 'File validation failed.',
                'errors' => $validator->errors()
            ], 422); // Unprocessable Entity
        }

        try {
            // 2. قراءة البيانات من ملف الإكسل
            $rows = Excel::toCollection(collect(), $request->file('plan_excel_file'))->first();

            if ($rows->isEmpty() || $rows->count() <= 1) { // يجب أن يحتوي على صف عناوين وصف بيانات واحد على الأقل
                return response()->json([
                    'success' => false,
                    'message' => 'The uploaded Excel file is empty or contains no data rows after the header.'
                ], 400); // Bad Request
            }

            $createdCount = 0;
            $updatedCount = 0;
            $skippedCount = 0;
            $skippedDetails = [];
            $processedPlanNos = collect(); // لتتبع أرقام الخطط التي تمت معالجتها من الملف الحالي

            // الحصول على الصف الأول كعناوين (بتحويلها لـ snake_case)
            $header = $rows->first()->map(fn($item) => strtolower(str_replace([' ', '-'], '_', $item ?? '')));
            // إزالة صف العناوين من البيانات
            $dataRows = $rows->slice(1);

            foreach ($dataRows as $rowKey => $rowArray) {
                // تحويل الصف الحالي لمصفوفة باستخدام العناوين كمفاتيح مع trim للقيم
                $row = $header->combine($rowArray->map(fn($val) => trim($val ?? '')));
                $currentRowNumber = $rowKey + 2; // رقم الصف الفعلي في الإكسل (يبدأ من 1، والهيدر هو الصف 1)

                $planNo = $row->get('plan_no');
                $planName = $row->get('plan_name');

                // 1. تجاهل الأسطر الفارغة تماماً (إذا كان رقم الخطة واسمها فارغين)
                if (empty($planNo) && empty($planName)) {
                    $skippedCount++;
                    $skippedDetails[] = "Row {$currentRowNumber}: Skipped because both plan_no and plan_name are empty.";
                    continue;
                }
                // تجاهل إذا كان رقم الخطة أو اسم الخطة مفقوداً (اعتبارهم حقولاً أساسية)
                if (empty($planNo)) {
                    $skippedCount++;
                    $skippedDetails[] = "Row {$currentRowNumber} (Plan Name: {$planName}): Skipped because plan_no is missing.";
                    continue;
                }
                if (empty($planName)) {
                    $skippedCount++;
                    $skippedDetails[] = "Row {$currentRowNumber} (Plan No: {$planNo}): Skipped because plan_name is missing.";
                    continue;
                }

                // 4. فحص التكرار داخل الملف نفسه بناءً على plan_no
                if ($processedPlanNos->contains($planNo)) {
                    $skippedCount++;
                    $skippedDetails[] = "Row {$currentRowNumber}: Skipped duplicate plan_no '{$planNo}' from within this file.";
                    continue;
                }

                // جلب department_id (قد يكون ID أو اسم أو رقم قسم من الإكسل)
                $departmentValueFromExcel = $row->get('department_id'); // اسم العمود كما هو في الإكسل (بعد التحويل لـ snake_case)
                $departmentNoFromExcelIfText = (!is_numeric($departmentValueFromExcel) && !empty($departmentValueFromExcel)) ? $departmentValueFromExcel : null;

                $departmentId = $this->findRelatedId(
                    Department::class,
                    'department_name', // العمود للبحث بالاسم في جدول departments
                    $departmentValueFromExcel,
                    $skippedDetails, // مصفوفة لتمرير تفاصيل التجاهل
                    $currentRowNumber,
                    'Department', // اسم ودي للخاصية
                    'id', // عمود الـ ID في جدول departments
                    'department_no', // عمود الرقم في جدول departments للبحث به كخيار ثانٍ
                    $departmentNoFromExcelIfText // قيمة رقم القسم إذا كانت القيمة من الإكسل نصية
                );

                // إذا كان القسم مطلوباً ولم يتم العثور عليه، تجاهل الصف
                if (is_null($departmentId) && !empty($departmentValueFromExcel)) { // كان هناك قيمة ولكن لم يتم العثور على تطابق
                    $skippedCount++;
                    // findRelatedId ستكون قد أضافت التفاصيل لـ skippedDetails
                    continue;
                }
                if (is_null($departmentId) && empty($departmentValueFromExcel)) { // حقل القسم فارغ في الإكسل (وهو مطلوب)
                    $skippedCount++;
                    $skippedDetails[] = "Row {$currentRowNumber} (PlanNo: {$planNo}): Skipped - Department information is required and was not found or is missing in the Excel file.";
                    continue;
                }

                // معالجة is_active
                $isActiveValue = $row->get('is_active', '1'); // قيمة افتراضية '1' إذا لم يكن العمود موجوداً أو فارغاً
                $isActive = filter_var($isActiveValue, FILTER_VALIDATE_BOOLEAN, FILTER_NULL_ON_FAILURE);
                if (is_null($isActive)) { // إذا لم تكن القيمة true/false/1/0/on/off
                    $isActive = (strtolower(trim($isActiveValue)) === 'active' || $isActiveValue === '1' || strtolower(trim($isActiveValue)) === 'yes');
                }


                // تجهيز البيانات للتحقق والحفظ
                $dataToValidateAndSave = [
                    'plan_no' => $planNo,
                    'plan_name' => $planName,
                    'year' => $row->get('year'),
                    'plan_hours' => $row->get('plan_hours'),
                    'department_id' => $departmentId, // الـ ID الرقمي للقسم
                    'is_active' => $isActive,
                ];

                // التحقق من صحة البيانات الرقمية الأخرى
                $rowValidator = Validator::make($dataToValidateAndSave, [
                    'plan_no' => 'required|string|max:50', // لا نتحقق من unique هنا لأننا سنستخدم updateOrCreate
                    'plan_name' => 'required|string|max:255',
                    'year' => 'required|integer|digits:4|min:2000|max:' . (date('Y') + 10), // سنة منطقية
                    'plan_hours' => 'required|integer|min:1|max:300', // ساعات منطقية
                    'department_id' => 'required|integer|exists:departments,id',
                    'is_active' => 'required|boolean',
                ]);

                if ($rowValidator->fails()) {
                    $skippedCount++;
                    $errors = implode('; ', $rowValidator->errors()->all());
                    $skippedDetails[] = "Row {$currentRowNumber} (PlanNo: {$planNo}): Skipped - Validation errors: {$errors}";
                    continue;
                }
                $validatedData = $rowValidator->validated(); // البيانات النظيفة

                // 3. البحث عن الخطة في قاعدة البيانات وتحديثها أو إنشاؤها
                $plan = Plan::updateOrCreate(
                    ['plan_no' => $validatedData['plan_no']], // الشرط للبحث (أو الإنشاء إذا لم يوجد)
                    $validatedData // البيانات للتحديث أو الإنشاء
                );

                if ($plan->wasRecentlyCreated) {
                    $createdCount++;
                } elseif ($plan->wasChanged()) { // للتحقق إذا تم تحديث أي حقل فعلاً
                    $updatedCount++;
                } else {
                    // لم يتم إنشاؤه ولم يتغير (موجود بنفس البيانات)
                    $skippedCount++;
                    $skippedDetails[] = "Row {$currentRowNumber} (PlanNo: {$planNo}): Data already up-to-date in the system.";
                }
                $processedPlanNos->push($planNo);
            }

            // 4. بناء الاستجابة
            $summaryMessage = "Academic Plans bulk upload processed via API.";
            $responseData = [
                'created_count' => $createdCount,
                'updated_count' => $updatedCount,
                'skipped_count' => $skippedCount,
                'skipped_details' => $skippedDetails,
            ];

            return response()->json([
                'success' => true,
                'message' => $summaryMessage,
                'data' => $responseData
            ], 200); // OK

        } catch (Exception $e) {
            Log::error('API Plan Bulk Upload Failed: ' . $e->getMessage() . ' at ' . $e->getFile() . ':' . $e->getLine());
            return response()->json([
                'success' => false,
                'message' => 'An error occurred during API bulk upload.',
                'error_details' => $e->getMessage() // للمطور
            ], 500); // Internal Server Error
        }
    }
}
---------------------------------------------------------------------------------------------------
app\Http\Controllers\DataEntry\PlanExpectedCountController.php
<?php

namespace App\Http\Controllers\DataEntry;

use App\Http\Controllers\Controller;
use App\Models\PlanExpectedCount; // تم استيراده
use App\Models\Plan; // نحتاج الخطط للـ dropdown
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Log;
use Illuminate\Validation\Rule;
use Illuminate\Support\Facades\Validator;
use Exception;

class PlanExpectedCountController extends Controller
{
    // =============================================
    //            Web Controller Methods
    // =============================================

    /**
     * Display a listing of the resource.
     */
    public function index()
    {
        try {
            // جلب الأعداد مع الخطط، مرتبة بالسنة ثم الخطة ثم المستوى ثم الفصل
            $expectedCounts = PlanExpectedCount::with('plan:id,plan_no,plan_name')
                ->orderBy('academic_year', 'desc')
                ->orderBy('plan_id') // أو حسب اسم الخطة إذا أردت
                ->orderBy('plan_level')
                ->orderBy('plan_semester')
                ->paginate(20); // عدد أكبر في الصفحة

            // جلب الخطط للـ dropdown في المودال
            $plans = Plan::where('is_active', true)->orderBy('plan_name')->get(['id', 'plan_no', 'plan_name']);

            return view('dashboard.data-entry.plan-expected-counts', compact('expectedCounts', 'plans'));
        } catch (Exception $e) {
            Log::error('Error fetching expected counts: ' . $e->getMessage());
            return redirect()->back()->with('error', 'Could not load expected counts.');
        }
    }

    /**
     * Store a newly created resource in storage.
     */
    public function store(Request $request)
    {
        // 1. Validation مع التحقق من التفرد
        $validator = Validator::make($request->all(), [
            'academic_year' => 'required|integer|digits:4|min:2020',
            'plan_id' => 'required|integer|exists:plans,id',
            'plan_level' => 'required|integer|min:1|max:6',
            'plan_semester' => 'required|integer|min:1|max:3',
            'male_count' => 'required|integer|min:0',
            'female_count' => 'required|integer|min:0',
            'branch' => 'nullable|string|max:100',
        ]);

        // التحقق من التفرد يدوياً (لنفس الخطة، المستوى، الفصل، السنة، والفرع)
        $validator->after(function ($validator) use ($request) {
            if (!$validator->errors()->hasAny(['academic_year', 'plan_id', 'plan_level', 'plan_semester'])) {
                $exists = PlanExpectedCount::where('academic_year', $request->input('academic_year'))
                    ->where('plan_id', $request->input('plan_id'))
                    ->where('plan_level', $request->input('plan_level'))
                    ->where('plan_semester', $request->input('plan_semester'))
                    // التعامل مع الفرع - إذا كان فارغاً، نعتبره NULL
                    ->where(function ($query) use ($request) {
                        if (empty($request->input('branch'))) {
                            $query->whereNull('branch');
                        } else {
                            $query->where('branch', $request->input('branch'));
                        }
                    })
                    ->exists();
                if ($exists) {
                    $validator->errors()->add('count_unique', 'An expected count entry already exists for this specific plan, year, level, semester, and branch.');
                }
            }
        });

        if ($validator->fails()) {
            return redirect()->back()
                ->withErrors($validator, 'store') // استخدام error bag
                ->withInput();
        }

        // 2. Prepare Data
        $data = $validator->validated();
        // تعيين branch إلى null إذا كان فارغاً
        $data['branch'] = empty($data['branch']) ? null : $data['branch'];

        // 3. Add to Database
        try {
            PlanExpectedCount::create($data);
            return redirect()->route('data-entry.plan-expected-counts.index')
                ->with('success', 'Expected count created successfully.');
        } catch (Exception $e) {
            Log::error('Expected Count Creation Failed: ' . $e->getMessage());
            return redirect()->back()
                ->with('error', 'Failed to create expected count.')
                ->withInput();
        }
    }

    /**
     * Update the specified resource in storage.
     */
    public function update(Request $request, PlanExpectedCount $planExpectedCount) // استخدام Route Model Binding
    {
        // 1. Validation
        $validator = Validator::make($request->all(), [
            'academic_year' => 'required|integer|digits:4|min:2020',
            'plan_id' => 'required|integer|exists:plans,id',
            'plan_level' => 'required|integer|min:1|max:6',
            'plan_semester' => 'required|integer|min:1|max:3',
            'male_count' => 'required|integer|min:0',
            'female_count' => 'required|integer|min:0',
            'branch' => 'nullable|string|max:100',
        ]);

        // 2. التحقق من التفرد يدوياً (مع تجاهل الصف الحالي)
        $validator->after(function ($validator) use ($request, $planExpectedCount) {
            if (!$validator->errors()->hasAny(['academic_year', 'plan_id', 'plan_level', 'plan_semester'])) {
                $exists = PlanExpectedCount::where('academic_year', $request->input('academic_year'))
                    ->where('plan_id', $request->input('plan_id'))
                    ->where('plan_level', $request->input('plan_level'))
                    ->where('plan_semester', $request->input('plan_semester'))
                    ->where(function ($query) use ($request) {
                        if (empty($request->input('branch'))) {
                            $query->whereNull('branch');
                        } else {
                            $query->where('branch', $request->input('branch'));
                        }
                    })
                    ->where('id', '!=', $planExpectedCount->id) // استثناء السجل الحالي
                    ->exists();
                if ($exists) {
                    $validator->errors()->add('count_unique', 'Another expected count entry already exists for this specific combination.');
                }
            }
        });

        if ($validator->fails()) {
            return redirect()->back()
                ->withErrors($validator, 'update_' . $planExpectedCount->id) // error bag للتحديث
                ->withInput();
        }

        // 3. Prepare Data
        $data = $validator->validated();
        $data['branch'] = empty($data['branch']) ? null : $data['branch'];

        // 4. Update Database
        try {
            $planExpectedCount->update($data);
            return redirect()->route('data-entry.plan-expected-counts.index')
                ->with('success', 'Expected count updated successfully.');
        } catch (Exception $e) {
            Log::error('Expected Count Update Failed: ' . $e->getMessage());
            return redirect()->back()
                ->with('error', 'Failed to update expected count.')
                ->withInput();
        }
    }

    /**
     * Remove the specified resource from storage.
     */
    public function destroy(PlanExpectedCount $planExpectedCount)
    {
        // لا يوجد عادةً ارتباطات تمنع حذف هذا السجل
        try {
            $planExpectedCount->delete();
            return redirect()->route('data-entry.plan-expected-counts.index')
                ->with('success', 'Expected count deleted successfully.');
        } catch (Exception $e) {
            Log::error('Expected Count Deletion Failed: ' . $e->getMessage());
            return redirect()->route('data-entry.plan-expected-counts.index')
                ->with('error', 'Failed to delete expected count.');
        }
    }

    // =============================================
    //             API Controller Methods
    // =============================================

    /**
     * Display a listing of the expected counts (API).
     * عرض قائمة الأعداد المتوقعة للـ API (بدون Pagination حالياً)
     */
    public function apiIndex(Request $request)
    {
        try {
            $query = PlanExpectedCount::with('plan:id,plan_no,plan_name'); // تحميل الخطة

            // (اختياري) فلترة
            if ($request->has('academic_year')) {
                $query->where('academic_year', $request->academic_year);
            }
            if ($request->has('plan_id')) {
                $query->where('plan_id', $request->plan_id);
            }
            if ($request->has('level')) {
                $query->where('plan_level', $request->level);
            }
            if ($request->has('semester')) {
                $query->where('plan_semester', $request->semester);
            }
            if ($request->has('branch')) {
                if (strtolower($request->branch) == 'null' || $request->branch == '') {
                    $query->whereNull('branch');
                } else {
                    $query->where('branch', $request->branch);
                }
            }

            // --- جلب كل النتائج (الحالة الحالية) ---
            $expectedCounts = $query->orderBy('academic_year', 'desc')
                ->orderBy('plan_id')
                ->orderBy('plan_level')
                ->orderBy('plan_semester')
                ->get();

            // --- كود الـ Pagination للـ API (معطل) ---
            /*
            $perPage = $request->query('per_page', 25); // عدد أكبر في الصفحة
            $expectedCountsPaginated = $query->orderBy('academic_year', 'desc')
                                             ->orderBy('plan_id')
                                             ->orderBy('plan_level')
                                             ->orderBy('plan_semester')
                                             ->paginate($perPage);

            return response()->json([
                'success' => true,
                'data' => $expectedCountsPaginated->items(),
                'pagination' => [ 'total' => $expectedCountsPaginated->total(), ... ]
            ], 200);
            */

            return response()->json(['success' => true, 'data' => $expectedCounts], 200);
        } catch (Exception $e) {
            Log::error('API Error fetching expected counts: ' . $e->getMessage());
            return response()->json(['success' => false, 'message' => 'Server Error'], 500);
        }
    }

    /**
     * Store a newly created expected count from API request.
     * تخزين عدد متوقع جديد قادم من طلب API
     */
    public function apiStore(Request $request)
    {
        // 1. Validation (نفس قواعد الويب ولكن بدون after للتبسيط الأولي للـ API)
        // التحقق من التفرد يمكن إضافته كقاعدة Rule::unique مركبة إذا لزم الأمر
        $validator = Validator::make($request->all(), [
            'academic_year' => 'required|integer|digits:4|min:2020',
            'plan_id' => 'required|integer|exists:plans,id',
            'plan_level' => 'required|integer|min:1|max:6',
            'plan_semester' => 'required|integer|min:1|max:3',
            'male_count' => 'required|integer|min:0',
            'female_count' => 'required|integer|min:0',
            'branch' => 'nullable|string|max:100',
            // يمكنك إضافة قاعدة unique مركبة هنا إذا أردت
        ]);

        // التحقق من التفرد يدوياً (لضمان الدقة كما في الويب)
        $validator->after(function ($validator) use ($request) {
            if (!$validator->errors()->hasAny()) { // تحقق فقط إذا لم يكن هناك أخطاء أخرى
                $exists = PlanExpectedCount::where('academic_year', $request->input('academic_year'))
                    ->where('plan_id', $request->input('plan_id'))
                    ->where('plan_level', $request->input('plan_level'))
                    ->where('plan_semester', $request->input('plan_semester'))
                    ->where(function ($query) use ($request) {
                        if (empty($request->input('branch'))) {
                            $query->whereNull('branch');
                        } else {
                            $query->where('branch', $request->input('branch'));
                        }
                    })->exists();
                if ($exists) {
                    $validator->errors()->add('count_unique', 'Entry already exists for this combination.');
                }
            }
        });


        if ($validator->fails()) {
            return response()->json(['success' => false, 'errors' => $validator->errors()], 422);
        }

        // 2. Prepare Data
        $data = $validator->validated();
        $data['branch'] = empty($data['branch']) ? null : $data['branch'];

        // 3. Add to Database
        try {
            $count = PlanExpectedCount::create($data);
            $count->load('plan:id,plan_no,plan_name'); // تحميل الخطة للاستجابة
            // 4. Return Success JSON Response
            return response()->json([
                'success' => true,
                'data' => $count,
                'message' => 'Expected count created successfully.'
            ], 201);
        } catch (Exception $e) {
            Log::error('API Expected Count Creation Failed: ' . $e->getMessage());
            return response()->json(['success' => false, 'message' => 'Failed to create expected count.'], 500);
        }
    }

    /**
     * Display the specified expected count (API).
     * عرض عدد متوقع محدد للـ API
     */
    public function apiShow(PlanExpectedCount $planExpectedCount) // Route Model Binding
    {
        try {
            $planExpectedCount->load('plan:id,plan_no,plan_name'); // تحميل الخطة المرتبطة
            return response()->json(['success' => true, 'data' => $planExpectedCount], 200);
        } catch (Exception $e) {
            Log::error('API Error fetching expected count details: ' . $e->getMessage());
            return response()->json(['success' => false, 'message' => 'Could not load details.'], 500);
        }
    }

    /**
     * Update the specified expected count from API request.
     * تحديث عدد متوقع محدد قادم من طلب API
     */
    public function apiUpdate(Request $request, PlanExpectedCount $planExpectedCount)
    {
        // 1. Validation (استخدام sometimes)
        $validator = Validator::make($request->all(), [
            'academic_year' => 'sometimes|required|integer|digits:4|min:2020',
            'plan_id' => 'sometimes|required|integer|exists:plans,id',
            'plan_level' => 'sometimes|required|integer|min:1|max:6',
            'plan_semester' => 'sometimes|required|integer|min:1|max:3',
            'male_count' => 'sometimes|required|integer|min:0',
            'female_count' => 'sometimes|required|integer|min:0',
            'branch' => 'sometimes|nullable|string|max:100',
        ]);

        // التحقق من التفرد يدوياً (مع تجاهل الصف الحالي)
        $validator->after(function ($validator) use ($request, $planExpectedCount) {
            if (!$validator->errors()->hasAny()) {
                $exists = PlanExpectedCount::where('academic_year', $request->input('academic_year', $planExpectedCount->academic_year)) // استخدام القيمة الحالية كافتراضي
                    ->where('plan_id', $request->input('plan_id', $planExpectedCount->plan_id))
                    ->where('plan_level', $request->input('plan_level', $planExpectedCount->plan_level))
                    ->where('plan_semester', $request->input('plan_semester', $planExpectedCount->plan_semester))
                    ->where(function ($query) use ($request, $planExpectedCount) {
                        $branch = $request->input('branch', $planExpectedCount->branch); // التعامل مع القيمة الافتراضية للفرع
                        if (is_null($branch) || $branch === '') {
                            $query->whereNull('branch');
                        } else {
                            $query->where('branch', $branch);
                        }
                    })
                    ->where('id', '!=', $planExpectedCount->id)
                    ->exists();
                if ($exists) {
                    $validator->errors()->add('count_unique', 'Another entry already exists for this combination.');
                }
            }
        });


        if ($validator->fails()) {
            return response()->json(['success' => false, 'errors' => $validator->errors()], 422);
        }

        // 2. Prepare Data for Update
        $data = $validator->validated();
        // التعامل مع branch إذا تم إرساله
        if ($request->has('branch')) {
            $data['branch'] = empty($data['branch']) ? null : $data['branch'];
        }

        // 3. Update Database
        try {
            $planExpectedCount->update($data);
            $planExpectedCount->load('plan:id,plan_no,plan_name'); // تحميل الخطة بعد التحديث
            // 4. Return Success JSON Response
            return response()->json([
                'success' => true,
                'data' => $planExpectedCount,
                'message' => 'Expected count updated successfully.'
            ], 200);
        } catch (Exception $e) {
            Log::error('API Expected Count Update Failed: ' . $e->getMessage());
            return response()->json(['success' => false, 'message' => 'Failed to update expected count.'], 500);
        }
    }

    /**
     * Remove the specified expected count from API request.
     * حذف عدد متوقع محدد قادم من طلب API
     */
    public function apiDestroy(PlanExpectedCount $planExpectedCount)
    {
        // لا يوجد قيود عادةً
        try {
            $planExpectedCount->delete();
            return response()->json([
                'success' => true,
                'message' => 'Expected count deleted successfully.'
            ], 200);
        } catch (Exception $e) {
            Log::error('API Expected Count Deletion Failed: ' . $e->getMessage());
            return response()->json(['success' => false, 'message' => 'Failed to delete expected count.'], 500);
        }
    }
}
----------------------------------------------------------------------------------------------------------
app\Http\Controllers\DataEntry\PlanGroupsController.php
<?php

namespace App\Http\Controllers\DataEntry;

use App\Http\Controllers\Controller;
use App\Models\PlanGroup;
use App\Models\Plan;
use App\Models\Department;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;

class PlanGroupsController extends Controller
{
    /**
     * عرض صفحة المجموعات مع إمكانية الفلترة
     */
    public function index(Request $request)
    {
        // إعداد الفلاتر
        $query = PlanGroup::with([
            'plan:id,plan_no,plan_name,department_id',
            'plan.department:id,department_name',
            'section:id,plan_subject_id,activity_type,section_number,student_count',
            'section.planSubject:id,subject_id,plan_level,plan_semester',
            'section.planSubject.subject:id,subject_no,subject_name,theoretical_hours,practical_hours'
        ]);

        // فلترة حسب القسم
        if ($request->filled('department_id')) {
            $query->whereHas('plan.department', function($q) use ($request) {
                $q->where('id', $request->department_id);
            });
        }

        // فلترة حسب الخطة
        if ($request->filled('plan_id')) {
            $query->where('plan_id', $request->plan_id);
        }

        // فلترة حسب السنة الأكاديمية
        if ($request->filled('academic_year')) {
            $query->where('academic_year', $request->academic_year);
        }

        // فلترة حسب الفصل
        if ($request->filled('semester')) {
            $query->where('semester', $request->semester);
        }

        // فلترة حسب المستوى
        if ($request->filled('plan_level')) {
            $query->where('plan_level', $request->plan_level);
        }

        // جلب البيانات مع التجميع
        $planGroups = $query->orderBy('plan_id')
            ->orderBy('plan_level')
            ->orderBy('academic_year', 'desc')
            ->orderBy('semester')
            ->orderBy('group_no')
            ->get();

        // تحليل البيانات وتجميعها للعرض
        $groupedData = $this->analyzeGroupsData($planGroups);

        // بيانات الفلاتر
        $departments = Department::orderBy('department_name')->get(['id', 'department_name']);
        $plans = Plan::where('is_active', true)->orderBy('plan_name')->get(['id', 'plan_no', 'plan_name', 'department_id']);
        $academicYears = PlanGroup::distinct()->orderBy('academic_year', 'desc')->pluck('academic_year');
        $levels = PlanGroup::distinct()->orderBy('plan_level')->pluck('plan_level');

        return view('dashboard.data-entry.plan-groups.index', compact(
            'groupedData',
            'departments',
            'plans',
            'academicYears',
            'levels',
            'request'
        ));
    }

    /**
     * تحليل بيانات المجموعات للعرض
     */
    private function analyzeGroupsData($planGroups)
    {
        $result = [];

        // تجميع البيانات حسب السياق (خطة + مستوى + سنة + فصل)
        $groupedByContext = $planGroups->groupBy(function ($item) {
            return implode('|', [
                $item->plan_id,
                $item->plan_level,
                $item->academic_year,
                $item->semester,
                $item->branch ?? 'default'
            ]);
        });

        foreach ($groupedByContext as $contextKey => $contextGroups) {
            $firstGroup = $contextGroups->first();

            // معلومات السياق الأساسية
            $contextInfo = [
                'plan' => $firstGroup->plan,
                'plan_level' => $firstGroup->plan_level,
                'academic_year' => $firstGroup->academic_year,
                'semester' => $firstGroup->semester,
                'branch' => $firstGroup->branch,
                'total_groups' => $contextGroups->pluck('group_no')->unique()->count(),
            ];

            // تحليل المواد والمجموعات
            $subjects = [];
            $subjectGroups = $contextGroups->groupBy('section.planSubject.subject_id');

            foreach ($subjectGroups as $subjectId => $subjectGroupItems) {
                $firstItem = $subjectGroupItems->first();
                $subject = $firstItem->section->planSubject->subject;

                // تحليل نوع توزيع المجموعات للمادة
                $theoryGroups = $subjectGroupItems->filter(function($item) {
                    return $item->section->activity_type === 'Theory';
                });

                $practicalGroups = $subjectGroupItems->filter(function($item) {
                    return $item->section->activity_type === 'Practical';
                });

                // حساب إجمالي الطلاب
                $totalStudents = $subjectGroupItems->groupBy('section_id')
                    ->map(function($sectionGroups) {
                        return $sectionGroups->first()->section->student_count;
                    })->sum();

                // تحديد نوع التوزيع
                $distributionType = 'unknown';
                if ($theoryGroups->isNotEmpty() && $practicalGroups->isNotEmpty()) {
                    // مادة مشتركة (نظري + عملي)
                    if ($theoryGroups->pluck('group_no')->unique()->count() > 1 &&
                        $practicalGroups->pluck('group_no')->unique()->count() > 1) {
                        $distributionType = 'mixed'; // نظري مشترك + عملي منفصل
                    } else {
                        $distributionType = 'combined'; // نظري وعملي
                    }
                } elseif ($theoryGroups->isNotEmpty()) {
                    $distributionType = $theoryGroups->pluck('group_no')->unique()->count() > 1 ? 'theory_shared' : 'theory_single';
                } elseif ($practicalGroups->isNotEmpty()) {
                    $distributionType = $practicalGroups->pluck('group_no')->unique()->count() > 1 ? 'practical_separate' : 'practical_single';
                }

                $subjects[] = [
                    'subject' => $subject,
                    'total_students' => $totalStudents,
                    'theory_groups' => $theoryGroups->pluck('group_no')->unique()->sort()->values(),
                    'practical_groups' => $practicalGroups->pluck('group_no')->unique()->sort()->values(),
                    'distribution_type' => $distributionType,
                    'theory_sections_count' => $theoryGroups->pluck('section_id')->unique()->count(),
                    'practical_sections_count' => $practicalGroups->pluck('section_id')->unique()->count(),
                ];
            }

            $result[] = [
                'context' => $contextInfo,
                'subjects' => $subjects
            ];
        }

        return collect($result);
    }

    /**
     * API: جلب الخطط حسب القسم
     */
    public function getPlans(Request $request)
    {
        $plans = Plan::where('is_active', true);

        if ($request->filled('department_id')) {
            $plans->where('department_id', $request->department_id);
        }

        return response()->json($plans->orderBy('plan_name')->get(['id', 'plan_no', 'plan_name']));
    }
}
--------------------------------------------------------------------------------------------------------
app\Http\Controllers\DataEntry\PlanSubjectImportController.php
<?php

namespace App\Http\Controllers\DataEntry;

use Exception;
use App\Models\Plan;
use App\Models\Subject;
use App\Models\PlanSubject;
use Illuminate\Support\Str;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Log;
use App\Http\Controllers\Controller;
use Illuminate\Support\Facades\Validator;
use Maatwebsite\Excel\Facades\Excel; // لاستخدام Excel مباشرة
use Illuminate\Validation\Rule; // قد لا نحتاجه هنا إذا التحقق داخل اللوب

class PlanSubjectImportController extends Controller
{
    private $createdCount = 0;
    private $updatedCount = 0; // إذا احتجنا للتحديث لاحقاً
    private $skippedCount = 0;
    private $alreadyExistedCount = 0;
    private $invalidPlanCount = 0;
    private $processedPlanSubjectKeys = [];
    private $skippedDetails = []; // لتخزين تفاصيل الأسطر المتجاهلة

    /**
     * Handle the import of plan subjects from an Excel file for a specific plan.
     */
    public function handleImport(Request $request, Plan $plan) // Route Model Binding للخطة
    {
        $request->validate([
            'plan_subjects_excel_file' => 'required|file|mimes:xlsx,xls,csv|max:5120',
        ]);

        // إعادة تعيين العدادات لكل عملية رفع
        $this->resetCounters();

        try {
            // قراءة الملف مباشرة (بدون كلاس Import منفصل)
            $rows = Excel::toArray(new \stdClass(), $request->file('plan_subjects_excel_file'))[0]; // الحصول على أول شيت

            if (empty($rows)) {
                return redirect()->route('data-entry.plans.manageSubjects', $plan->id)
                    ->with('error', 'The uploaded Excel file is empty or could not be read.');
            }

            // افترض أن الصف الأول هو العناوين
            $header = array_map('strtolower', array_map('trim', array_shift($rows))); // قراءة العناوين وتحويلها لحروف صغيرة وإزالة الفراغات

            // تحديد أسماء الأعمدة المتوقعة (بحروف صغيرة وبدون فراغات لتسهيل المطابقة)
            $expectedPlanKey = 'plan_id'; // أو 'planname' أو 'planid' (سنتعامل مع هذا)
            $expectedLevelKey = 'plan_level';
            $expectedSemesterKey = 'plan_semester';
            $expectedSubjectKey = 'subject_id'; // أو 'subjectno', 'subjectname'

            // البحث عن مواقع الأعمدة بناءً على العناوين
            $planCol = $this->getColumnIndex($header, ['plan_id', 'planid', 'plan name', 'planname', 'plan_name', 'plan_no', 'planno']);
            $levelCol = $this->getColumnIndex($header, ['plan_level', 'planlevel', 'level']);
            $semesterCol = $this->getColumnIndex($header, ['plan_semester', 'plansemester', 'semester']);
            $subjectCol = $this->getColumnIndex($header, ['subject_id', 'subjectid', 'subject_no', 'subjectno', 'subject_name', 'subjectname']);

            // التحقق من وجود الأعمدة الأساسية
            if (is_null($planCol) || is_null($levelCol) || is_null($semesterCol) || is_null($subjectCol)) {
                $missing = [];
                if (is_null($planCol)) $missing[] = "'plan_id' or 'plan_name' or 'plan_no'";
                if (is_null($levelCol)) $missing[] = "'plan_level' or 'planlevel' or 'level'";
                if (is_null($semesterCol)) $missing[] = "'plan_semester' or 'plansemester' or 'semester'";
                if (is_null($subjectCol)) $missing[] = "'subject_id' or 'subject_no' or 'subject_name'";
                return redirect()->route('data-entry.plans.manageSubjects', $plan->id)
                    ->with('error', 'Excel file is missing required columns: ' . implode(', ', $missing) . '. Please check the header row.');
            }

            $currentRowNumber = 1; // لبدء العد من الصف الثاني (بعد العناوين)

            foreach ($rows as $row) {
                $currentRowNumber++; // رقم الصف الفعلي في الإكسل

                // تحويل الصف لمصفوفة بأسماء العناوين الأصلية (للتوافق مع findSubject)
                $rowData = [];
                foreach ($header as $index => $colName) {
                    $rowData[$colName] = $row[$index] ?? null;
                }
                // dd($rowData);

                // 1. تجاهل الصفوف الفارغة تماماً
                if (count(array_filter($row)) == 0) {
                    $this->skippedDetails[] = "Row {$currentRowNumber}: Skipped (completely empty row).";
                    $this->skippedCount++;
                    continue;
                }

                $planIdentifier = trim($rowData[$header[$planCol]] ?? null);
                $levelInput = trim($rowData[$header[$levelCol]] ?? null);
                $semesterInput = trim($rowData[$header[$semesterCol]] ?? null);
                $subjectIdentifier = trim($rowData[$header[$subjectCol]] ?? null);


                // تجاهل إذا كانت البيانات الأساسية فارغة
                if (empty($planIdentifier) || empty($subjectIdentifier) || empty($levelInput) || empty($semesterInput)) {
                    $this->skippedDetails[] = "Row {$currentRowNumber}: Skipped (missing plan, subject, level, or semester identifier).";
                    $this->skippedCount++;
                    continue;
                }

                // 2. التحقق من تطابق الخطة
                $planIdInFile = null;
                if (is_numeric($planIdentifier)) {
                    $planIdInFile = (int) $planIdentifier;
                } else { /* ... (نفس منطق البحث عن الخطة بالاسم من كلاس Import السابق) ... */
                    // محاولة البحث بالاسم (مع تجاهل حالة الأحرف والسنة إذا كانت مدمجة)
                    // نفترض أن اسم الخطة في الملف قد يكون "Plan Name Only" أو "Plan Name - YYYY"
                    $planNameFromFile = preg_replace('/-\s*\d{4}$/', '', $planIdentifier); // إزالة "- YYYY"
                    $foundPlan = Plan::whereRaw('LOWER(REPLACE(plan_name, " ", "")) LIKE ?', ['%' . strtolower(str_replace(' ', '', $planNameFromFile)) . '%'])
                        ->orWhereRaw('LOWER(REPLACE(plan_no, " ", "")) LIKE ?', ['%' . strtolower(str_replace(' ', '', $planIdentifier)) . '%'])
                        ->first();
                    if ($foundPlan) {
                        $planIdInFile = $foundPlan->id;
                    }
                }

                if (is_null($planIdInFile) || $planIdInFile !== $plan->id) {
                    $this->skippedDetails[] = "Row {$currentRowNumber}: Skipped (Plan '{$planIdentifier}' does not match current plan '{$plan->plan_no}').";
                    $this->invalidPlanCount++;
                    continue;
                }

                // 3. معالجة المستوى والفصل
                $level = $this->normalizeLevelOrSemester($levelInput);
                $semester = $this->normalizeLevelOrSemester($semesterInput);

                if (is_null($level) || is_null($semester) || $level < 1 || $semester < 1) {
                    $this->skippedDetails[] = "Row {$currentRowNumber}: Skipped (Invalid level '{$levelInput}' or semester '{$semesterInput}').";
                    $this->skippedCount++;
                    continue;
                }

                // 4. معالجة معرّف المادة
                $subject = $this->findSubject($subjectIdentifier);
                if (!$subject) {
                    $this->skippedDetails[] = "Row {$currentRowNumber}: Skipped (Subject '{$subjectIdentifier}' not found).";
                    $this->skippedCount++;
                    continue;
                }

                // 5. التحقق من التكرار داخل الملف
                $uniqueKey = $plan->id . '-' . $subject->id . '-' . $level . '-' . $semester;
                if (isset($this->processedPlanSubjectKeys[$uniqueKey])) {
                    $this->skippedDetails[] = "Row {$currentRowNumber}: Skipped (Duplicate entry for subject '{$subject->subject_no}' in this level/semester within the file).";
                    $this->skippedCount++;
                    continue;
                }
                $this->processedPlanSubjectKeys[$uniqueKey] = true;

                // 6. التحقق من وجود الربط مسبقاً في قاعدة البيانات
                $existingPlanSubject = PlanSubject::where('plan_id', $plan->id)
                    ->where('subject_id', $subject->id)
                    // ->where('plan_level', $level)
                    // ->where('plan_semester', $semester)
                    ->first();


                if ($existingPlanSubject) {

                    // *************************************************************************
                    if ($existingPlanSubject->plan_level != $level || $existingPlanSubject->plan_semester != $semester) {
                        // dd([
                        //     'planIdentifier' => $planIdentifier,
                        //     'levelInput' => $levelInput,
                        //     'semesterInput' => $semesterInput,
                        //     'subjectIdentifier' => $subjectIdentifier,
                        //     'existingPlanSubject' => $existingPlanSubject,
                        // ]);
                        // تحديث المستوى والفصل
                        $existingPlanSubject->update([
                            'plan_level' => $level,
                            'plan_semester' => $semester,
                        ]);
                        $this->updatedCount++;
                        $skippedDetails[] = "Row {$currentRowNumber} (SubjID:{$subject->id}): Updated level/semester in plan '{$plan->plan_no}'.";
                    } else {
                        // dd($existingPlanSubject);
                        // نفس المادة ونفس المستوى والفصل، لا تغيير
                        $this->skippedCount++;
                        $skippedDetails[] = "Row {$currentRowNumber} (SubjID:{$subject->id}): Already exists in plan '{$plan->plan_no}' at this level/semester.";
                    }
                    // *************************************************************************

                    $this->alreadyExistedCount++;
                    // لا نسجلها في skippedDetails إلا إذا أردت
                } else {
                    PlanSubject::create([
                        'plan_id'       => $plan->id,
                        'subject_id'    => $subject->id,
                        'plan_level'    => $level,
                        'plan_semester' => $semester,
                    ]);
                    $this->createdCount++;
                }
            } // نهاية حلقة الصفوف

            // بناء رسالة النجاح
            $messages = [];
            if ($this->createdCount > 0) $messages[] = "{$this->createdCount} new subject(s) added to plan '{$plan->plan_no}'.";
            if ($this->alreadyExistedCount > 0) $messages[] = "{$this->alreadyExistedCount} subject(s) were already assigned and unchanged.";
            if ($this->invalidPlanCount > 0) $messages[] = "{$this->invalidPlanCount} row(s) were skipped (did not match current plan).";
            if ($this->skippedCount > 0) $messages[] = "{$this->skippedCount} other row(s) were skipped (empty or invalid data).";

            if (empty($messages)) {
                return redirect()->route('data-entry.plans.manageSubjects', $plan->id)->with('info', 'Excel file processed. No changes made or no valid data found.');
            } else {
                return redirect()->route('data-entry.plans.manageSubjects', $plan->id)->with('success', implode(' ', $messages))->with('skipped_details', $this->skippedDetails);
            }
        } catch (Exception $e) {
            Log::error('Plan Subjects Excel Import Failed for Plan ID ' . $plan->id . ': ' . $e->getMessage() . ' at ' . $e->getFile() . ':' . $e->getLine());
            return redirect()->route('data-entry.plans.manageSubjects', $plan->id)
                ->with('error', 'An error occurred during Excel import: ' . $e->getMessage());
        }
    }

    /**
     * Helper function to get column index by trying multiple possible header names.
     */
    private function getColumnIndex(array $header, array $possibleNames)
    {
        foreach ($possibleNames as $name) {
            $name = strtolower(str_replace(' ', '', $name)); // تطبيع الاسم للبحث
            $index = array_search($name, array_map(fn($h) => strtolower(str_replace(' ', '', $h)), $header));
            if ($index !== false) {
                return $index;
            }
        }
        return null;
    }

    /**
     * Helper function to normalize level/semester input.
     */
    private function normalizeLevelOrSemester($input)
    {
        if (is_numeric($input)) {
            return (int) $input;
        }
        $inputLower = strtolower(trim($input));
        $map = [
            'أولى' => 1,
            'سنة أولى' => 1,
            'سنه أولى' => 1,
            'سنة اولى' => 1,
            'سنه اولى' => 1,
            'اولى' => 1,
            'first' => 1,
            'First' => 1,
            '1st' => 1,
            'one' => 1,
            '1' => 1,
            'ثانية' => 2,
            'ثانيه' => 2,
            'second' => 2,
            '2nd' => 2,
            'two' => 2,
            '2' => 2,
            'ثانية' => 2,
            'سنة ثانية' => 2,
            'سنه ثانية' => 2,
            'سنة ثانيه' => 2,
            'سنه ثانيه' => 2,
            'ثانيه' => 2,
            'second' => 2,
            'Second' => 2,
            '2nd' => 2,
            'two' => 2,
            '2' => 2,
            'ثالثة' => 3,
            'ثالثه' => 3,
            'third' => 3,
            '3rd' => 3,
            'three' => 3,
            '3' => 3,
            'ثالثة' => 3,
            'سنة ثانية' => 3,
            'سنه ثالثة' => 3,
            'سنة ثالثه' => 3,
            'سنه ثالثه' => 3,
            'ثانيه' => 3,
            'third' => 3,
            'Third' => 3,
            '3rd' => 3,
            'three' => 3,
            '3' => 3,
            'رابعة' => 4,
            'رابعه' => 4,
            'fourth' => 4,
            '4th' => 4,
            'four' => 4,
            '4' => 4,
            'رابعة' => 4,
            'سنة رابعة' => 4,
            'سنه رابعة' => 4,
            'سنة رابعه' => 4,
            'سنه رابعه' => 4,
            'رابعه' => 4,
            'fourth' => 4,
            'Fourth' => 4,
            '4th' => 4,
            'four' => 4,
            '4' => 4,
            // أضف المزيد حسب الحاجة للفصول والمستويات
            'فصل أول' => 1,
            'فصل اول' => 1,
            'أول' => 1,
            'اول' => 1,
            'first' => 1,
            'First' => 1,
            '1' => 1,
            'فصل ثاني' => 2,
            'فصل ثانى' => 2,
            'ثاني' => 2,
            'ثانى' => 2,
            'second' => 2,
            'Second' => 2,
            '2' => 2,
            'فصل ثالث' => 3,
            'ثالث' => 3,
            'صيفي' => 3,
            'summer' => 3,
            'third' => 3,
            'Third' => 3,
            '3' => 3,
        ];
        return $map[$inputLower] ?? (is_numeric($inputLower) ? (int)$inputLower : null);
    }

    /**
     * Helper function to find subject by ID, No, or Name.
     */
    private function findSubject($identifier)
    {
        if (is_numeric($identifier)) {
            return Subject::find($identifier);
        }
        // البحث بالكود (رقم المادة) - تجاهل حالة الأحرف
        $subject = Subject::whereRaw('LOWER(subject_no) = ?', [strtolower($identifier)])->first();
        if ($subject) {
            return $subject;
        }
        // البحث بالاسم - تجاهل حالة الأحرف والهمزات والفراغات الزائدة
        $normalizedIdentifier = $this->normalizeArabicString($identifier);
        return Subject::whereRaw('REPLACE(LOWER(subject_name), " ", "") LIKE ?', ['%' . str_replace(' ', '', $normalizedIdentifier) . '%'])
            ->orWhereRaw('LOWER(subject_name) LIKE ?', ['%' . $normalizedIdentifier . '%']) // بحث أوسع قليلاً
            ->first(); // قد تحتاج لمنطق أدق إذا كان هناك أسماء متشابهة جداً
    }

    /**
     * Helper function to normalize Arabic string (remove Alif variants, normalize spaces).
     */
    private function normalizeArabicString($string)
    {
        $string = preg_replace('/[أإآ]/u', 'ا', $string); // توحيد الألفات
        $string = preg_replace('/\s+/u', ' ', trim($string)); // إزالة الفراغات الزائدة
        return strtolower($string);
    }

    private function resetCounters()
    {
        $this->createdCount = 0;
        $this->updatedCount = 0;
        $this->skippedCount = 0;
        $this->alreadyExistedCount = 0;
        $this->invalidPlanCount = 0;
        $this->processedPlanSubjectKeys = [];
        $this->skippedDetails = [];
    }

        // =============================================
    //             API Controller Methods
    // =============================================

    /**
     * API: Handle the import of plan subjects from an Excel file for a specific plan.
     */
    public function handleApiImport(Request $request, Plan $plan) // Route Model Binding للخطة
    {
        // 1. التحقق من وجود الملف وصيغته (باستخدام Validator لـ API)
        $validator = Validator::make($request->all(), [
            'plan_subjects_excel_file' => 'required|file|mimes:xlsx,xls,csv|max:5120',
        ]);

        if ($validator->fails()) {
            return response()->json([
                'success' => false,
                'message' => 'Validation failed.',
                'errors' => $validator->errors()
            ], 422); // Unprocessable Entity
        }

        $this->resetCounters(); // إعادة تعيين العدادات

        try {
            $rows = Excel::toArray(new \stdClass(), $request->file('plan_subjects_excel_file'))[0];

            if (count($rows) <= 1) { // إذا كان الملف فارغاً أو يحتوي على العناوين فقط
                return response()->json(['success' => false, 'message' => 'Uploaded Excel file is empty or contains only a header row.'], 400);
            }

            $header = array_map('strtolower', array_map('trim', array_shift($rows)));
            $planCol = $this->getColumnIndex($header, ['plan_id', 'planid', 'plan name', 'planname', 'plan_name', 'plan_no', 'planno']);
            $levelCol = $this->getColumnIndex($header, ['plan_level', 'planlevel', 'level']);
            $semesterCol = $this->getColumnIndex($header, ['plan_semester', 'plansemester', 'semester']);
            $subjectCol = $this->getColumnIndex($header, ['subject_id', 'subjectid', 'subject_no', 'subjectno', 'subject_name', 'subjectname']);

            if (is_null($planCol) || is_null($levelCol) || is_null($semesterCol) || is_null($subjectCol)) {
                $missing = [];
                if (is_null($planCol)) $missing[] = "'plan_id' or 'plan_name' or 'plan_no'";
                if (is_null($levelCol)) $missing[] = "'plan_level' or 'planlevel' or 'level'";
                if (is_null($semesterCol)) $missing[] = "'plan_semester' or 'plansemester' or 'semester'";
                if (is_null($subjectCol)) $missing[] = "'subject_id' or 'subject_no' or 'subject_name'";
                return response()->json(['success' => false, 'message' => 'Excel file is missing required columns: ' . implode(', ', $missing)], 400);
            }

            $currentRowNumber = 1;
            foreach ($rows as $row) {
                $currentRowNumber++;
                $rowData = [];
                foreach ($header as $index => $colName) {
                    $rowData[$colName] = $row[$index] ?? null;
                }

                if (count(array_filter($row)) == 0) {
                    $this->skippedDetails[] = "Row {$currentRowNumber}: Skipped (empty).";
                    $this->skippedCount++;
                    continue;
                }

                $planIdentifier = trim($rowData[$header[$planCol]] ?? null);
                $levelInput = trim($rowData[$header[$levelCol]] ?? null);
                $semesterInput = trim($rowData[$header[$semesterCol]] ?? null);
                $subjectIdentifier = trim($rowData[$header[$subjectCol]] ?? null);

                if (empty($planIdentifier) || empty($subjectIdentifier) || empty($levelInput) || empty($semesterInput)) {
                    $this->skippedDetails[] = "Row {$currentRowNumber}: Skipped (missing core identifiers).";
                    $this->skippedCount++;
                    continue;
                }

                $planIdInFile = null;
                if (is_numeric($planIdentifier)) {
                    $planIdInFile = (int) $planIdentifier;
                } else {
                    $planNameFromFile = preg_replace('/-\s*\d{4}$/', '', $planIdentifier);
                    $foundPlan = Plan::whereRaw('LOWER(REPLACE(plan_name, " ", "")) LIKE ?', ['%' . strtolower(str_replace(' ', '', $planNameFromFile)) . '%'])
                        ->orWhereRaw('LOWER(REPLACE(plan_no, " ", "")) LIKE ?', ['%' . strtolower(str_replace(' ', '', $planIdentifier)) . '%'])
                        ->first();
                    if ($foundPlan) {
                        $planIdInFile = $foundPlan->id;
                    }
                }
                if (is_null($planIdInFile) || $planIdInFile !== $plan->id) {
                    $this->skippedDetails[] = "Row {$currentRowNumber}: Skipped (Plan '{$planIdentifier}' in file does not match current plan '{$plan->plan_no}').";
                    $this->invalidPlanCount++;
                    continue;
                }

                $level = $this->normalizeLevelOrSemester($levelInput);
                $semester = $this->normalizeLevelOrSemester($semesterInput);
                if (is_null($level) || is_null($semester) || $level < 1 || $semester < 1) {
                    $this->skippedDetails[] = "Row {$currentRowNumber}: Skipped (Invalid level '{$levelInput}' or semester '{$semesterInput}').";
                    $this->skippedCount++;
                    continue;
                }

                $subject = $this->findSubject($subjectIdentifier);
                if (!$subject) {
                    $this->skippedDetails[] = "Row {$currentRowNumber}: Skipped (Subject '{$subjectIdentifier}' not found).";
                    $this->skippedCount++;
                    continue;
                }

                $uniqueKey = $plan->id . '-' . $subject->id . '-' . $level . '-' . $semester;
                if (isset($this->processedPlanSubjectKeys[$uniqueKey])) {
                    $this->skippedDetails[] = "Row {$currentRowNumber}: Skipped (Duplicate entry for subject '{$subject->subject_no}' in this L/S within the file).";
                    $this->skippedCount++;
                    continue;
                }
                $this->processedPlanSubjectKeys[$uniqueKey] = true;

                $existingPlanSubject = PlanSubject::where('plan_id', $plan->id)
                    ->where('subject_id', $subject->id)
                    // ->where('plan_level', $level) // ** التحقق من المستوى والفصل للربط الموجود **
                    // ->where('plan_semester', $semester)
                    ->first();
                if ($existingPlanSubject) {

                    // *************************************************************************
                    if ($existingPlanSubject->plan_level != $level || $existingPlanSubject->plan_semester != $semester) {
                        // dd([
                        //     'planIdentifier' => $planIdentifier,
                        //     'levelInput' => $levelInput,
                        //     'semesterInput' => $semesterInput,
                        //     'subjectIdentifier' => $subjectIdentifier,
                        //     'existingPlanSubject' => $existingPlanSubject,
                        // ]);
                        // تحديث المستوى والفصل
                        $existingPlanSubject->update([
                            'plan_level' => $level,
                            'plan_semester' => $semester,
                        ]);
                        $this->updatedCount++;
                        $skippedDetails[] = "Row {$currentRowNumber} (SubjID:{$subject->id}): Updated level/semester in plan '{$plan->plan_no}'.";
                    } else {
                        // dd($existingPlanSubject);
                        // نفس المادة ونفس المستوى والفصل، لا تغيير
                        $this->skippedCount++;
                        $skippedDetails[] = "Row {$currentRowNumber} (SubjID:{$subject->id}): Already exists in plan '{$plan->plan_no}' at this level/semester.";
                    }
                    // *************************************************************************

                    $this->alreadyExistedCount++;
                    // لا نسجلها في skippedDetails إلا إذا أردت، لأنها ليست خطأ بالضرورة
                    // $this->skippedDetails[] = "Row {$currentRowNumber}: Subject ID {$subject->id} already exists in Plan ID {$plan->id} at L{$level}S{$semester}.";
                } else {
                    PlanSubject::create([
                        'plan_id'       => $plan->id,
                        'subject_id'    => $subject->id,
                        'plan_level'    => $level,
                        'plan_semester' => $semester,
                    ]);
                    $this->createdCount++;
                }
            }

            $summary = [];
            if ($this->createdCount > 0) $summary['new_subjects_added_to_plan'] = $this->createdCount;
            if ($this->alreadyExistedCount > 0) $summary['subjects_already_assigned_and_unchanged'] = $this->alreadyExistedCount;
            if ($this->invalidPlanCount > 0) $summary['rows_skipped_due_to_plan_mismatch'] = $this->invalidPlanCount;
            if ($this->skippedCount > 0) $summary['other_rows_skipped_or_duplicate_in_file'] = $this->skippedCount;

            if (empty($summary) && empty(array_filter($this->skippedDetails, fn($detail) => !Str::contains($detail, 'already exists')))) {
                return response()->json([
                    'success' => true,
                    'message' => 'Excel file processed. No new subjects added or all data already matched/skipped.',
                    'summary' => $summary,
                    'skipped_details' => $this->skippedDetails
                ], 200);
            }

            return response()->json([
                'success' => true,
                'message' => "Plan subjects import processed for plan '{$plan->plan_no}'.",
                'summary' => $summary,
                'skipped_details' => $this->skippedDetails
            ], 200);
        } catch (Exception $e) {
            Log::error('API Plan Subjects Excel Import Failed for Plan ID ' . $plan->id . ': ' . $e->getMessage());
            return response()->json([
                'success' => false,
                'message' => 'An error occurred during Excel import: ' . $e->getMessage()
            ], 500);
        }
    }
}
----------------------------------------------------------------------------------------------------------
app\Http\Controllers\DataEntry\RoleController.php
<?php

namespace App\Http\Controllers\DataEntry;

use App\Http\Controllers\Controller;
use App\Models\Role;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Log; // اختياري لكن مفيد للـ debugging
use Illuminate\Validation\Rule; // لاستخدام Rule::unique
use Exception;

class RoleController extends Controller
{
    // =============================================
    //            Web Controller Methods
    // =============================================

    /**
     * Display a listing of the roles (Web View) with Pagination.
     */
    public function index()
    {
        // $roles = Role::orderBy('display_name')->paginate(5); // استخدام paginate هنا
        $roles = Role::latest()->paginate(6); // استخدام paginate هنا
        return view('dashboard.data-entry.roles', compact('roles'));
    }

    /**
     * Store a newly created role from web request.
     * تخزين دور جديد قادم من طلب ويب
     */
    public function store(Request $request)
    {
        // 1. Validation
        $request->validate([
            'name' => 'required|string|max:50|unique:roles,name|alpha_dash',
            'display_name' => 'required|string|max:100',
            'description' => 'nullable|string|max:255',
        ]);

        // 2. Prepare Data
        $data = $request->only(['name', 'display_name', 'description']);
        $data['name'] = strtolower($data['name']);

        // 3. Add to Database
        try {
            Role::create($data);
            // 4. Redirect with Success Message
            return redirect()->route('data-entry.roles.index') // تأكد من اسم الروت
                ->with('success', 'Role created successfully.');
        } catch (Exception $e) {
            Log::error('Role Creation Failed (Web): ' . $e->getMessage());
            return redirect()->back()
                ->with('error', 'Failed to create role.')
                ->withInput();
        }
    }

    /**
     * Update the specified role from web request.
     * تحديث دور محدد قادم من طلب ويب
     */
    public function update(Request $request, Role $role)
    {
        // 1. Validation
        $request->validate([
            'name' => [
                'required',
                'string',
                'max:50',
                'alpha_dash',
                Rule::unique('roles')->ignore($role->id), // تجاهل الدور الحالي
            ],
            'display_name' => 'required|string|max:100',
            'description' => 'nullable|string|max:255',
        ]);

        // 2. Prepare Data
        $data = $request->only(['name', 'display_name', 'description']);
        $data['name'] = strtolower($data['name']);

        // (اختياري) منع تعديل اسم النظام للأدوار الأساسية
        // $coreRoles = ['admin', 'hod', 'instructor', 'student'];
        // if (in_array($role->name, $coreRoles) && $role->name !== $data['name']) {
        //     return redirect()->back()
        //                      ->with('error', 'Cannot change the system name of core roles.')
        //                      ->withInput();
        // }


        // 3. Update Database
        try {
            $role->update($data);
            // 4. Redirect
            return redirect()->route('data-entry.roles.index') // تأكد من اسم الروت
                ->with('success', 'Role updated successfully.');
        } catch (Exception $e) {
            Log::error('Role Update Failed (Web): ' . $e->getMessage());
            return redirect()->back()
                ->with('error', 'Failed to update role.')
                ->withInput();
        }
    }

    /**
     * Remove the specified role from web request.
     * حذف دور محدد قادم من طلب ويب
     */
    public function destroy(Role $role)
    {
        // التحقق إذا كان هناك مستخدمون مرتبطون بهذا الدور
        if ($role->users()->exists()) {
            return redirect()->route('data-entry.roles.index') // تأكد من اسم الروت
                ->with('error', 'Cannot delete role. Users are assigned to this role.');
        }

        // (اختياري) منع حذف الأدوار الأساسية
        // $coreRoles = ['admin', 'hod', 'instructor', 'student'];
        // if (in_array($role->name, $coreRoles)) {
        //     return redirect()->route('data-entry.roles.index')
        //                      ->with('error', 'Cannot delete core system roles.');
        // }

        // 1. Delete from Database
        try {
            $role->delete();
            // 2. Redirect
            return redirect()->route('data-entry.roles.index') // تأكد من اسم الروت
                ->with('success', 'Role deleted successfully.');
        } catch (Exception $e) {
            Log::error('Role Deletion Failed (Web): ' . $e->getMessage());
            return redirect()->route('data-entry.roles.index') // تأكد من اسم الروت
                ->with('error', 'Failed to delete role.');
        }
    }

    // =============================================
    //             API Controller Methods
    // =============================================

    /**
     * Display a listing of the roles (API).
     * عرض قائمة الأدوار للـ API
     */
    public function apiIndex(Request $request) // إضافة Request للتحكم بالـ Pagination
    {
        try {
            $roles = Role::latest('id')->get();

            return response()->json([
                'success' => true,
                'data' => $roles
            ], 200);
        } catch (Exception $e) {
            Log::error('API Error fetching roles: ' . $e->getMessage());
            return response()->json(['success' => false, 'message' => 'Server Error'], 500);
        }
    }

    /**
     * Store a newly created role from API request.
     */
    public function apiStore(Request $request)
    {
        // 1. Validation
        $validatedData = $request->validate([
            'name' => 'required|string|max:50|unique:roles,name|alpha_dash',
            'display_name' => 'required|string|max:100',
            'description' => 'nullable|string|max:255',
        ]);
        // $validatedData['name'] = strtolower($validatedData['name']);

        // 2. Add to Database
        try {
            $role = Role::create($validatedData);
            // 3. Return Success JSON Response
            return response()->json([
                'success' => true,
                'data' => $role,
                'message' => 'Role created successfully.'
            ], 201); // 201 Created
        } catch (Exception $e) {
            Log::error('API Role Creation Failed: ' . $e->getMessage());
            return response()->json(['success' => false, 'message' => 'Failed to create role.'], 500);
        }
    }

    /**
     * Display the specified role (API).
     */
    public function apiShow(Role $role)
    {
        // dd($role->name);
        return response()->json([
            'success' => true,
            'data' => $role,
        ], 200);
    }
    // Route::get('/role/{id}', [RoomController::class, 'apiShow']);
    // public function apiShow($id) // <-- تستقبل الـ ID فقط (كـ string أو int)
    // {
    //     // تحتاج للبحث عن الموديل يدوياً
    //     $role = Role::find($id); // أو findOrFail($id)

    //     if (!$role) {
    //         return response()->json(['success' => false, 'message' => 'Role not found.'], 404);
    //     }

    //     return response()->json(['success' => true, 'data' => $role], 200);
    // }


    /**
     * Update the specified role from API request.
     */
    public function apiUpdate(Request $request, Role $role)
    {
        // 1. Validation
        $validatedData = $request->validate([
            'name' => [
                'sometimes', // فقط تحقق إذا تم إرسال الحقل
                'required',
                'string',
                'max:50',
                'alpha_dash',
                Rule::unique('roles')->ignore($role->id),
            ],
            'display_name' => 'sometimes|required|string|max:100',
            'description' => 'sometimes|nullable|string|max:255',
        ]);

        // if (isset($validatedData['name'])) {
        //     $validatedData['name'] = strtolower($validatedData['name']);
        // }

        // 2. Update Database
        try {
            $role->update($validatedData);
            // 3. Return Success JSON Response
            return response()->json([
                'success' => true,
                'data' => $role, // إرجاع الدور المحدث
                'message' => 'Role updated successfully.'
            ], 200);
        } catch (Exception $e) {
            Log::error('API Role Update Failed: ' . $e->getMessage());
            return response()->json(['success' => false, 'message' => 'Failed to update role.'], 500);
        }
    }

    /**
     * Remove the specified role from API request.
     */
    public function apiDestroy(Role $role)
    {
        // التحقق من المستخدمين المرتبطين
        if ($role->users()->exists()) {
            return response()->json([
                'success' => false,
                'message' => 'Cannot delete role. Users are assigned.'
            ], 409); // 409 Conflict
        }

        // 1. Delete from Database
        try {
            $role->delete();
            // 2. Return Success JSON Response
            return response()->json([
                'success' => true,
                'message' => 'Role deleted successfully.'
            ], 200);
        } catch (Exception $e) {
            Log::error('API Role Deletion Failed: ' . $e->getMessage());
            return response()->json(['success' => false, 'message' => 'Failed to delete role.'], 500);
        }
    }
}
-----------------------------------------------------------------------------------------------------------
app\Http\Controllers\DataEntry\RoomController.php
<?php

namespace App\Http\Controllers\DataEntry;

use App\Http\Controllers\Controller;
use App\Models\Room;
use App\Models\RoomType;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Log;
use Illuminate\Validation\Rule;
use Maatwebsite\Excel\Facades\Excel;
use Exception;
use Illuminate\Support\Facades\Validator;

class RoomController extends Controller
{
    // =============================================
    //            Web Controller Methods
    // =============================================

    /**
     * Display a listing of the rooms (Web View) with Pagination.
     */
    public function index()
    {
        try {
            // جلب القاعات مرتبة بالأحدث مع نوعها وتقسيم الصفحات
            $rooms = Room::with('roomType')->latest()->paginate(15);

            // جلب أنواع القاعات للـ dropdown في نموذج الإضافة/التعديل
            $roomTypes = RoomType::orderBy('room_type_name')->get();

            return view('dashboard.data-entry.rooms', compact('rooms', 'roomTypes'));
        } catch (Exception $e) {
            Log::error('Error fetching rooms for web view: ' . $e->getMessage());
            return redirect()->back()->with('error', 'Could not load rooms.');
        }
    }

    /**
     * Store a newly created room from web request.
     */
    public function store(Request $request)
    {
        // 1. Validation
        $data = $request->validate([
            'room_no' => 'required|string|max:20|unique:rooms,room_no',
            'room_name' => 'nullable|string|max:255',
            'room_type_id' => 'required|integer|exists:rooms_types,id',
            'room_size' => 'required|integer|min:1',
            'room_gender' => ['required', Rule::in(['Male', 'Female', 'Mixed'])],
            'room_branch' => 'nullable|string|max:100',
            // 'equipment' => 'nullable|array', // يجب أن يكون مصفوفة إذا تم إرساله
            // 'equipment.*' => 'nullable|string|max:50', // التحقق من كل عنصر
        ]);

        // 2. Prepare Data (تحويل equipment إلى JSON)
        // نستخدم validated() لجلب البيانات التي تم التحقق منها فقط
        // $data = $request->validated();
        // $data['equipment'] = isset($data['equipment']) ? json_encode($data['equipment']) : null;


        // 3. Add to Database
        try {
            Room::create($data);
            // 4. Redirect
            return redirect()->route('data-entry.rooms.index') // تأكد من اسم الروت
                ->with('success', 'Classroom created successfully.');
        } catch (Exception $e) {
            Log::error('Room Creation Failed (Web): ' . $e->getMessage());
            return redirect()->back()
                ->with('error', 'Failed to create classroom.')
                ->withInput();
        }
    }

    /**
     * Update the specified room from web request.
     */
    public function update(Request $request, Room $room)
    {
        // 1. Validation
        $data = $request->validate([
            'room_no' => 'required|string|max:20|unique:rooms,room_no,' . $room->id,
            'room_name' => 'nullable|string|max:255',
            'room_type_id' => 'required|integer|exists:rooms_types,id',
            'room_size' => 'required|integer|min:1',
            'room_gender' => ['required', Rule::in(['Male', 'Female', 'Mixed'])],
            'room_branch' => 'nullable|string|max:100',
            // 'equipment' => 'nullable|array', // السماح بإرسال مصفوفة فارغة أو null
            // 'equipment.*' => 'nullable|string|max:50',
        ]);

        // 2. Prepare Data for Update (تحويل equipment)
        // $data = $request->validated();
        // التحويل إلى JSON فقط إذا كان equipment موجوداً في الطلب
        // إذا لم يتم إرسال equipment، لن يتم تحديثه في $data
        // if ($request->has('equipment')) {
        //      $data['equipment'] = isset($data['equipment']) ? json_encode($data['equipment']) : null; // null إذا كانت المصفوفة فارغة أو لم يتم إرسالها
        // }


        // 3. Update Database
        try {
            $room->update($data);
            // 4. Redirect
            return redirect()->route('data-entry.rooms.index') // تأكد من اسم الروت
                ->with('success', 'Classroom updated successfully.');
        } catch (Exception $e) {
            Log::error('Room Update Failed (Web): ' . $e->getMessage());
            return redirect()->back()
                ->with('error', 'Failed to update classroom.')
                ->withInput();
        }
    }

    /**
     * Remove the specified room from web request.
     */
    public function destroy(Room $room)
    {
        // (اختياري) التحقق من السجلات المرتبطة
        // if ($room->scheduleEntries()->exists()) { ... }

        // 1. Delete from Database
        try {
            $room->delete();
            // 2. Redirect
            return redirect()->route('data-entry.rooms.index') // تأكد من اسم الروت
                ->with('success', 'Classroom deleted successfully.');
        } catch (Exception $e) {
            Log::error('Room Deletion Failed (Web): ' . $e->getMessage());
            return redirect()->route('data-entry.rooms.index') // تأكد من اسم الروت
                ->with('error', 'Failed to delete classroom.');
        }
    }
   public function bulkUpload(Request $request)
    {
        $request->validate([
            'room_excel_file' => 'required|file|mimes:xlsx,xls,csv|max:2048',
        ], [], ['room_excel_file' => 'Excel file']);

        try {
            $rows = Excel::toCollection(collect(), $request->file('room_excel_file'))->first();

            if ($rows->isEmpty() || $rows->count() <= 1) {
                return redirect()->route('data-entry.rooms.index')
                    ->with('error', 'Uploaded Excel file is empty or has no data rows.');
            }

            $createdCount = 0;
            $updatedCount = 0;
            $skippedCount = 0;
            $skippedDetails = [];
            $processedRoomNos = collect(); // لتتبع room_no التي تمت معالجتها من الملف

            $header = $rows->first()->map(fn($item) => strtolower(str_replace(' ', '_', $item ?? '')));
            $dataRows = $rows->slice(1);

            foreach ($dataRows as $rowKey => $rowArray) {
                $row = $header->combine($rowArray->map(fn($val) => trim($val ?? '')));
                $currentRowNumber = $rowKey + 2;

                $roomNo = $row->get('room_no');
                $roomName = $row->get('room_name');
                $roomSize = $row->get('room_size');
                $roomGender = $row->get('room_gender'); // سيتم التحقق منه
                $roomBranch = $row->get('room_branch');
                $roomTypeId = $row->get('room_type_id');
                // $equipment = $row->get('equipment'); // معطل حالياً

                // 1. تجاهل الأسطر الفارغة (إذا كان room_no فارغاً)
                if (empty($roomNo)) {
                    $skippedCount++;
                    $skippedDetails[] = "Row {$currentRowNumber}: Skipped because room_no is empty.";
                    continue;
                }

                // 2. (اختياري) تجاهل الأسطر المدمجة (نفس منطق الفارغة إذا لم تكن البيانات الأساسية موجودة)

                // 4. فحص التكرار داخل الملف نفسه بناءً على room_no
                if ($processedRoomNos->contains($roomNo)) {
                    $skippedCount++;
                    $skippedDetails[] = "Row {$currentRowNumber}: Skipped duplicate room_no '{$roomNo}' from within this file.";
                    continue;
                }

                // التحقق من صحة البيانات المدخلة للسطر الحالي
                $rowData = [
                    'room_no' => $roomNo,
                    'room_name' => $roomName,
                    'room_size' => $roomSize,
                    'room_gender' => $roomGender,
                    'room_branch' => $roomBranch,
                    'room_type_id' => $roomTypeId,
                    // 'equipment' => $equipment, // معطل
                ];

                $rowValidator = Validator::make($rowData, [
                    'room_no' => 'required|string|max:20', // لا نتحقق من unique هنا لأننا سنقوم بـ updateOrCreate
                    'room_name' => 'nullable|string|max:255',
                    'room_size' => 'required|integer|min:1',
                    'room_gender' => ['required', Rule::in(['Male', 'Female', 'Mixed', 'مختلط', 'ذكور', 'إناث'])], // إضافة القيم العربية المحتملة
                    'room_branch' => 'nullable|string|max:100',
                    'room_type_id' => 'required|integer|exists:rooms_types,id',
                    // 'equipment' => 'nullable|string', // إذا كان نصاً مفصولاً بفواصل، أو array إذا كان Excel يدعم
                ]);

                if ($rowValidator->fails()) {
                    $skippedCount++;
                    $errors = implode(', ', $rowValidator->errors()->all());
                    $skippedDetails[] = "Row {$currentRowNumber} (RoomNo: {$roomNo}): Skipped due to validation errors - {$errors}";
                    continue;
                }

                // تحويل القيم العربية لـ room_gender إلى الإنجليزية
                $genderMapping = ['مختلط' => 'Mixed', 'ذكور' => 'Male', 'إناث' => 'Female'];
                $englishGender = $genderMapping[strtolower($roomGender)] ?? ucfirst(strtolower($roomGender)); // تحويل + قيمة افتراضية
                if (!in_array($englishGender, ['Male', 'Female', 'Mixed'])) {
                    $skippedCount++;
                    $skippedDetails[] = "Row {$currentRowNumber} (RoomNo: {$roomNo}): Skipped due to invalid room_gender value '{$roomGender}'.";
                    continue;
                }
                $validatedRowData = $rowValidator->validated();
                $validatedRowData['room_gender'] = $englishGender;

                // إذا كان equipment مفعلاً ويأتي كنص مفصول بفواصل
                // if (isset($validatedRowData['equipment']) && is_string($validatedRowData['equipment'])) {
                //     $validatedRowData['equipment'] = json_encode(array_map('trim', explode(',', $validatedRowData['equipment'])));
                // } else {
                //     $validatedRowData['equipment'] = null;
                // }


                // 3. البحث عن القاعة في قاعدة البيانات وتحديثها أو إنشاؤها
                // updateOrCreate تبحث عن سجل بالـ room_no، إذا وجدته تحدثه، وإلا تنشئ جديداً
                $room = Room::updateOrCreate(
                    ['room_no' => $validatedRowData['room_no']], // الشرط للبحث
                    [ // البيانات للتحديث أو الإنشاء
                        'room_name' => $validatedRowData['room_name'],
                        'room_size' => $validatedRowData['room_size'],
                        'room_gender' => $validatedRowData['room_gender'],
                        'room_branch' => $validatedRowData['room_branch'],
                        'room_type_id' => $validatedRowData['room_type_id'],
                        // 'equipment' => $validatedRowData['equipment'], // معطل
                    ]
                );

                if ($room->wasRecentlyCreated) {
                    $createdCount++;
                } elseif ($room->wasChanged()) { // للتحقق إذا تم تحديث أي حقل فعلاً
                    $updatedCount++;
                } else {
                    // لم يتم إنشاؤه ولم يتغير (موجود بنفس البيانات)
                    $skippedCount++;
                    $skippedDetails[] = "Row {$currentRowNumber} (RoomNo: {$roomNo}): Data already up-to-date.";
                }
                $processedRoomNos->push($roomNo);
            }

            $message = "Classrooms bulk upload processed. ";
            if ($createdCount > 0) $message .= "{$createdCount} new classrooms created. ";
            if ($updatedCount > 0) $message .= "{$updatedCount} classrooms updated. ";
            if ($skippedCount > 0) $message .= "{$skippedCount} rows skipped. ";

            if (!empty($skippedDetails)) {
                session()->flash('skipped_details', $skippedDetails);
            }

            return redirect()->route('data-entry.rooms.index')->with('success', trim($message));
        } catch (Exception $e) {
            Log::error('Room Bulk Upload Failed: ' . $e->getMessage() . ' at ' . $e->getFile() . ':' . $e->getLine());
            return redirect()->route('data-entry.rooms.index')
                ->with('error', 'An error occurred during bulk upload: ' . $e->getMessage());
        }
    }


    // =============================================
    //             API Controller Methods
    // =============================================

    /**
     * Display a listing of the rooms (API).
     */
    public function apiIndex(Request $request)
    {
        try {
            $query = Room::with('roomType:id,room_type_name');

            $rooms = $query->latest()->get(); // الترتيب بالأحدث

            // Pagination للـ API (معطل حالياً)
            /*
            $perPage = $request->query('per_page', 15);
            $roomsPaginated = $query->latest('id')->paginate($perPage);

            return response()->json([
                'success' => true,
                'data' => $roomsPaginated->items(),
                'pagination' => [
                    'total' => $roomsPaginated->total(),
                    'per_page' => $roomsPaginated->perPage(),
                    'current_page' => $roomsPaginated->currentPage(),
                    'last_page' => $roomsPaginated->lastPage(),
                ]
            ], 200);
            */
            // --- نهاية كود الـ Pagination المعطل ---


            return response()->json(['success' => true, 'data' => $rooms], 200);
        } catch (Exception $e) {
            Log::error('API Error fetching rooms: ' . $e->getMessage());
            return response()->json(['success' => false, 'message' => 'Server Error'], 500);
        }
    }

    /**
     * Store a newly created room from API request.
     */
    public function apiStore(Request $request)
    {
        // 1. Validation
        $validatedData = $request->validate([
            'room_no' => 'required|string|max:20|unique:rooms,room_no',
            'room_name' => 'nullable|string|max:255',
            'room_type_id' => 'required|integer|exists:rooms_types,id',
            'room_size' => 'required|integer|min:1',
            'room_gender' => ['required', Rule::in(['Male', 'Female', 'Mixed'])],
            'room_branch' => 'nullable|string|max:100',
            // 'equipment' => 'nullable|array',
            // 'equipment.*' => 'nullable|string|max:50',
        ]);

        // 2. Prepare Data (تحويل equipment)
        $data = $validatedData;
        // $data['equipment'] = isset($data['equipment']) ? json_encode($data['equipment']) : null;

        // 3. Add to Database
        try {
            $room = Room::create($data);
            $room->load('roomType:id,room_type_name'); // تحميل العلاقة للـ response
            return response()->json([
                'success' => true,
                'data' => $room,
                'message' => 'Classroom created successfully.'
            ], 201);
        } catch (Exception $e) {
            Log::error('API Room Creation Failed: ' . $e->getMessage());
            return response()->json(['success' => false, 'message' => 'Failed to create classroom.'], 500);
        }
    }

    /**
     * Display the specified room (API).
     */
    public function apiShow(Room $room)
    {
        $room->load('roomType');
        // $room->load('roomType:id,room_type_name');
        return response()->json(['success' => true, 'data' => $room], 200);
    }

    /**
     * Update the specified room from API request.
     */
    public function apiUpdate(Request $request, Room $room)
    {
        // 1. Validation
        $data = $request->validate([
            'room_no' => [
                'sometimes',
                'required',
                'string',
                'max:20',
                'unique:rooms,room_no,' . $room->id,
            ],
            'room_name' => 'sometimes|nullable|string|max:255',
            'room_type_id' => 'sometimes|required|integer|exists:rooms_types,id',
            'room_size' => 'sometimes|required|integer|min:1',
            'room_gender' => ['sometimes', 'required', Rule::in(['Male', 'Female', 'Mixed'])],
            'room_branch' => 'sometimes|nullable|string|max:100',
            // 'equipment' => 'sometimes|nullable|array', // السماح بإرسال null أو مصفوفة فارغة
            // 'equipment.*' => 'nullable|string|max:50',
        ]);

        // 2. Prepare Data for Update
        // $data = $validatedData;
        // التحديث الشرطي للـ equipment
        // if ($request->has('equipment')) {
        //      $data['equipment'] = isset($validatedData['equipment']) ? json_encode($validatedData['equipment']) : null;
        // }

        // 3. Update Database
        try {
            $room->update($data);
            $room->load('roomType:id,room_type_name'); // تحميل العلاقة بعد التحديث

            return response()->json([
                'success' => true,
                'data' => $room,
                'message' => 'Classroom updated successfully.'
            ], 200);
        } catch (Exception $e) {
            Log::error('API Room Update Failed: ' . $e->getMessage());
            return response()->json(['success' => false, 'message' => 'Failed to update classroom.'], 500);
        }
    }

    /**
     * Remove the specified room from API request.
     */
    public function apiDestroy(Room $room)
    {
        // (اختياري) التحقق من السجلات المرتبطة
        // if ($room->scheduleEntries()->exists()) { ... }

        // 1. Delete from Database
        try {
            $room->delete();
            // 2. Return Success JSON Response
            return response()->json([
                'success' => true,
                'message' => 'Classroom deleted successfully.'
            ], 200);
        } catch (Exception $e) {
            Log::error('API Room Deletion Failed: ' . $e->getMessage());
            return response()->json(['success' => false, 'message' => 'Failed to delete classroom.'], 500);
        }
    }

    /**
     * Handle bulk upload of rooms from Excel file via API.
     */
    public function apiBulkUpload(Request $request)
    {
        // 1. التحقق من الملف المرفوع (نفس الويب)
        $validator = Validator::make($request->all(), [
            'room_excel_file' => 'required|file|mimes:xlsx,xls,csv|max:2048', // اسم الحقل كما في Postman
        ], [], ['room_excel_file' => 'Excel file']);

        if ($validator->fails()) {
            return response()->json([
                'success' => false,
                'message' => 'Validation failed for uploaded file.',
                'errors' => $validator->errors()
            ], 422); // Unprocessable Entity
        }

        try {
            // 2. قراءة البيانات من ملف الإكسل (نفس الويب)
            $rows = Excel::toCollection(collect(), $request->file('room_excel_file'))->first();

            if ($rows->isEmpty() || $rows->count() <= 1) {
                return response()->json([
                    'success' => false,
                    'message' => 'The uploaded Excel file is empty or contains no data rows after the header.'
                ], 400); // Bad Request
            }

            $createdCount = 0;
            $updatedCount = 0;
            $skippedCount = 0;
            $skippedDetails = [];
            $processedRoomNos = collect();

            $header = $rows->first()->map(fn($item) => strtolower(str_replace(' ', '_', $item ?? '')));
            $dataRows = $rows->slice(1);

            foreach ($dataRows as $rowKey => $rowArray) {
                $row = $header->combine($rowArray->map(fn($val) => trim($val ?? '')));
                $currentRowNumber = $rowKey + 2;

                $roomNo = $row->get('room_no'); // يجب أن يكون اسم العمود في الإكسل room_no
                // ... (جلب باقي الحقول بنفس الطريقة)
                $roomName = $row->get('room_name');
                $roomSize = $row->get('room_size');
                $roomGender = $row->get('room_gender');
                $roomBranch = $row->get('room_branch');
                $roomTypeId = $row->get('room_type_id');

                // 1. تجاهل الأسطر الفارغة (إذا كان room_no فارغاً)
                if (empty($roomNo)) {
                    $skippedCount++;
                    $skippedDetails[] = "Row {$currentRowNumber}: Skipped because room_no is empty.";
                    continue;
                }
                // 2. فحص التكرار داخل الملف نفسه
                if ($processedRoomNos->contains($roomNo)) {
                    $skippedCount++;
                    $skippedDetails[] = "Row {$currentRowNumber}: Skipped duplicate room_no '{$roomNo}' from within this file.";
                    continue;
                }

                // التحقق من صحة بيانات السطر
                $rowDataForValidation = [
                    'room_no' => $roomNo,
                    'room_name' => $roomName,
                    'room_size' => $roomSize,
                    'room_gender' => $roomGender,
                    'room_branch' => $roomBranch,
                    'room_type_id' => $roomTypeId,
                ];
                $rowValidator = Validator::make($rowDataForValidation, [
                    'room_no' => 'required|string|max:20',
                    'room_name' => 'nullable|string|max:255',
                    'room_size' => 'required|integer|min:1',
                    'room_gender' => ['required', Rule::in(['Male', 'Female', 'Mixed', 'مختلط', 'ذكور', 'إناث'])],
                    'room_branch' => 'nullable|string|max:100',
                    'room_type_id' => 'required|integer|exists:rooms_types,id',
                ]);

                if ($rowValidator->fails()) {
                    $skippedCount++;
                    $errors = implode(', ', $rowValidator->errors()->all());
                    $skippedDetails[] = "Row {$currentRowNumber} (RoomNo: {$roomNo}): Skipped - {$errors}";
                    continue;
                }
                $validatedRowData = $rowValidator->validated();
                $genderMapping = ['مختلط' => 'Mixed', 'ذكور' => 'Male', 'إناث' => 'Female'];
                $validatedRowData['room_gender'] = $genderMapping[strtolower($validatedRowData['room_gender'])] ?? ucfirst(strtolower($validatedRowData['room_gender']));
                if (!in_array($validatedRowData['room_gender'], ['Male', 'Female', 'Mixed'])) {
                    $skippedCount++;
                    $skippedDetails[] = "Row {$currentRowNumber}: Invalid gender value '{$roomGender}'.";
                    continue;
                }

                // 3. البحث والتحديث/الإنشاء
                $room = Room::updateOrCreate(
                    ['room_no' => $validatedRowData['room_no']],
                    [
                        'room_name' => $validatedRowData['room_name'],
                        'room_size' => $validatedRowData['room_size'],
                        'room_gender' => $validatedRowData['room_gender'],
                        'room_branch' => $validatedRowData['room_branch'],
                        'room_type_id' => $validatedRowData['room_type_id'],
                        // 'equipment' => null, // إذا كنت ستضيفه لاحقاً
                    ]
                );

                if ($room->wasRecentlyCreated) {
                    $createdCount++;
                } elseif ($room->wasChanged()) {
                    $updatedCount++;
                } else {
                    $skippedCount++;
                    $skippedDetails[] = "Row {$currentRowNumber} (RoomNo: {$roomNo}): Data already up-to-date.";
                }
                $processedRoomNos->push($roomNo);
            }

            // 4. بناء الاستجابة
            $summaryMessage = "Classrooms bulk upload processed via API.";
            $responseData = [
                'created_count' => $createdCount,
                'updated_count' => $updatedCount,
                'skipped_count' => $skippedCount,
                'skipped_details' => $skippedDetails,
            ];

            return response()->json([
                'success' => true,
                'message' => $summaryMessage,
                'data' => $responseData
            ], 200); // OK

        } catch (Exception $e) {
            Log::error('API Room Bulk Upload Failed: ' . $e->getMessage() . ' at ' . $e->getFile() . ':' . $e->getLine());
            return response()->json([
                'success' => false,
                'message' => 'An error occurred during API bulk upload.',
                'error_details' => $e->getMessage() // للمطور
            ], 500); // Internal Server Error
        }
    }
}
--------------------------------------------------------------------------------------------------------
app\Http\Controllers\DataEntry\RoomTypeController.php
<?php

namespace App\Http\Controllers\DataEntry;

use App\Http\Controllers\Controller;
use App\Models\RoomType; // تم استيراده
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Log;
use Illuminate\Validation\Rule;
use Maatwebsite\Excel\Facades\Excel;
use Exception;
use Illuminate\Support\Facades\Validator;

class RoomTypeController extends Controller
{
    // =============================================
    //            Web Controller Methods
    // =============================================

    /**
     * Display a listing of the room types.
     */
    public function index()
    {
        try {
            // تغيير اسم المتغير والموديل والـ view
            $roomTypes = RoomType::latest('id')->paginate(15);
            return view('dashboard.data-entry.room-types', compact('roomTypes'));
        } catch (Exception $e) {
            Log::error('Error fetching room types: ' . $e->getMessage());
            return redirect()->back()->with('error', 'Could not load room types.');
        }
    }

    /**
     * Store a newly created room type in storage.
     */
    public function store(Request $request)
    {
        // 1. Validation (تغيير اسم الحقل والجدول)
        $validatedData = $request->validate([
            'room_type_name' => 'required|string|max:100|unique:rooms_types,room_type_name',
        ]);

        // 2. Prepare Data
        $data = $validatedData;

        // 3. Add to Database
        try {
            RoomType::create($data);
            // 4. Redirect (تغيير الـ route والرسالة)
            return redirect()->route('data-entry.room-types.index')
                ->with('success', 'Room Type created successfully.');
        } catch (Exception $e) {
            Log::error('Room Type Creation Failed: ' . $e->getMessage());
            return redirect()->back()
                ->with('error', 'Failed to create room type.')
                ->withInput();
        }
    }

    /**
     * Update the specified room type in storage.
     */
    public function update(Request $request, RoomType $roomType) // تغيير المتغير
    {
        // 1. Validation (تغيير اسم الحقل والجدول والمتغير)
        $validatedData = $request->validate([
            'room_type_name' => [
                'required',
                'string',
                'max:100',
                Rule::unique('rooms_types')->ignore($roomType->id),
            ],
        ]);

        // 2. Prepare Data
        $data = $validatedData;

        // 3. Update Database
        try {
            $roomType->update($data);
            // 4. Redirect (تغيير الـ route والرسالة)
            return redirect()->route('data-entry.room-types.index')
                ->with('success', 'Room Type updated successfully.');
        } catch (Exception $e) {
            Log::error('Room Type Update Failed: ' . $e->getMessage());
            return redirect()->back()
                ->with('error', 'Failed to update room type.')
                ->withInput();
        }
    }

    /**
     * Remove the specified room type from storage.
     */
    public function destroy(RoomType $roomType) // تغيير المتغير
    {
        // التحقق من القاعات المرتبطة
        if ($roomType->rooms()->exists()) {
            return redirect()->route('data-entry.room-types.index')
                ->with('error', 'Cannot delete room type. It is assigned to rooms.');
        }

        // 1. Delete
        try {
            $roomType->delete();
            // 2. Redirect (تغيير الـ route والرسالة)
            return redirect()->route('data-entry.room-types.index')
                ->with('success', 'Room Type deleted successfully.');
        } catch (Exception $e) {
            Log::error('Room Type Deletion Failed: ' . $e->getMessage());
            return redirect()->route('data-entry.room-types.index')
                ->with('error', 'Failed to delete room type.');
        }
    }

    /**
     * Handle bulk upload of room types from Excel file.
     */
    public function bulkUpload(Request $request)
    {
        $request->validate([
            'room_type_excel_file' => 'required|file|mimes:xlsx,xls,csv|max:2048',
        ], [], ['room_type_excel_file' => 'Excel file']);

        try {
            $rows = Excel::toCollection(collect(), $request->file('room_type_excel_file'))->first();

            if ($rows->isEmpty() || $rows->count() <= 1) {
                return redirect()->route('data-entry.room-types.index')
                    ->with('error', 'Uploaded Excel file is empty or has no data rows.');
            }

            $createdCount = 0;
            $skippedCount = 0;
            $skippedDetails = [];
            $processedNames = collect(); // لتتبع الأسماء التي تمت معالجتها من الملف

            $header = $rows->first()->map(fn($item) => strtolower(str_replace(' ', '_', $item ?? '')));
            $dataRows = $rows->slice(1);

            foreach ($dataRows as $rowKey => $rowArray) {
                $row = $header->combine($rowArray->map(fn($val) => trim($val ?? '')));
                $currentRowNumber = $rowKey + 2;

                $roomTypeName = $row->get('room_type_name', ''); // القيمة من عمود B (أو اسم العمود بعد تحويله لـ snake_case)

                // 1. تجاهل الأسطر الفارغة
                if (empty($roomTypeName)) {
                    $skippedCount++;
                    $skippedDetails[] = "Row {$currentRowNumber}: Skipped because room_type_name is empty.";
                    continue;
                }

                // 2. فحص التكرار داخل الملف نفسه
                if ($processedNames->contains($roomTypeName)) {
                    $skippedCount++;
                    $skippedDetails[] = "Row {$currentRowNumber}: Skipped duplicate room_type_name '{$roomTypeName}' from within this file.";
                    continue;
                }

                // 3. التحقق من وجود الاسم في قاعدة البيانات (RoomType names should be unique)
                $existingRoomType = RoomType::where('room_type_name', $roomTypeName)->first();

                if ($existingRoomType) {
                    // النوع موجود بالفعل، تجاهله (لا نقوم بالتحديث هنا عادةً، فقط إضافة جديد)
                    $skippedCount++;
                    $skippedDetails[] = "Row {$currentRowNumber}: Room type '{$roomTypeName}' already exists in the system.";
                    $processedNames->push($roomTypeName); // اعتبره معالجاً لتجنب إضافته مرة أخرى من نفس الملف
                    continue;
                }

                // 4. إنشاء نوع قاعة جديد
                RoomType::create([
                    'room_type_name' => $roomTypeName,
                ]);
                $createdCount++;
                $processedNames->push($roomTypeName);
            }

            $message = "Room Types bulk upload processed. ";
            if ($createdCount > 0) $message .= "{$createdCount} new room types created. ";
            if ($skippedCount > 0) $message .= "{$skippedCount} rows skipped. ";

            if (!empty($skippedDetails)) {
                session()->flash('skipped_details', $skippedDetails);
            }

            return redirect()->route('data-entry.room-types.index')->with('success', trim($message));
        } catch (Exception $e) {
            Log::error('Room Type Bulk Upload Failed: ' . $e->getMessage() . ' at ' . $e->getFile() . ':' . $e->getLine());
            return redirect()->route('data-entry.room-types.index')
                ->with('error', 'An error occurred during bulk upload: ' . $e->getMessage());
        }
    }

    // =============================================
    //             API Controller Methods
    // =============================================
    // (قم بإنشاء دوال API بنفس الطريقة إذا احتجتها)

    public function apiIndex()
    {
        try {
            // $types = RoomType::latest('id')->get(['id', 'room_type_name']);
            $types = RoomType::latest()->get();
            return response()->json(['success' => true, 'data' => $types], 200);
        } catch (Exception $e) {
            return response()->json(['success' => false, 'message' => 'Server Error'], 500);
        }
    }
    public function apiStore(Request $request)
    {
        $validatedData = $request->validate(['room_type_name' => 'required|string|max:100|unique:rooms_types,room_type_name']);
        try {
            $type = RoomType::create($validatedData);
            return response()->json(['success' => true, 'data' => $type, 'message' => 'Room Type created.'], 201);
        } catch (Exception $e) { /* ... */
            return response()->json(['success' => false, 'message' => 'Failed to create.'], 500);
        }
    }
    public function apiShow(RoomType $roomType)
    {
        return response()->json(['success' => true, 'data' => $roomType], 200);
    }
    public function apiUpdate(Request $request, RoomType $roomType)
    {
        $validatedData = $request->validate(['room_type_name' => ['required', 'string', 'max:100', Rule::unique('rooms_types')->ignore($roomType->id)]]);
        try {
            $roomType->update($validatedData);
            return response()->json(['success' => true, 'data' => $roomType, 'message' => 'Room Type updated.'], 200);
        } catch (Exception $e) { /* ... */
            return response()->json(['success' => false, 'message' => 'Failed to update.'], 500);
        }
    }
    public function apiDestroy(RoomType $roomType)
    {
        if ($roomType->rooms()->exists()) {
            return response()->json(['success' => false, 'message' => 'Cannot delete: assigned to rooms.'], 409);
        }
        try {
            $roomType->delete();
            return response()->json(['success' => true, 'message' => 'Room Type deleted.'], 200);
        } catch (Exception $e) { /* ... */
            return response()->json(['success' => false, 'message' => 'Failed to delete.'], 500);
        }
    }

    /**
     * Handle bulk upload of room types from Excel file via API.
     */
    public function apiBulkUpload(Request $request)
    {
        // 1. التحقق من الملف المرفوع
        $validator = Validator::make($request->all(), [
            'room_type_excel_file' => 'required|file|mimes:xlsx,xls,csv|max:2048',
        ], [], ['room_type_excel_file' => 'Excel file']);

        if ($validator->fails()) {
            return response()->json([
                'success' => false,
                'message' => 'Validation failed.',
                'errors' => $validator->errors()
            ], 422); // Unprocessable Entity
        }

        try {
            $rows = Excel::toCollection(collect(), $request->file('room_type_excel_file'))->first();

            if ($rows->isEmpty() || $rows->count() <= 1) {
                return response()->json([
                    'success' => false,
                    'message' => 'The uploaded Excel file is empty or contains no data rows after the header.'
                ], 400); // Bad Request
            }

            $createdCount = 0;
            $skippedCount = 0;
            $skippedDetails = [];
            $processedNames = collect();

            $header = $rows->first()->map(fn($item) => strtolower(str_replace(' ', '_', $item ?? '')));
            $dataRows = $rows->slice(1);

            foreach ($dataRows as $rowKey => $rowArray) {
                $row = $header->combine($rowArray->map(fn($val) => trim($val ?? '')));
                $currentRowNumber = $rowKey + 2;
                $roomTypeName = $row->get('room_type_name', '');

                if (empty($roomTypeName)) {
                    $skippedCount++;
                    $skippedDetails[] = "Row {$currentRowNumber}: Skipped because room_type_name is empty.";
                    continue;
                }
                if ($processedNames->contains($roomTypeName)) {
                    $skippedCount++;
                    $skippedDetails[] = "Row {$currentRowNumber}: Skipped duplicate room_type_name '{$roomTypeName}' from within this file.";
                    continue;
                }

                $existingRoomType = RoomType::where('room_type_name', $roomTypeName)->first();
                if ($existingRoomType) {
                    $skippedCount++;
                    $skippedDetails[] = "Row {$currentRowNumber}: Room type '{$roomTypeName}' already exists in the system.";
                    $processedNames->push($roomTypeName);
                    continue;
                }

                RoomType::create(['room_type_name' => $roomTypeName]);
                $createdCount++;
                $processedNames->push($roomTypeName);
            }

            $summaryMessage = "Room Types bulk upload processed.";
            $responseData = [
                'created_count' => $createdCount,
                'skipped_count' => $skippedCount,
                'skipped_details' => $skippedDetails,
            ];

            return response()->json([
                'success' => true,
                'message' => $summaryMessage,
                'data' => $responseData
            ], 200); // OK

        } catch (Exception $e) {
            Log::error('API Room Type Bulk Upload Failed: ' . $e->getMessage() . ' at ' . $e->getFile() . ':' . $e->getLine());
            return response()->json([
                'success' => false,
                'message' => 'An error occurred during bulk upload.',
                'error_details' => $e->getMessage() // للمطور
            ], 500); // Internal Server Error
        }
    }
}
-----------------------------------------------------------------------------------------------------------
app\Http\Controllers\DataEntry\SectionController.php
<?php

namespace App\Http\Controllers\DataEntry;

use App\Http\Controllers\Controller;
use App\Models\Section;
use App\Models\Plan;
use App\Models\Department;
use App\Models\PlanSubject;
use App\Models\PlanExpectedCount;
use App\Models\PlanGroup;
use App\Models\Subject;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Log;
use Illuminate\Validation\Rule;
use Illuminate\Support\Facades\Validator;
use Exception;
use Illuminate\Support\Str;

class SectionController extends Controller
{
    const DEFAULT_THEORY_CAPACITY_FALLBACK = 50;
    const DEFAULT_PRACTICAL_CAPACITY_FALLBACK = 25;
    const MIN_STUDENTS_FOR_NEW_SECTION = 10;

    /**
     * Display a listing of all sections with filtering.
     */
    public function index(Request $request)
    {
        try {
            $query = Section::with([
                'planSubject.plan.department:id,department_name',
                'planSubject.subject:id,subject_no,subject_name'
            ]);

            if ($request->filled('academic_year')) {
                $query->where('academic_year', $request->academic_year);
            }
            if ($request->filled('semester')) {
                $query->where('semester', $request->semester);
            }
            if ($request->filled('department_id')) {
                $query->whereHas('planSubject.plan.department', fn($q) => $q->where('id', $request->department_id));
            }
            if ($request->filled('plan_id')) {
                $query->whereHas('planSubject.plan', fn($q) => $q->where('id', $request->plan_id));
            }
            if ($request->filled('plan_level')) {
                $query->whereHas('planSubject', fn($q) => $q->where('plan_level', $request->plan_level));
            }
            if ($request->filled('subject_id')) {
                $query->whereHas('planSubject.subject', fn($q) => $q->where('id', $request->subject_id));
            }
            if ($request->filled('branch')) {
                $query->where('branch', $request->branch == 'none' ? null : $request->branch);
            }

            $sections = $query->orderBy('academic_year', 'desc')->orderBy('semester')
                ->orderBy(fn($q) => $q->from('plan_subjects')->whereColumn('plan_subjects.id', 'sections.plan_subject_id')->join('plans', 'plan_subjects.plan_id', '=', 'plans.id')->selectRaw('plans.plan_no'))
                ->orderBy(fn($q) => $q->from('plan_subjects')->whereColumn('plan_subjects.id', 'sections.plan_subject_id')->selectRaw('plan_level'))
                ->orderBy(fn($q) => $q->from('plan_subjects')->whereColumn('plan_subjects.id', 'sections.plan_subject_id')->join('subjects', 'plan_subjects.subject_id', '=', 'subjects.id')->selectRaw('subjects.subject_no'))
                ->orderBy('activity_type')->orderBy('section_number')
                ->paginate(20);

            $academicYears = Section::query()->orWhereNotNull('academic_year')->distinct()->orderBy('academic_year', 'desc')->pluck('academic_year');
            $departments = Department::orderBy('department_name')->get(['id', 'department_name']);
            $plans = Plan::where('is_active', true)->orderBy('plan_name')->get(['id', 'plan_no', 'plan_name']);
            $subjectsForFilter = Subject::orderBy('subject_no')->get(['id', 'subject_no', 'subject_name']);
            $levels = PlanSubject::query()->orWhereNotNull('plan_level')->distinct()->orderBy('plan_level')->pluck('plan_level');
            $semesters = [1 => 'First', 2 => 'Second', 3 => 'Summer'];

            return view('dashboard.data-entry.sections.index', compact(
                'sections',
                'academicYears',
                'departments',
                'plans',
                'subjectsForFilter',
                'levels',
                'semesters',
                'request'
            ));
        } catch (Exception $e) {
            Log::error('Error fetching sections: ' . $e->getMessage());
            return redirect()->back()->with('error', 'Could not load sections list.');
        }
    }

    /**
     * Show the page for managing ALL sections of a specific SUBJECT within a specific CONTEXT.
     */
    public function manageSubjectContext(Request $request)
    {
        $request->validate([
            'plan_subject_id' => 'required|integer|exists:plan_subjects,id',
            'academic_year' => 'required|integer|digits:4',
            'semester_of_sections' => 'required|integer|in:1,2,3',
            'branch' => 'nullable|string|max:100',
        ]);

        $planSubjectId = $request->plan_subject_id;
        $academicYear = $request->academic_year;
        $semesterOfSections = $request->semester_of_sections;
        $branch = $request->filled('branch') ? $request->branch : null;

        try {
            $planSubject = PlanSubject::with(['plan.department', 'subject.subjectCategory'])->findOrFail($planSubjectId);

            $expectedCount = PlanExpectedCount::where('plan_id', $planSubject->plan_id)
                ->where('plan_level', $planSubject->plan_level)
                ->where('plan_semester', $planSubject->plan_semester)
                ->where('academic_year', $academicYear)
                ->where(fn($q) => is_null($branch) ? $q->whereNull('branch') : $q->where('branch', $branch))
                ->first();

            $currentSections = Section::where('plan_subject_id', $planSubjectId)
                ->where('academic_year', $academicYear)
                ->where('semester', $semesterOfSections)
                ->where(fn($q) => is_null($branch) ? $q->whereNull('branch') : $q->where('branch', $branch))
                ->orderBy('activity_type')->orderBy('section_number')->get();

            return view('dashboard.data-entry.sections.manage', compact(
                'planSubject',
                'academicYear',
                'semesterOfSections',
                'branch',
                'expectedCount',
                'currentSections',
                'request'
            ));
        } catch (Exception $e) {
            Log::error('Error loading manage sections for subject context: ' . $e->getMessage());
            return redirect()->route('data-entry.sections.index')->with('error', 'Could not load section management page.');
        }
    }

    /**
     * Trigger section generation for a specific SUBJECT within a context from a button.
     */
    public function generateForSubject(Request $request)
    {
        $request->validate([
            'plan_subject_id' => 'required|integer|exists:plan_subjects,id',
            'expected_count_id' => 'required|integer|exists:plan_expected_counts,id',
        ]);

        $planSubject = PlanSubject::find($request->plan_subject_id);
        $expectedCount = PlanExpectedCount::find($request->expected_count_id);

        if (!$planSubject || !$expectedCount) {
            return redirect()->back()->with('error', 'Invalid context for generating sections.');
        }

        try {
            $this->generateSectionsLogic($planSubject, $expectedCount);
            return redirect()->route('data-entry.sections.manageSubjectContext', [
                'plan_subject_id' => $planSubject->id,
                'academic_year' => $expectedCount->academic_year,
                'semester_of_sections' => $expectedCount->plan_semester,
                'branch' => $expectedCount->branch,
            ])->with('success', 'Sections for subject generated/updated successfully.');
        } catch (Exception $e) {
            Log::error('Manual Section Generation for Subject Failed: ' . $e->getMessage());
            return redirect()->back()->with('error', 'Failed to generate sections: ' . $e->getMessage());
        }
    }

    /**
     * Core logic to generate/update sections for a SINGLE PlanSubject.
     */
    private function generateSectionsLogic(PlanSubject $planSubject, PlanExpectedCount $expectedCount)
    {
        Log::info("Generating sections for PS ID: {$planSubject->id} within ExpectedCount ID: {$expectedCount->id}");

        $subject = $planSubject->subject()->with('subjectCategory')->first();
        if (!$subject || !$subject->subjectCategory) {
            $errorMessage = "Subject or its category is missing for PlanSubject ID: {$planSubject->id}. Cannot generate sections.";
            Log::error($errorMessage);
            throw new Exception($errorMessage);
        }

        $totalExpected = $expectedCount->male_count + $expectedCount->female_count;

        Section::where('plan_subject_id', $planSubject->id)
            ->where('academic_year', $expectedCount->academic_year)
            ->where('semester', $expectedCount->plan_semester)
            ->where(function ($q) use ($expectedCount) {
                is_null($expectedCount->branch) ? $q->whereNull('branch') : $q->where('branch', $expectedCount->branch);
            })
            ->delete();
        Log::info("Deleted old sections for PS ID {$planSubject->id} in context of ExpectedCount ID: {$expectedCount->id}.");

        if ($totalExpected <= 0) {
            Log::info("Total expected students is zero for PS ID {$planSubject->id}. No new sections will be created.");
            return;
        }

        $subjectCategoryName = strtolower($subject->subjectCategory->subject_category_name);
        $nextSectionNumber = 1;

        // --- تحديد السعات المستخدمة ---
        $capacityTheoreticalToUse = self::DEFAULT_THEORY_CAPACITY_FALLBACK;
        if (isset($subject->load_theoretical_section) && $subject->load_theoretical_section > 0) {
            $capacityTheoreticalToUse = $subject->load_theoretical_section;
        }
        // dd(isset($subject->load_theoretical_section));
        Log::info("Subject ID {$subject->id}: Theoretical Capacity to Use = {$capacityTheoreticalToUse} (Subject defined: {$subject->capacity_theoretical_section})");

        $capacityPracticalToUse = self::DEFAULT_PRACTICAL_CAPACITY_FALLBACK;
        if (isset($subject->load_practical_section) && $subject->load_practical_section > 0) {
            $capacityPracticalToUse = $subject->load_practical_section;
        }
        Log::info("Subject ID {$subject->id}: Practical Capacity to Use = {$capacityPracticalToUse} (Subject defined: {$subject->capacity_practical_section})");
        // --- نهاية تحديد السعات ---

        // --- 1. الجزء النظري ---
        if (($subject->theoretical_hours ?? 0) > 0) {
            // لا ننشئ جزء نظري إذا كانت المادة "عملية فقط"
            if (
                !($subjectCategoryName == 'practical' || Str::contains($subjectCategoryName, 'عملي')) ||
                (Str::contains($subjectCategoryName, ['combined', 'مشترك', 'نظري وعملي']))
            ) {

                if ($totalExpected > 0 && $capacityTheoreticalToUse > 0) {
                    $numSections = ceil($totalExpected / $capacityTheoreticalToUse);
                    if ($numSections > 1) {
                        $studentsInLastSection = $totalExpected % $capacityTheoreticalToUse;
                        if ($studentsInLastSection == 0) $studentsInLastSection = $capacityTheoreticalToUse;
                        if ($studentsInLastSection < self::MIN_STUDENTS_FOR_NEW_SECTION && $numSections > 1) {
                            $numSections = floor($totalExpected / $capacityTheoreticalToUse);
                            if ($numSections == 0 && $totalExpected > 0) $numSections = 1;
                        }
                    }
                    if ($numSections == 0 && $totalExpected > 0) $numSections = 1;

                    if ($numSections > 0) {
                        $baseStudents = floor($totalExpected / $numSections);
                        $remainder = $totalExpected % $numSections;
                        for ($i = 0; $i < $numSections; $i++) {
                            $count = $baseStudents + ($remainder > 0 ? 1 : 0);
                            if ($remainder > 0) $remainder--;
                            if ($count > 0) {
                                Section::create(['plan_subject_id' => $planSubject->id, 'academic_year' => $expectedCount->academic_year, 'semester' => $expectedCount->plan_semester, 'activity_type' => 'Theory', 'section_number' => $nextSectionNumber++, 'student_count' => $count, 'section_gender' => 'Mixed', 'branch' => $expectedCount->branch]);
                            }
                        }
                        Log::info("Created {$numSections} Theory Sections for PS ID {$planSubject->id}");
                    }
                }
            }
        }

        // --- 2. الجزء العملي ---
        if (($subject->practical_hours ?? 0) > 0) {
            // لا ننشئ جزء عملي إذا كانت المادة "نظرية فقط" وليست "مشتركة"
            if (
                !($subjectCategoryName == 'theory' || Str::contains($subjectCategoryName, 'نظري')) ||
                (Str::contains($subjectCategoryName, ['combined', 'مشترك', 'نظري وعملي']))
            ) {

                if ($totalExpected > 0 && $capacityPracticalToUse > 0) {
                    $numSections = ceil($totalExpected / $capacityPracticalToUse);
                    if ($numSections > 1) {
                        $studentsInLastSection = $totalExpected % $capacityPracticalToUse;
                        if ($studentsInLastSection == 0) $studentsInLastSection = $capacityPracticalToUse;
                        if ($studentsInLastSection < self::MIN_STUDENTS_FOR_NEW_SECTION && $numSections > 1) {
                            $numSections = floor($totalExpected / $capacityPracticalToUse);
                            if ($numSections == 0 && $totalExpected > 0) $numSections = 1;
                        }
                    }
                    if ($numSections == 0 && $totalExpected > 0) $numSections = 1;

                    if ($numSections > 0) {
                        $baseStudents = floor($totalExpected / $numSections);
                        $remainder = $totalExpected % $numSections;
                        for ($i = 0; $i < $numSections; $i++) {
                            $count = $baseStudents + ($remainder > 0 ? 1 : 0);
                            if ($remainder > 0) $remainder--;
                            if ($count > 0) {
                                Section::create(['plan_subject_id' => $planSubject->id, 'academic_year' => $expectedCount->academic_year, 'semester' => $expectedCount->plan_semester, 'activity_type' => 'Practical', 'section_number' => $nextSectionNumber++, 'student_count' => $count, 'section_gender' => 'Mixed', 'branch' => $expectedCount->branch]);
                            }
                        }
                        Log::info("Created {$numSections} Practical Sections for PS ID {$planSubject->id}");
                    }
                }
            }
        }
        if ($nextSectionNumber == 1) {
            Log::warning("No sections created for PS ID {$planSubject->id}.");
        }

        // **إضافة جديدة: إنشاء المجموعات للشعب المنشأة**
        $this->generateGroupsForContext($planSubject->plan_id, $planSubject->plan_level, $expectedCount->academic_year, $expectedCount->plan_semester, $expectedCount->branch);

        Log::info("Finished generating sections and groups for PS ID {$planSubject->id}.");
    }

    /**
     * دالة جديدة لإنشاء المجموعات بناءً على الشعب المنشأة
     */
    private function generateGroupsForContext($planId, $planLevel, $academicYear, $semester, $branch = null)
    {
        Log::info("Generating groups for context: Plan {$planId}, Level {$planLevel}, Year {$academicYear}, Semester {$semester}, Branch: " . ($branch ?? 'null'));

        // حذف المجموعات القديمة لنفس السياق
        PlanGroup::clearContextGroups($planId, $planLevel, $academicYear, $semester, $branch);

        // جلب كل الشعب في هذا السياق
        $sectionsInContext = Section::whereHas('planSubject', function($q) use ($planId, $planLevel) {
                $q->where('plan_id', $planId)->where('plan_level', $planLevel);
            })
            ->where('academic_year', $academicYear)
            ->where('semester', $semester)
            ->where(function ($q) use ($branch) {
                is_null($branch) ? $q->whereNull('branch') : $q->where('branch', $branch);
            })
            ->with('planSubject')
            ->get();

        if ($sectionsInContext->isEmpty()) {
            Log::info("No sections found for the context. No groups will be created.");
            return;
        }

        // حساب عدد المجموعات (نفس المنطق القديم)
        $maxPracticalSections = $sectionsInContext->where('activity_type', 'Practical')
            ->groupBy('plan_subject_id')->map->count()->max() ?? 0;
        $numberOfStudentGroups = $maxPracticalSections > 0 ? $maxPracticalSections : 1;

        Log::info("Calculated {$numberOfStudentGroups} student groups for this context");

        $groupsToInsert = [];

        // إنشاء المجموعات للشعب النظرية (كل شعبة نظرية ترتبط بكل المجموعات)
        $theorySections = $sectionsInContext->where('activity_type', 'Theory');
        foreach ($theorySections as $theorySection) {
            for ($groupIndex = 1; $groupIndex <= $numberOfStudentGroups; $groupIndex++) {
                $groupsToInsert[] = [
                    'plan_id' => $planId,
                    'plan_level' => $planLevel,
                    'academic_year' => $academicYear,
                    'semester' => $semester,
                    'branch' => $branch,
                    'section_id' => $theorySection->id,
                    'group_no' => $groupIndex,
                    'group_size' => null, // سيتم حسابه لاحقاً إن احتجنا
                    'gender' => 'Mixed',
                    'created_at' => now(),
                    'updated_at' => now(),
                ];
            }
        }

        // إنشاء المجموعات للشعب العملية (كل شعبة عملية ترتبط بمجموعة واحدة محددة)
        $practicalSectionsBySubject = $sectionsInContext->where('activity_type', 'Practical')
            ->groupBy('plan_subject_id');

        foreach ($practicalSectionsBySubject as $subjectId => $sectionsForOneSubject) {
            $sortedSections = $sectionsForOneSubject->sortBy('section_number')->values();

            for ($groupIndex = 1; $groupIndex <= $numberOfStudentGroups; $groupIndex++) {
                if ($sortedSections->has($groupIndex - 1)) {
                    $practicalSectionForThisGroup = $sortedSections->get($groupIndex - 1);
                    $groupsToInsert[] = [
                        'plan_id' => $planId,
                        'plan_level' => $planLevel,
                        'academic_year' => $academicYear,
                        'semester' => $semester,
                        'branch' => $branch,
                        'section_id' => $practicalSectionForThisGroup->id,
                        'group_no' => $groupIndex,
                        'group_size' => null,
                        'gender' => 'Mixed',
                        'created_at' => now(),
                        'updated_at' => now(),
                    ];
                }
            }
        }

        // إدراج كل المجموعات دفعة واحدة للأداء
        if (!empty($groupsToInsert)) {
            PlanGroup::insert($groupsToInsert);
            Log::info("Inserted " . count($groupsToInsert) . " group records for the context");
        }
    }


    /**
     * Store a newly created section.
     */
    public function store(Request $request)
    {
        $errorBagName = 'addSectionModal';
        $validator = Validator::make($request->all(), [
            'plan_subject_id' => 'required|integer|exists:plan_subjects,id',
            'activity_type' => ['required', Rule::in(['Theory', 'Practical'])],
            'academic_year' => 'required|integer|digits:4',
            'semester' => 'required|integer|in:1,2,3',
            'branch' => 'nullable|string|max:100',
            'section_number' => 'required|integer|min:1',
            'student_count' => 'required|integer|min:0',
            'section_gender' => ['required', Rule::in(['Male', 'Female', 'Mixed'])],
        ]);

        $planSubjectId = $request->input('plan_subject_id');
        $academicYear = $request->input('academic_year');
        $semester = $request->input('semester');
        $branch = $request->input('branch');
        $activityType = $request->input('activity_type');

        $validator->after(function ($validator) use ($request, $planSubjectId, $academicYear, $semester, $branch, $activityType) {
            if (!$validator->errors()->hasAny()) {
                $exists = Section::where('plan_subject_id', $planSubjectId)
                    ->where('academic_year', $academicYear)->where('semester', $semester)
                    ->where('activity_type', $activityType)
                    ->where('section_number', $request->input('section_number'))
                    ->where(fn($q) => is_null($branch) ? $q->whereNull('branch') : $q->where('branch', $branch))
                    ->exists();
                if ($exists) {
                    $validator->errors()->add('section_unique', 'This section (number & activity type) already exists.');
                }
            }
        });

        // التحقق من تجاوز العدد الإجمالي للطلاب
        $planSubjectForContext = PlanSubject::find($planSubjectId);
        if ($planSubjectForContext) {
            $expectedCount = PlanExpectedCount::where('plan_id', $planSubjectForContext->plan_id)
                ->where('academic_year', $academicYear)
                ->where('plan_level', $planSubjectForContext->plan_level)
                ->where('plan_semester', $planSubjectForContext->plan_semester)
                ->where(fn($q) => is_null($branch) ? $q->whereNull('branch') : $q->where('branch', $branch))
                ->first();

            if ($expectedCount) {
                $validator->after(function ($validator) use ($request, $expectedCount, $planSubjectId, $academicYear, $semester, $branch, $activityType) {
                    if (!$validator->errors()->has('student_count')) {
                        $newStudentCount = (int) $request->input('student_count');
                        $totalExpected = $expectedCount->male_count + $expectedCount->female_count;
                        $otherSectionsSum = Section::where('plan_subject_id', $planSubjectId)
                            ->where('academic_year', $academicYear)->where('semester', $semester)
                            ->where('activity_type', $activityType)->where('branch', $branch)
                            ->sum('student_count');
                        if (($otherSectionsSum + $newStudentCount) > $totalExpected) {
                            $validator->errors()->add('student_count_total', "Total students (" . ($otherSectionsSum + $newStudentCount) . ") exceeds expected ({$totalExpected}). Max remaining: " . max(0, $totalExpected - $otherSectionsSum));
                        }
                    }
                });
            }
        }


        $redirectParams = ['plan_subject_id' => $planSubjectId, 'academic_year' => $academicYear, 'semester_of_sections' => $semester, 'branch' => $branch];
        if ($validator->fails()) {
            return redirect()->route('data-entry.sections.manageSubjectContext', $redirectParams)->with('error', 'Failed to create section.')
                ->withErrors($validator, $errorBagName)->withInput();
        }

        try {
            $data = $validator->validated();
            $data['branch'] = empty($data['branch']) ? null : $data['branch'];
            $section = Section::create($data);

            // **إضافة جديدة: إعادة إنشاء المجموعات بعد إضافة شعبة جديدة**
            $planSubject = PlanSubject::find($planSubjectId);
            if ($planSubject) {
                $this->generateGroupsForContext($planSubject->plan_id, $planSubject->plan_level, $academicYear, $semester, $branch);
            }

            return redirect()->route('data-entry.sections.manageSubjectContext', $redirectParams)->with('success', 'Section added.');
        } catch (Exception $e) {
            Log::error('Section Store Failed: ' . $e->getMessage());
            return redirect()->route('data-entry.sections.manageSubjectContext', $redirectParams)->with('error', 'Failed to add section.')->withInput();
        }
    }

    /**
     * Update the specified section.
     */
    public function update(Request $request, Section $section)
    {
        $redirectParams = ['plan_subject_id' => $section->plan_subject_id, 'academic_year' => $section->academic_year, 'semester_of_sections' => $section->semester, 'branch' => $section->branch];
        $errorBagName = 'editSectionModal_' . $section->id; // اسم مميز للـ error bag
        $validator = Validator::make($request->all(), [
            'section_number' => 'required|integer|min:1',
            'student_count' => 'required|integer|min:0',
            'section_gender' => ['required', Rule::in(['Male', 'Female', 'Mixed'])],
        ]);

        // التحقق من التفرد لرقم الشعبة إذا تغير
        $validator->after(function ($validator) use ($request, $section) {
            if (!$validator->errors()->has('section_number') && $request->input('section_number') != $section->section_number) {
                $exists = Section::where('plan_subject_id', $section->plan_subject_id)
                    ->where('academic_year', $section->academic_year)->where('semester', $section->semester)
                    ->where('activity_type', $section->activity_type)->where('section_number', $request->input('section_number'))
                    ->where('branch', $section->branch)->where('id', '!=', $section->id)->exists();
                if ($exists) {
                    $validator->errors()->add('section_unique', 'This section number already exists for this subject/context.');
                }
            }
        });

        // التحقق من عدم تجاوز العدد الكلي للطلاب
        $validator->after(function ($validator) use ($request, $section) {
            if (!$validator->errors()->has('student_count')) {
                $expectedCount = PlanExpectedCount::where('plan_id', $section->planSubject->plan_id)
                    ->where('academic_year', $section->academic_year)->where('plan_level', $section->planSubject->plan_level)
                    ->where('plan_semester', $section->planSubject->plan_semester)->where('branch', $section->branch)->first();
                if ($expectedCount) {
                    $newStudentCount = (int) $request->input('student_count');
                    $totalExpected = $expectedCount->male_count + $expectedCount->female_count;
                    $otherSectionsSum = Section::where('plan_subject_id', $section->plan_subject_id)
                        ->where('academic_year', $section->academic_year)->where('semester', $section->semester)
                        ->where('activity_type', $section->activity_type)->where('branch', $section->branch)
                        ->where('id', '!=', $section->id)->sum('student_count');
                    if (($otherSectionsSum + $newStudentCount) > $totalExpected) {
                        $validator->errors()->add('student_count_total', "Total students (" . ($otherSectionsSum + $newStudentCount) . ") exceeds expected ({$totalExpected}).");
                    }
                }
            }
        });

        if ($validator->fails()) {
            return redirect()->route('data-entry.sections.manageSubjectContext', $redirectParams)
                ->with('error', 'Failed to update section.')
                ->with('editSectionId', $section->id) // لإظهار المودال الصحيح
                ->with('sectionForModal', $section) // لتعيين القيم الافتراضية
                ->withErrors($validator, $errorBagName)
                ->withInput();
        }

        try {
            $dataToUpdate = $validator->safe()->only(['section_number', 'student_count', 'section_gender']);
            // الفرع ونوع النشاط لا يتم تعديلهما عادة من هنا
            $section->update($dataToUpdate);

            // **إضافة جديدة: إعادة إنشاء المجموعات بعد تعديل شعبة**
            $planSubject = $section->planSubject;
            if ($planSubject) {
                $this->generateGroupsForContext($planSubject->plan_id, $planSubject->plan_level, $section->academic_year, $section->semester, $section->branch);
            }

            return redirect()->route('data-entry.sections.manageSubjectContext', $redirectParams)->with('success', 'Section updated.');
        } catch (Exception $e) {
            Log::error('Section Update Failed for ID ' . $section->id . ': ' . $e->getMessage());
            return redirect()->route('data-entry.sections.manageSubjectContext', $redirectParams)->with('error', 'Failed to update section: ' . $e->getMessage())->withInput();
        }
    }

    /**
     * Remove the specified section.
     */
    public function destroy(Section $section)
    {
        $redirectParams = ['plan_subject_id' => $section->plan_subject_id, 'academic_year' => $section->academic_year, 'semester_of_sections' => $section->semester, 'branch' => $section->branch];
        try {
            // حفظ بيانات السياق قبل الحذف
            $planSubject = $section->planSubject;
            $contextData = [
                'plan_id' => $planSubject->plan_id,
                'plan_level' => $planSubject->plan_level,
                'academic_year' => $section->academic_year,
                'semester' => $section->semester,
                'branch' => $section->branch,
            ];

            $section->delete();

            // **إضافة جديدة: إعادة إنشاء المجموعات بعد حذف شعبة**
            $this->generateGroupsForContext($contextData['plan_id'], $contextData['plan_level'], $contextData['academic_year'], $contextData['semester'], $contextData['branch']);

            return redirect()->route('data-entry.sections.manageSubjectContext', $redirectParams)->with('success', 'Section deleted.');
        } catch (Exception $e) {
            Log::error('Section Destroy Failed for ID ' . $section->id . ': ' . $e->getMessage());
            return redirect()->route('data-entry.sections.manageSubjectContext', $redirectParams)->with('error', 'Failed to delete section: ' . $e->getMessage());
        }
    }

    // =============================================
    //             API Controller Methods
    // =============================================

    /**
     * API: Display a listing of all sections with filtering.
     */
    public function apiIndex(Request $request)
    {
        try {
            $query = Section::with([
                'planSubject.plan:id,plan_no,plan_name',
                'planSubject.subject:id,subject_no,subject_name',
                'planSubject.plan.department:id,department_name'
            ]);

            if ($request->filled('academic_year')) {
                $query->where('academic_year', $request->academic_year);
            }
            if ($request->filled('semester')) {
                $query->where('semester', $request->semester);
            }
            if ($request->filled('plan_subject_id')) {
                $query->where('plan_subject_id', $request->plan_subject_id);
            }
            if ($request->filled('activity_type')) {
                $query->where('activity_type', $request->activity_type);
            }
            if ($request->filled('branch')) {
                if (strtolower($request->branch) === 'none' || $request->branch === '') {
                    $query->whereNull('branch');
                } else {
                    $query->where('branch', $request->branch);
                }
            }

            $sections = $query->orderBy('academic_year', 'desc')->orderBy('semester')
                ->orderBy('plan_subject_id')->orderBy('activity_type')->orderBy('section_number')
                ->get(); // *** جلب كل النتائج للـ API (بدون pagination حالياً) ***

            return response()->json(['success' => true, 'data' => $sections], 200);
        } catch (Exception $e) {
            Log::error('API Error fetching sections: ' . $e->getMessage());
            return response()->json(['success' => false, 'message' => 'Server Error: Could not retrieve sections.'], 500);
        }
    }


    /**
     * API: Get sections for a specific subject context.
     */
    public function apiGetSectionsForSubjectContext(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'plan_subject_id' => 'required|integer|exists:plan_subjects,id',
            'academic_year' => 'required|integer|digits:4',
            'semester' => 'required|integer|in:1,2,3', // فصل الشعبة
            'branch' => 'nullable|string|max:100',
        ]);

        if ($validator->fails()) {
            return response()->json(['success' => false, 'errors' => $validator->errors()], 422);
        }

        try {
            $planSubject = PlanSubject::with(['subject:id,subject_no,subject_name', 'plan:id,plan_no'])->find($request->plan_subject_id);
            if (!$planSubject) {
                return response()->json(['success' => false, 'message' => 'PlanSubject context not found.'], 404);
            }

            $sections = Section::where('plan_subject_id', $request->plan_subject_id)
                ->where('academic_year', $request->academic_year)
                ->where('semester', $request->semester)
                ->where(fn($q) => is_null($request->branch) ? $q->whereNull('branch') : $q->where('branch', $request->branch))
                ->orderBy('activity_type')->orderBy('section_number')->get();

            return response()->json([
                'success' => true,
                'context' => ['plan_subject' => $planSubject, /* ... */],
                'data' => $sections
            ], 200);
        } catch (Exception $e) { /* ... */
        }
    }


    /**
     * API: Store a newly created section.
     */
    public function apiStore(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'plan_subject_id' => 'required|integer|exists:plan_subjects,id',
            'activity_type' => ['required', Rule::in(['Theory', 'Practical'])],
            'academic_year' => 'required|integer|digits:4',
            'semester' => 'required|integer|in:1,2,3',
            'branch' => 'nullable|string|max:100',
            'section_number' => 'required|integer|min:1',
            'student_count' => 'required|integer|min:0',
            'section_gender' => ['required', Rule::in(['Male', 'Female', 'Mixed'])],
        ]);

        // التحقق من التفرد
        $validator->after(function ($validator) use ($request) {
            if (!$validator->errors()->hasAny()) {
                $exists = Section::where('plan_subject_id', $request->input('plan_subject_id'))
                    ->where('academic_year', $request->input('academic_year'))
                    ->where('semester', $request->input('semester'))
                    ->where('activity_type', $request->input('activity_type'))
                    ->where('section_number', $request->input('section_number'))
                    ->where(function ($query) use ($request) {
                        $branch = $request->input('branch');
                        is_null($branch) || $branch === '' ? $query->whereNull('branch') : $query->where('branch', $branch);
                    })->exists();
                if ($exists) {
                    $validator->errors()->add('section_unique', 'This section (number & activity type) already exists for this context.');
                }
            }
        });

        // التحقق من تجاوز العدد الكلي
        $planSubjectForContext = PlanSubject::find($request->input('plan_subject_id'));
        if ($planSubjectForContext) {
            $expectedCount = PlanExpectedCount::where('plan_id', $planSubjectForContext->plan_id)
                ->where('academic_year', $request->input('academic_year'))
                ->where('plan_level', $planSubjectForContext->plan_level)
                ->where('plan_semester', $planSubjectForContext->plan_semester)
                ->where(fn($q) => is_null($request->input('branch')) ? $q->whereNull('branch') : $q->where('branch', $request->input('branch')))
                ->first();

            if ($expectedCount) {
                $validator->after(function ($validator) use ($request, $expectedCount) {
                    if (!$validator->errors()->has('student_count')) {
                        $newStudentCount = (int) $request->input('student_count');
                        $totalExpected = $expectedCount->male_count + $expectedCount->female_count;
                        $otherSectionsSum = Section::where('plan_subject_id', $request->input('plan_subject_id'))
                            ->where('academic_year', $request->input('academic_year'))
                            ->where('semester', $request->input('semester'))
                            ->where('activity_type', $request->input('activity_type'))
                            ->where(fn($q) => is_null($request->input('branch')) ? $q->whereNull('branch') : $q->where('branch', $request->input('branch')))
                            ->sum('student_count');
                        if (($otherSectionsSum + $newStudentCount) > $totalExpected) {
                            $validator->errors()->add('student_count_total', "Total allocated students (" . ($otherSectionsSum + $newStudentCount) . ") would exceed expected ({$totalExpected}). Max remaining for new section: " . max(0, $totalExpected - $otherSectionsSum));
                        }
                    }
                });
            }
        }

        if ($validator->fails()) {
            return response()->json(['success' => false, 'message' => 'Validation failed.', 'errors' => $validator->errors()], 422);
        }

        try {
            $data = $validator->validated();
            $data['branch'] = empty($data['branch']) ? null : $data['branch'];
            $section = Section::create($data);

            // **إضافة جديدة: إعادة إنشاء المجموعات بعد إضافة شعبة جديدة**
            $planSubject = PlanSubject::find($data['plan_subject_id']);
            if ($planSubject) {
                $this->generateGroupsForContext($planSubject->plan_id, $planSubject->plan_level, $data['academic_year'], $data['semester'], $data['branch']);
            }

            $section->load(['planSubject.subject:id,subject_no,subject_name', 'planSubject.plan:id,plan_no']);
            return response()->json(['success' => true, 'data' => $section, 'message' => 'Section created successfully.'], 201);
        } catch (Exception $e) {
            Log::error('API Section Store Failed: ' . $e->getMessage());
            return response()->json(['success' => false, 'message' => 'Failed to create section.'], 500);
        }
    }

    /**
     * API: Display the specified section.
     */
    public function apiShow(Section $section)
    {
        try {
            $section->load(['planSubject.plan:id,plan_no,plan_name', 'planSubject.subject:id,subject_no,subject_name']);
            return response()->json(['success' => true, 'data' => $section], 200);
        } catch (Exception $e) {
            Log::error("API Error fetching section ID {$section->id}: " . $e->getMessage());
            return response()->json(['success' => false, 'message' => 'Section not found or server error.'], 404);
        }
    }

    /**
     * API: Update the specified section.
     */
    public function apiUpdate(Request $request, Section $section)
    {
        $validator = Validator::make($request->all(), [
            'section_number' => 'sometimes|required|integer|min:1',
            'student_count' => 'sometimes|required|integer|min:0',
            'section_gender' => ['sometimes', 'required', Rule::in(['Male', 'Female', 'Mixed'])],
            // السياق (plan_subject_id, activity_type, academic_year, semester, branch) لا يتغير عادة
        ]);

        // التحقق من التفرد إذا تم تعديل section_number
        $validator->after(function ($validator) use ($request, $section) {
            if ($request->has('section_number') && $request->input('section_number') != $section->section_number) {
                $exists = Section::where('plan_subject_id', $section->plan_subject_id)
                    ->where('academic_year', $section->academic_year)->where('semester', $section->semester)
                    ->where('activity_type', $section->activity_type)->where('section_number', $request->input('section_number'))
                    ->where('branch', $section->branch)->where('id', '!=', $section->id)->exists();
                if ($exists) {
                    $validator->errors()->add('section_unique', 'This section number already exists for this context.');
                }
            }
        });

        // التحقق من تجاوز العدد الكلي للطلاب إذا تم تعديل student_count
        $validator->after(function ($validator) use ($request, $section) {
            if ($request->has('student_count') && $request->input('student_count') != $section->student_count) {
                $expectedCount = PlanExpectedCount::where('plan_id', $section->planSubject->plan_id)
                    ->where('academic_year', $section->academic_year)->where('plan_level', $section->planSubject->plan_level)
                    ->where('plan_semester', $section->planSubject->plan_semester)->where('branch', $section->branch)->first();
                if ($expectedCount) {
                    $newStudentCount = (int) $request->input('student_count');
                    $totalExpected = $expectedCount->male_count + $expectedCount->female_count;
                    $otherSectionsSum = Section::where('plan_subject_id', $section->plan_subject_id)
                        ->where('academic_year', $section->academic_year)->where('semester', $section->semester)
                        ->where('activity_type', $section->activity_type)->where('branch', $section->branch)
                        ->where('id', '!=', $section->id)->sum('student_count');
                    if (($otherSectionsSum + $newStudentCount) > $totalExpected) {
                        $validator->errors()->add('student_count_total', "Total allocated students (" . ($otherSectionsSum + $newStudentCount) . ") would exceed expected ({$totalExpected}).");
                    }
                }
            }
        });

        if ($validator->fails()) {
            return response()->json(['success' => false, 'message' => 'Validation failed.', 'errors' => $validator->errors()], 422);
        }

        try {
            $dataToUpdate = $validator->safe()->only(['section_number', 'student_count', 'section_gender']);
            $section->update($dataToUpdate);

            // **إضافة جديدة: إعادة إنشاء المجموعات بعد تعديل شعبة**
            $planSubject = $section->planSubject;
            if ($planSubject) {
                $this->generateGroupsForContext($planSubject->plan_id, $planSubject->plan_level, $section->academic_year, $section->semester, $section->branch);
            }

            $section->load(['planSubject.subject', 'planSubject.plan']);
            return response()->json(['success' => true, 'data' => $section, 'message' => 'Section updated successfully.'], 200);
        } catch (Exception $e) {
            Log::error('API Section Update Failed for ID ' . $section->id . ': ' . $e->getMessage());
            return response()->json(['success' => false, 'message' => 'Failed to update section.'], 500);
        }
    }

    /**
     * API: Remove the specified section.
     */
    public function apiDestroy(Section $section)
    {
        try {
            // حفظ بيانات السياق قبل الحذف
            $planSubject = $section->planSubject;
            $contextData = [
                'plan_id' => $planSubject->plan_id,
                'plan_level' => $planSubject->plan_level,
                'academic_year' => $section->academic_year,
                'semester' => $section->semester,
                'branch' => $section->branch,
            ];

            $section->delete();

            // **إضافة جديدة: إعادة إنشاء المجموعات بعد حذف شعبة**
            $this->generateGroupsForContext($contextData['plan_id'], $contextData['plan_level'], $contextData['academic_year'], $contextData['semester'], $contextData['branch']);

            return response()->json(['success' => true, 'message' => 'Section deleted successfully.'], 200);
        } catch (Exception $e) {
            Log::error('API Section Destroy Failed for ID ' . $section->id . ': ' . $e->getMessage());
            return response()->json(['success' => false, 'message' => 'Failed to delete section.'], 500);
        }
    }

    /**
     * API: Trigger section generation for a specific SUBJECT and context.
     */
    public function apiGenerateForSubject(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'plan_subject_id' => 'required|integer|exists:plan_subjects,id',
            'expected_count_id' => 'required|integer|exists:plan_expected_counts,id',
        ]);

        if ($validator->fails()) {
            return response()->json(['success' => false, 'message' => 'Validation failed.', 'errors' => $validator->errors()], 422);
        }

        $planSubject = PlanSubject::find($request->plan_subject_id);
        $expectedCount = PlanExpectedCount::find($request->expected_count_id);

        if (!$planSubject || !$expectedCount) {
            return response()->json(['success' => false, 'message' => 'Invalid context for generating sections.'], 404);
        }

        try {
            $this->generateSectionsLogic($planSubject, $expectedCount);
            $newSections = Section::where('plan_subject_id', $planSubject->id)
                ->where('academic_year', $expectedCount->academic_year)
                ->where('semester', $expectedCount->plan_semester)
                ->where(fn($q) => is_null($expectedCount->branch) ? $q->whereNull('branch') : $q->where('branch', $expectedCount->branch))
                ->orderBy('activity_type')->orderBy('section_number')
                ->with(['planSubject.subject:id,subject_no,subject_name']) // تحميل تفاصيل المادة
                ->get();

            return response()->json([
                'success' => true,
                'message' => 'Sections generated/updated successfully for the subject.',
                'data' => $newSections
            ], 200);
        } catch (Exception $e) {
            Log::error('API Manual Section Generation for Subject Failed: ' . $e->getMessage());
            return response()->json(['success' => false, 'message' => 'Failed to generate sections: ' . $e->getMessage()], 500);
        }
    }
}
--------------------------------------------------------------------------------------------------------
app\Http\Controllers\DataEntry\SectionController22.php
<?php

namespace App\Http\Controllers\DataEntry;

use App\Http\Controllers\Controller;
use App\Models\Section;
use App\Models\Plan;
use App\Models\Department;
use App\Models\PlanSubject;
use App\Models\PlanExpectedCount;
use App\Models\Subject;
use App\Models\PlanGroup;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Log;
use Illuminate\Validation\Rule;
use Illuminate\Support\Facades\Validator;
use Exception;
use Illuminate\Support\Str;

class SectionController22 extends Controller
{
    // القيم الافتراضية إذا لم يحددها المستخدم للمادة
    const DEFAULT_THEORY_CAPACITY_FALLBACK = 50;
    const DEFAULT_PRACTICAL_CAPACITY_FALLBACK = 25;
    const MIN_STUDENTS_FOR_NEW_SECTION = 10;

    public function manageSectionsForContext(PlanExpectedCount $expectedCount) // Route Model Binding
    {
        try {
            $expectedCount->load('plan.department');

            $planSubjectsForContext = PlanSubject::with('subject.subjectCategory')
                ->where('plan_id', $expectedCount->plan_id)
                ->where('plan_level', $expectedCount->plan_level)
                ->where('plan_semester', $expectedCount->plan_semester)
                ->get();

            // جلب الشعب الحالية مجمعة حسب المادة ونوع النشاط
            $currentSectionsBySubjectAndActivity = $this->getCurrentSectionsGrouped($planSubjectsForContext, $expectedCount);
            // dd('ddd');

            return view('dashboard.data-entry.manage-sections-for-context', compact(
                'expectedCount',
                'planSubjectsForContext',
                'currentSectionsBySubjectAndActivity' // تم تغيير الاسم
            ));
        } catch (Exception $e) {
            Log::error('Error loading manage sections for context: ' . $e->getMessage());
            return redirect()->route('data-entry.plan-expected-counts.index')
                ->with('error', 'Could not load section management page for the selected context.');
        }
    }

    private function getCurrentSectionsGrouped($planSubjectsForContext, PlanExpectedCount $expectedCount)
    {
        $grouped = collect();
        foreach ($planSubjectsForContext as $ps) {
            $sections = Section::where('plan_subject_id', $ps->id)
                ->where('academic_year', $expectedCount->academic_year)
                ->where('semester', $expectedCount->plan_semester) // فصل الشعبة
                ->where(function ($q) use ($expectedCount) {
                    is_null($expectedCount->branch) ? $q->whereNull('branch') : $q->where('branch', $expectedCount->branch);
                })
                ->orderBy('activity_type')->orderBy('section_number') // ترتيب إضافي
                ->get();
            // تجميع إضافي حسب activity_type
            $grouped[$ps->subject_id] = $sections->groupBy('activity_type');
        }
        return $grouped;
    }

    public function generateSectionsForContextButton(Request $request, PlanExpectedCount $expectedCount)
    {
        try {
            $this->generateSectionsLogic22($expectedCount); // تمرير كائن العدد المتوقع مباشرة
            return redirect()->route('data-entry.sections.manageContext', $expectedCount->id)
                ->with('success', 'Sections generated/updated successfully.');
        } catch (Exception $e) {
            Log::error('Manual Section Generation Failed for ExpectedCount ID ' . $expectedCount->id . ': ' . $e->getMessage());
            return redirect()->back()->with('error', 'Failed to generate sections: ' . $e->getMessage());
        }
    }

    private function generateSectionsLogic22(PlanExpectedCount $expectedCount)
    {
        Log::info("Generating sections for ExpectedCount ID: {$expectedCount->id}");

        $planSubjects = PlanSubject::with('subject.subjectCategory')
            ->where('plan_id', $expectedCount->plan_id)
            ->where('plan_level', $expectedCount->plan_level)
            ->where('plan_semester', $expectedCount->plan_semester)
            ->get();

        if ($planSubjects->isEmpty()) {
            Log::info("No subjects for context.");
            return;
        }

        $totalExpected = $expectedCount->male_count + $expectedCount->female_count;

        // حذف الشعب القديمة
        Section::whereIn('plan_subject_id', $planSubjects->pluck('id'))
            ->where('academic_year', $expectedCount->academic_year)
            ->where('semester', $expectedCount->plan_semester)
            ->where(function ($q) use ($expectedCount) {
                is_null($expectedCount->branch) ? $q->whereNull('branch') : $q->where('branch', $expectedCount->branch);
            })
            ->delete();
        Log::info("Deleted old sections for context of ExpectedCount ID: {$expectedCount->id}");

        if ($totalExpected <= 0) {
            Log::info("Total expected is zero.");
            return;
        }

        foreach ($planSubjects as $ps) {
            $subject = $ps->subject;
            if (!$subject || !$subject->subjectCategory) {
                Log::warning("Skipping PS ID {$ps->id}, missing subject/category info.");
                continue;
            }

            $subjectCategoryName = strtolower($subject->subjectCategory->subject_category_name);
            $planSubjectId = $ps->id;
            $subjectIdForLog = $subject->id;
            $nextSectionNumberForThisPS = 1;

            Log::info("Processing Subject ID {$subjectIdForLog} (Category: {$subjectCategoryName}), PlanSubject ID: {$planSubjectId}");

            // تحديد سعة الشعب النظرية
            $capacityTheoreticalToUse = self::DEFAULT_THEORY_CAPACITY_FALLBACK;
            if (isset($subject->load_theoretical_section) && $subject->load_theoretical_section > 0) {
                $capacityTheoreticalToUse = $subject->load_theoretical_section;
            }
            Log::info("Subject ID {$subject->id}: Theoretical Capacity to Use = {$capacityTheoreticalToUse}");

            // تحديد سعة الشعب العملية
            $capacityPracticalToUse = self::DEFAULT_PRACTICAL_CAPACITY_FALLBACK;
            if (isset($subject->load_practical_section) && $subject->load_practical_section > 0) {
                $capacityPracticalToUse = $subject->load_practical_section;
            }
            Log::info("Subject ID {$subject->id}: Practical Capacity to Use = {$capacityPracticalToUse}");

            // 1. إنشاء الجزء النظري (إذا كانت المادة نظرية أو مشتركة وتحتوي على ساعات نظرية)
            if (($subject->theoretical_hours ?? 0) > 0 &&
                (Str::contains($subjectCategoryName, ['theory', 'نظري']) || Str::contains($subjectCategoryName, ['combined', 'مشترك', 'نظري وعملي']))
            ) {
                $numTheorySections = ceil($totalExpected / $capacityTheoreticalToUse);
                $baseStudentsPerSection = floor($totalExpected / $numTheorySections);
                $remainderStudents = $totalExpected % $numTheorySections;

                for ($i = 0; $i < $numTheorySections; $i++) {
                    $studentsInThisSection = $baseStudentsPerSection + ($remainderStudents > 0 ? 1 : 0);
                    if ($remainderStudents > 0) $remainderStudents--;

                    Section::create([
                        'plan_subject_id' => $planSubjectId,
                        'academic_year' => $expectedCount->academic_year,
                        'semester' => $expectedCount->plan_semester,
                        'activity_type' => 'Theory',
                        'section_number' => $nextSectionNumberForThisPS++,
                        'student_count' => $studentsInThisSection,
                        'section_gender' => 'Mixed',
                        'branch' => $expectedCount->branch,
                    ]);
                    Log::info("Created Theory Section #" . ($nextSectionNumberForThisPS - 1) .
                        " with {$studentsInThisSection} students for PS ID {$planSubjectId}");
                }
            }

            // 2. إنشاء الجزء العملي (إذا كانت المادة عملية أو مشتركة وتحتوي على ساعات عملية)
            if (($subject->practical_hours ?? 0) > 0 &&
                (Str::contains($subjectCategoryName, ['practical', 'عملي']) || Str::contains($subjectCategoryName, ['combined', 'مشترك', 'نظري وعملي']))
            ) {
                if ($totalExpected > 0 && $capacityPracticalToUse > 0) {
                    $numLabSections = ceil($totalExpected / $capacityPracticalToUse);
                    $baseStudentsPerSection = floor($totalExpected / $numLabSections);
                    $remainderStudents = $totalExpected % $numLabSections;

                    for ($i = 0; $i < $numLabSections; $i++) {
                        $studentsInThisSection = $baseStudentsPerSection + ($remainderStudents > 0 ? 1 : 0);
                        if ($remainderStudents > 0) $remainderStudents--;

                        if ($studentsInThisSection > 0) {
                            Section::create([
                                'plan_subject_id' => $planSubjectId,
                                'academic_year' => $expectedCount->academic_year,
                                'semester' => $expectedCount->plan_semester,
                                'activity_type' => 'Practical',
                                'section_number' => $nextSectionNumberForThisPS++,
                                'student_count' => $studentsInThisSection,
                                'section_gender' => 'Mixed',
                                'branch' => $expectedCount->branch,
                            ]);
                            Log::info("Created Practical Section #" . ($nextSectionNumberForThisPS - 1) .
                                " with {$studentsInThisSection} students for PS ID {$planSubjectId}");
                        }
                    }
                }
            }

            if ($nextSectionNumberForThisPS == 1) {
                Log::warning("No sections (Theory or Practical) were created for Subject ID {$subjectIdForLog} (PS ID {$planSubjectId}). Check hours and category.");
            }
        }

        // إنشاء المجموعات بعد إنشاء الشعب
        $this->generatePlanGroups($expectedCount);

        Log::info("Finished generating sections for ExpectedCount ID: {$expectedCount->id}");
    }

    /**
     * دالة جديدة لإنشاء المجموعات بناءً على الشعب المُنشأة
     */
    private function generatePlanGroups(PlanExpectedCount $expectedCount)
    {
        try {
            Log::info("Generating plan groups for ExpectedCount ID: {$expectedCount->id}");

            // حذف المجموعات القديمة لهذا السياق
            PlanGroup::clearContextGroups(
                $expectedCount->plan_id,
                $expectedCount->plan_level,
                $expectedCount->academic_year,
                $expectedCount->plan_semester,
                $expectedCount->branch
            );

            // جلب كل الشعب في هذا السياق
            $sectionsInContext = Section::where('academic_year', $expectedCount->academic_year)
                ->where('semester', $expectedCount->plan_semester)
                ->where(function ($q) use ($expectedCount) {
                    is_null($expectedCount->branch) ? $q->whereNull('branch') : $q->where('branch', $expectedCount->branch);
                })
                ->whereHas('planSubject', function ($q) use ($expectedCount) {
                    $q->where('plan_id', $expectedCount->plan_id)
                      ->where('plan_level', $expectedCount->plan_level)
                      ->where('plan_semester', $expectedCount->plan_semester);
                })
                ->with(['planSubject.subject'])
                ->get();

            if ($sectionsInContext->isEmpty()) {
                Log::info("No sections found for context. No groups to create.");
                return;
            }

            // حساب عدد المجموعات (نفس المنطق من buildStudentGroupMap)
            $maxPracticalSections = $sectionsInContext->where('activity_type', 'Practical')
                ->groupBy('plan_subject_id')->map->count()->max() ?? 0;
            $numberOfStudentGroups = $maxPracticalSections > 0 ? $maxPracticalSections : 1;

            Log::info("Calculated number of student groups: {$numberOfStudentGroups}");

            // إنشاء المجموعات
            $groupsToInsert = [];

            for ($groupIndex = 1; $groupIndex <= $numberOfStudentGroups; $groupIndex++) {
                // ربط الشعب النظرية بكل المجموعات
                $theorySections = $sectionsInContext->where('activity_type', 'Theory');
                foreach ($theorySections as $theorySection) {
                    $groupsToInsert[] = [
                        'plan_id' => $expectedCount->plan_id,
                        'plan_level' => $expectedCount->plan_level,
                        'academic_year' => $expectedCount->academic_year,
                        'semester' => $expectedCount->plan_semester,
                        'branch' => $expectedCount->branch,
                        'section_id' => $theorySection->id,
                        'group_no' => $groupIndex,
                        'group_size' => $theorySection->student_count,
                        'gender' => $theorySection->section_gender ?? 'Mixed',
                        'created_at' => now(),
                        'updated_at' => now(),
                    ];
                }

                // ربط الشعب العملية - كل شعبة عملية بمجموعة واحدة
                $practicalSectionsBySubject = $sectionsInContext->where('activity_type', 'Practical')
                    ->groupBy('plan_subject_id');

                foreach ($practicalSectionsBySubject as $sectionsForOneSubject) {
                    $sortedSections = $sectionsForOneSubject->sortBy('section_number')->values();
                    if ($sortedSections->has($groupIndex - 1)) {
                        $practicalSectionForThisGroup = $sortedSections->get($groupIndex - 1);
                        $groupsToInsert[] = [
                            'plan_id' => $expectedCount->plan_id,
                            'plan_level' => $expectedCount->plan_level,
                            'academic_year' => $expectedCount->academic_year,
                            'semester' => $expectedCount->plan_semester,
                            'branch' => $expectedCount->branch,
                            'section_id' => $practicalSectionForThisGroup->id,
                            'group_no' => $groupIndex,
                            'group_size' => $practicalSectionForThisGroup->student_count,
                            'gender' => $practicalSectionForThisGroup->section_gender ?? 'Mixed',
                            'created_at' => now(),
                            'updated_at' => now(),
                        ];
                    }
                }
            }

            // إدراج كل المجموعات دفعة واحدة
            if (!empty($groupsToInsert)) {
                PlanGroup::insert($groupsToInsert);
                Log::info("Created " . count($groupsToInsert) . " group assignments for ExpectedCount ID: {$expectedCount->id}");
            }

        } catch (Exception $e) {
            Log::error("Failed to generate plan groups for ExpectedCount ID: {$expectedCount->id}. Error: " . $e->getMessage());
            throw $e;
        }
    }

    /**
     * Store the specified section in storage within its context.
     */
    public function storeSectionInContext(Request $request, PlanExpectedCount $expectedCount)
    {
        $errorBagName = 'addSectionModal';
        $validator = Validator::make($request->all(), [
            'plan_subject_id' => 'required|integer|exists:plan_subjects,id',
            'activity_type' => ['required', Rule::in(['Theory', 'Practical'])],
            'academic_year' => 'required|integer|digits:4',
            'semester' => 'required|integer|in:1,2,3',
            'branch' => 'nullable|string|max:100',
            'section_number' => 'required|integer|min:1',
            'student_count' => 'required|integer|min:0',
            'section_gender' => ['required', Rule::in(['Male', 'Female', 'Mixed'])],
        ]);

        // dd($request->input('plan_subject_id_from_modal'));

        $planSubjectId = $request->input('plan_subject_id_from_modal');
        $academicYear = $request->input('academic_year');
        $semester = $request->input('semester');
        $branch = $request->input('branch');
        $activityType = $request->input('activity_type');

        $validator->after(function ($validator) use ($request, $planSubjectId, $academicYear, $semester, $branch, $activityType) {
            if (!$validator->errors()->hasAny()) {
                $exists = Section::where('plan_subject_id', $planSubjectId)
                    ->where('academic_year', $academicYear)->where('semester', $semester)
                    ->where('activity_type', $activityType)
                    ->where('section_number', $request->input('section_number'))
                    ->where(fn($q) => is_null($branch) ? $q->whereNull('branch') : $q->where('branch', $branch))
                    ->exists();
                if ($exists) {
                    // dd($request->all());
                    $validator->errors()->add('section_unique', 'This section (number & activity type) already exists.');
                }
            }
        });

        // التحقق من تجاوز العدد الإجمالي للطلاب
        $planSubjectForContext = PlanSubject::find($planSubjectId);
        if ($planSubjectForContext) {
            $expectedCount = PlanExpectedCount::where('plan_id', $planSubjectForContext->plan_id)
                ->where('academic_year', $academicYear)
                ->where('plan_level', $planSubjectForContext->plan_level)
                ->where('plan_semester', $planSubjectForContext->plan_semester)
                ->where(fn($q) => is_null($branch) ? $q->whereNull('branch') : $q->where('branch', $branch))
                ->first();

            if ($expectedCount) {
                $validator->after(function ($validator) use ($request, $expectedCount, $planSubjectId, $academicYear, $semester, $branch, $activityType) {
                    if (!$validator->errors()->has('student_count')) {
                        $newStudentCount = (int) $request->input('student_count');
                        $totalExpected = $expectedCount->male_count + $expectedCount->female_count;
                        $otherSectionsSum = Section::where('plan_subject_id', $planSubjectId)
                            ->where('academic_year', $academicYear)->where('semester', $semester)
                            ->where('activity_type', $activityType)->where('branch', $branch)
                            ->sum('student_count');
                        if (($otherSectionsSum + $newStudentCount) > $totalExpected) {
                            $validator->errors()->add('student_count_total', "Total students (" . ($otherSectionsSum + $newStudentCount) . ") exceeds expected ({$totalExpected}). Max remaining: " . max(0, $totalExpected - $otherSectionsSum));
                        }
                    }
                });
            }
        }


        $redirectParams = ['plan_subject_id' => $planSubjectId, 'academic_year' => $academicYear, 'semester_of_sections' => $semester, 'branch' => $branch];
        if ($validator->fails()) {
            return redirect()->route('data-entry.sections.manageSubjectContext', $redirectParams)->with('error', 'Failed to create section.')
                ->withErrors($validator, $errorBagName)->withInput();
        }

        try {
            $data = $validator->validated();
            $data['branch'] = empty($data['branch']) ? null : $data['branch'];
            $newSection = Section::create($data);

            // تحديث المجموعات بعد إضافة شعبة جديدة
            $this->updatePlanGroupsForSection($newSection, $expectedCount);

            return redirect()->route('data-entry.sections.manageSubjectContext', $redirectParams)->with('success', 'Section added.');
        } catch (Exception $e) {
            Log::error('Section Store Failed: ' . $e->getMessage());
            return redirect()->route('data-entry.sections.manageSubjectContext', $redirectParams)->with('error', 'Failed to add section.')->withInput();
        }
    }


    /**
     * Update the specified section in storage within its context.
     */
    public function updateSectionInContext(Request $request, Section $section) // Route Model Binding للشعبة
    {
        // 1. جلب سياق العدد المتوقع لهذه الشعبة
        $expectedCountContext = PlanExpectedCount::where('plan_id', $section->planSubject->plan_id)
            ->where('academic_year', $section->academic_year)
            ->where('plan_level', $section->planSubject->plan_level)
            ->where('plan_semester', $section->planSubject->plan_semester) // فصل الخطة
            ->where('branch', $section->branch) // فرع الشعبة هو فرع السياق
            ->first();

        if (!$expectedCountContext) {
            Log::error("Context (ExpectedCount) not found for updating section ID: {$section->id}");
            // يمكنك إعادة توجيه مع خطأ عام، أو السماح بالتحديث بدون هذا التحقق إذا لم يكن العدد المتوقع إلزامياً
            return redirect()->back()->with('error', 'Could not determine the context for validation. Update aborted.');
        }

        $errorBagName = 'updateSectionModal_' . $section->id; // اسم مميز للـ error bag

        // 2. Validation الأساسي للحقول
        $validator = Validator::make($request->all(), [
            'section_number' => 'required|integer|min:1',
            'student_count' => 'required|integer|min:0', // ** سنضيف التحقق من المجموع لاحقاً **
            'section_gender' => ['required', Rule::in(['Male', 'Female', 'Mixed'])],
            // الفرع لا يتغير عادة من هنا
        ]);

        // 3. التحقق من تفرد رقم الشعبة (إذا تغير)
        $validator->after(function ($validator) use ($request, $section) {
            if (!$validator->errors()->has('section_number') && $request->input('section_number') != $section->section_number) {
                $exists = Section::where('plan_subject_id', $section->plan_subject_id)
                    ->where('academic_year', $section->academic_year)
                    ->where('semester', $section->semester)
                    ->where('activity_type', $section->activity_type)
                    ->where('section_number', $request->input('section_number'))
                    ->where('branch', $section->branch)
                    ->where('id', '!=', $section->id)
                    ->exists();
                if ($exists) {
                    $validator->errors()->add('section_unique', 'This section number already exists for this subject in this context.');
                }
            }
        });

        // *** 4. التحقق من عدم تجاوز العدد الإجمالي المتوقع للطلاب ***
        $validator->after(function ($validator) use ($request, $section, $expectedCountContext) {
            if (!$validator->errors()->has('student_count')) { // فقط إذا كان عدد الطلاب المدخل صحيحاً
                $newStudentCountForThisSection = (int) $request->input('student_count');
                $totalExpectedStudents = $expectedCountContext->male_count + $expectedCountContext->female_count;

                // جلب مجموع طلاب الشعب الأخرى لنفس المادة ونفس نوع النشاط ونفس السياق
                $otherSectionsStudentSum = Section::where('plan_subject_id', $section->plan_subject_id)
                    ->where('academic_year', $section->academic_year)
                    ->where('semester', $section->semester)
                    ->where('activity_type', $section->activity_type)
                    ->where('branch', $section->branch)
                    ->where('id', '!=', $section->id) // استثناء الشعبة الحالية
                    ->sum('student_count');

                $newTotalAllocated = $otherSectionsStudentSum + $newStudentCountForThisSection;

                if ($newTotalAllocated > $totalExpectedStudents) {
                    $validator->errors()->add(
                        'student_count', // ربط الخطأ بحقل عدد الطلاب
                        "The total number of students allocated to sections ({$newTotalAllocated}) cannot exceed the expected total ({$totalExpectedStudents}) for this subject/activity."
                    );
                }
            }
        });

        if ($validator->fails()) {
            return redirect()->route('data-entry.sections.manageContext', $expectedCountContext->id)
                ->withErrors($validator) // إرسال الأخطاء للـ error bag الافتراضي
                ->withInput();
        }

        // 5. Prepare Data (فقط الحقول المسموح بتعديلها)
        $dataToUpdate = $validator->safe()->only(['section_number', 'student_count', 'section_gender']);
        // الفرع لا يتم تعديله من هنا عادةً لأنه جزء من السياق

        // 6. Update Database
        try {
            $section->update($dataToUpdate);

            // تحديث المجموعات بعد تحديث الشعبة
            $this->updatePlanGroupsForSection($section, $expectedCountContext);

            return redirect()->route('data-entry.sections.manageContext', $expectedCountContext->id)
                ->with('success', 'Section updated successfully.');
        } catch (Exception $e) {
            Log::error('Section Update (in context) Failed: ' . $e->getMessage());
            return redirect()->route('data-entry.sections.manageContext', $expectedCountContext->id)
                ->with('error', 'Failed to update section: ' . $e->getMessage())
                ->withInput();
        }
    }

    /**
     * Remove the specified section from storage within its context.
     */
    public function destroySectionInContext(Section $section)
    {
        // تحديد السياق للعودة إليه
        $expectedCountContext = PlanExpectedCount::where('plan_id', $section->planSubject->plan_id)
            ->where('academic_year', $section->academic_year)
            ->where('plan_level', $section->planSubject->plan_level)
            ->where('plan_semester', $section->planSubject->plan_semester)
            ->where('branch', $section->branch)
            ->first();
        try {
            // حذف المجموعات المرتبطة بالشعبة أولاً
            PlanGroup::clearSectionGroups($section->id);

            $section->delete();

            // إعادة توليد المجموعات لكامل السياق بعد حذف الشعبة
            if ($expectedCountContext) {
                $this->generatePlanGroups($expectedCountContext);
                return redirect()->route('data-entry.sections.manageContext', $expectedCountContext->id)
                    ->with('success', 'Section deleted successfully.');
            }
            // إذا لم يتم العثور على سياق العدد المتوقع ارجع لصفحة الشعب العامة
            return redirect()->route('data-entry.sections.index')
                ->with('success', 'Section deleted, but could not redirect to specific context.');
        } catch (Exception $e) {
            Log::error('Section Deletion (in context) Failed: ' . $e->getMessage());
            $redirectRoute = $expectedCountContext ? route('data-entry.sections.manageContext', $expectedCountContext->id) : route('data-entry.sections.index');
            return redirect($redirectRoute)->with('error', 'Failed to delete section: ' . $e->getMessage());
        }
    }

    /**
     * دالة مساعدة لتحديث المجموعات عند إضافة/تحديث شعبة واحدة
     */
    private function updatePlanGroupsForSection(Section $section, PlanExpectedCount $expectedCount)
    {
        try {
            Log::info("Updating plan groups after section change for Section ID: {$section->id}");

            // إعادة توليد كل المجموعات لهذا السياق
            $this->generatePlanGroups($expectedCount);

            Log::info("Plan groups updated successfully after section change");
        } catch (Exception $e) {
            Log::error("Failed to update plan groups for section {$section->id}: " . $e->getMessage());
            // لا نوقف العملية، لكن نسجل الخطأ
        }
    }


    // =============================================
    //             API Controller Methods
    // =============================================

    /**
     * عرض جميع الشعب لسياق محدد
     */
    public function APIGetSectionsForContext(PlanExpectedCount $expectedCount)
    {
        try {
            $sections = Section::where('academic_year', $expectedCount->academic_year)
                ->where('semester', $expectedCount->plan_semester)
                ->where('branch', $expectedCount->branch)
                ->with('planSubject.subject')
                ->get();

            return response()->json([
                'success' => true,
                'data' => $sections,
                'message' => 'Sections retrieved successfully'
            ]);
        } catch (Exception $e) {
            Log::error('API Get Sections Failed: ' . $e->getMessage());
            return response()->json([
                'success' => false,
                'message' => 'Failed to retrieve sections'
            ], 500);
        }
    }

    /**
     * عرض شعب لمادة محددة في سياق معين
     */
    public function APIGetSectionsForSubject(PlanExpectedCount $expectedCount, PlanSubject $planSubject)
    {
        try {
            $sections = Section::where('plan_subject_id', $planSubject->id)
                ->where('academic_year', $expectedCount->academic_year)
                ->where('semester', $expectedCount->plan_semester)
                ->where('branch', $expectedCount->branch)
                ->get();

            return response()->json([
                'success' => true,
                'data' => [
                    'theory_sections' => $sections->where('activity_type', 'Theory'),
                    'practical_sections' => $sections->where('activity_type', 'Practical')
                ],
                'message' => 'Subject sections retrieved successfully'
            ]);
        } catch (Exception $e) {
            Log::error('API Get Subject Sections Failed: ' . $e->getMessage());
            return response()->json([
                'success' => false,
                'message' => 'Failed to retrieve subject sections'
            ], 500);
        }
    }

    /**
     * إنشاء شعبة جديدة
     */
    public function APIStoreSectionInContext(Request $request, PlanExpectedCount $expectedCount)
    {
        $validator = Validator::make($request->all(), [
            'plan_subject_id' => 'required|integer|exists:plan_subjects,id',
            'activity_type' => ['required', Rule::in(['Theory', 'Practical'])],
            'section_number' => 'required|integer|min:1',
            'student_count' => 'required|integer|min:0',
            'section_gender' => ['required', Rule::in(['Male', 'Female', 'Mixed'])],
        ]);

        // التحقق من تفرد الشعبة
        $validator->after(function ($validator) use ($request, $expectedCount) {
            $exists = Section::where('plan_subject_id', $request->plan_subject_id)
                ->where('academic_year', $expectedCount->academic_year)
                ->where('semester', $expectedCount->plan_semester)
                ->where('activity_type', $request->activity_type)
                ->where('section_number', $request->section_number)
                ->where('branch', $expectedCount->branch)
                ->exists();

            if ($exists) {
                $validator->errors()->add('section_unique', 'This section already exists in this context.');
            }
        });

        // التحقق من عدم تجاوز العدد المتوقع
        $validator->after(function ($validator) use ($request, $expectedCount) {
            $planSubject = PlanSubject::find($request->plan_subject_id);
            if ($planSubject) {
                $planSubjectId = $request->input('plan_subject_id_from_modal');
                $academicYear = $request->input('academic_year');
                $semester = $request->input('semester');
                $branch = $request->input('branch');
                $activityType = $request->input('activity_type');

                $totalExpected = $expectedCount->male_count + $expectedCount->female_count;
                $currentTotal = Section::where('plan_subject_id', $request->plan_subject_id)
                    ->where('academic_year', $expectedCount->academic_year)
                    ->where('semester', $expectedCount->plan_semester)
                    ->where('activity_type', $request->activity_type)
                    ->where('branch', $expectedCount->branch)
                    ->sum('student_count');

                $newStudentCount = (int) $request->input('student_count');
                $totalExpected = $expectedCount->male_count + $expectedCount->female_count;
                $otherSectionsSum = Section::where('plan_subject_id', $planSubjectId)
                    ->where('academic_year', $academicYear)->where('semester', $semester)
                    ->where('activity_type', $activityType)->where('branch', $branch)
                    ->sum('student_count');

                if (($currentTotal + $request->student_count) > $totalExpected) {
                    $validator->errors()->add('student_count_total', "Total students (" . ($otherSectionsSum + $newStudentCount) . ") exceeds expected ({$totalExpected}). Max remaining: " . max(0, $totalExpected - $otherSectionsSum));
                    // $validator->errors()->add('student_count', 'Total students exceed expected count.');

                }
            }
        });

        if ($validator->fails()) {
            return response()->json([
                'success' => false,
                'message' => 'Validation errors',
                'errors' => $validator->errors()
            ], 422);
        }

        try {
            $section = Section::create([
                'plan_subject_id' => $request->plan_subject_id,
                'academic_year' => $expectedCount->academic_year,
                'semester' => $expectedCount->plan_semester,
                'activity_type' => $request->activity_type,
                'section_number' => $request->section_number,
                'student_count' => $request->student_count,
                'section_gender' => $request->section_gender,
                'branch' => $expectedCount->branch,
            ]);

            // تحديث المجموعات
            $this->updatePlanGroupsForSection($section, $expectedCount);

            return response()->json([
                'success' => true,
                'data' => $section,
                'message' => 'Section created successfully'
            ], 201);
        } catch (Exception $e) {
            Log::error('API Section Creation Failed: ' . $e->getMessage());
            return response()->json([
                'success' => false,
                'message' => 'Failed to create section'
            ], 500);
        }
    }

    /**
     * تحديث شعبة موجودة
     */
    public function APIUpdateSectionInContext(Request $request, Section $section)
    {
        $validator = Validator::make($request->all(), [
            'section_number' => 'required|integer|min:1',
            'student_count' => 'required|integer|min:0',
            'section_gender' => ['required', Rule::in(['Male', 'Female', 'Mixed'])],
        ]);

        // التحقق من تفرد رقم الشعبة إذا تغير
        $validator->after(function ($validator) use ($request, $section) {
            if ($request->section_number != $section->section_number) {
                $exists = Section::where('plan_subject_id', $section->plan_subject_id)
                    ->where('academic_year', $section->academic_year)
                    ->where('semester', $section->semester)
                    ->where('activity_type', $section->activity_type)
                    ->where('section_number', $request->section_number)
                    ->where('branch', $section->branch)
                    ->where('id', '!=', $section->id)
                    ->exists();

                if ($exists) {
                    $validator->errors()->add('section_unique', 'This section number already exists.');
                }
            }
        });

        // التحقق من عدم تجاوز العدد المتوقع
        $validator->after(function ($validator) use ($request, $section) {
            $expectedCount = PlanExpectedCount::where('plan_id', $section->planSubject->plan_id)
                ->where('academic_year', $section->academic_year)
                ->where('plan_level', $section->planSubject->plan_level)
                ->where('plan_semester', $section->planSubject->plan_semester)
                ->where('branch', $section->branch)
                ->first();

            if ($expectedCount) {
                $totalExpected = $expectedCount->male_count + $expectedCount->female_count;
                $currentTotal = Section::where('plan_subject_id', $section->plan_subject_id)
                    ->where('academic_year', $section->academic_year)
                    ->where('semester', $section->semester)
                    ->where('activity_type', $section->activity_type)
                    ->where('branch', $section->branch)
                    ->where('id', '!=', $section->id)
                    ->sum('student_count');

                if (($currentTotal + $request->student_count) > $totalExpected) {
                    $validator->errors()->add('student_count', 'Total students exceed expected count.');
                }
            }
        });

        if ($validator->fails()) {
            return response()->json([
                'success' => false,
                'message' => 'Validation errors',
                'errors' => $validator->errors()
            ], 422);
        }

        try {
            $section->update([
                'section_number' => $request->section_number,
                'student_count' => $request->student_count,
                'section_gender' => $request->section_gender,
            ]);

            // تحديث المجموعات
            $expectedCount = PlanExpectedCount::where('plan_id', $section->planSubject->plan_id)
                ->where('academic_year', $section->academic_year)
                ->where('plan_level', $section->planSubject->plan_level)
                ->where('plan_semester', $section->planSubject->plan_semester)
                ->where('branch', $section->branch)
                ->first();

            if ($expectedCount) {
                $this->updatePlanGroupsForSection($section, $expectedCount);
            }

            return response()->json([
                'success' => true,
                'data' => $section,
                'message' => 'Section updated successfully'
            ]);
        } catch (Exception $e) {
            Log::error('API Section Update Failed: ' . $e->getMessage());
            return response()->json([
                'success' => false,
                'message' => 'Failed to update section'
            ], 500);
        }
    }

    /**
     * حذف شعبة
     */
    public function APIDestroySectionInContext(Section $section)
    {
        try {
            // حذف المجموعات المرتبطة أولاً
            PlanGroup::clearSectionGroups($section->id);

            // العثور على السياق لإعادة توليد المجموعات
            $expectedCount = PlanExpectedCount::where('plan_id', $section->planSubject->plan_id)
                ->where('academic_year', $section->academic_year)
                ->where('plan_level', $section->planSubject->plan_level)
                ->where('plan_semester', $section->planSubject->plan_semester)
                ->where('branch', $section->branch)
                ->first();

            $section->delete();

            // إعادة توليد المجموعات للسياق
            if ($expectedCount) {
                $this->generatePlanGroups($expectedCount);
            }

            return response()->json([
                'success' => true,
                'message' => 'Section deleted successfully'
            ]);
        } catch (Exception $e) {
            Log::error('API Section Deletion Failed: ' . $e->getMessage());
            return response()->json([
                'success' => false,
                'message' => 'Failed to delete section'
            ], 500);
        }
    }

    /**
     * إنشاء شعب تلقائياً
     */
    public function APIGenerateSectionsForContext(Request $request, PlanExpectedCount $expectedCount)
    {
        try {
            $this->generateSectionsLogic22($expectedCount);

            return response()->json([
                'success' => true,
                'message' => 'Sections generated successfully'
            ]);
        } catch (Exception $e) {
            Log::error('API Generate Sections Failed: ' . $e->getMessage());
            return response()->json([
                'success' => false,
                'message' => 'Failed to generate sections'
            ], 500);
        }
    }

}
----------------------------------------------------------------------------------------------------
app\Http\Controllers\DataEntry\SelectionTypeController.php
<?php

namespace App\Http\Controllers\DataEntry;

use App\Http\Controllers\Controller;
use App\Models\SelectionType;
use Exception;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Log;
use Illuminate\Validation\Rule;

class SelectionTypeController extends Controller
{
    /**
     * Display a listing of the resource.
     */
    public function index()
    {
        try {
            $selectionTypes = SelectionType::latest('selection_type_id')->paginate(15);
            return view('dashboard.algorithm.selection-types', compact('selectionTypes'));
        } catch (Exception $e) {
            Log::error("Error fetching Selection Types: " . $e->getMessage());
            return redirect()->back()->with('error', 'Could not load Selection Methods page.');
        }
    }

    /**
     * Show the form for creating a new resource.
     */
    public function create()
    {
        //
    }

    /**
     * Store a newly created resource in storage.
     */
    public function store(Request $request)
    {
        $validatedData = $request->validate([
            'name' => 'required|string|max:100|unique:selection_types,name',
            'slug' => 'required|string|max:255|unique:selection_types,slug|alpha_dash',
            'description' => 'nullable|string|max:500',
            'is_active' => 'sometimes|boolean',
        ]);

        try {
            $dataToCreate = $validatedData;
            $dataToCreate['is_active'] = $request->has('is_active');
            SelectionType::create($dataToCreate);
            return redirect()->route('algorithm-control.selection-types.index')->with('success', 'Selection method created successfully.');
        } catch (Exception $e) {
            Log::error("Selection Type Creation Failed: " . $e->getMessage());
            return redirect()->back()->with('error', 'Failed to create selection method.')->withInput();
        }
    }

    /**
     * Display the specified resource.
     */
    public function show(SelectionType $selectionType)
    {
        //
    }

    /**
     * Show the form for editing the specified resource.
     */
    public function edit(SelectionType $selectionType)
    {
        //
    }

    /**
     * Update the specified resource in storage.
     */
    public function update(Request $request, SelectionType $selectionType)
    {
        // لاحظ أن اسم المتغير هو $selectionType كما يولده Laravel
        $errorBagName = 'editSelectionModal_' . $selectionType->selection_type_id;
        $validatedData = $request->validate([
            'name' => ['required', 'string', 'max:100', Rule::unique('selection_types')->ignore($selectionType->selection_type_id, 'selection_type_id')],
            'slug' => 'required|string|max:255|unique:selection_types,slug,' . $selectionType->selection_type_id . ',selection_type_id',
            'description' => 'nullable|string|max:500',
            'is_active' => 'sometimes|boolean',
        ]);

        try {
            $dataToUpdate = $validatedData;
            $dataToUpdate['is_active'] = $request->has('is_active');
            $selectionType->update($dataToUpdate);
            return redirect()->route('algorithm-control.selection-types.index')->with('success', 'Selection method updated successfully.');
        } catch (Exception $e) {
            Log::error("Selection Type Update Failed for ID {$selectionType->selection_type_id}: " . $e->getMessage());
            return redirect()->back()->withErrors(['update_error' => 'Failed to update selection method.'], $errorBagName)->withInput();
        }
    }

    /**
     * Remove the specified resource from storage.
     */
    public function destroy(SelectionType $selectionType)
    {
        try {
            // (اختياري) التحقق إذا كانت الطريقة مستخدمة
            // if ($selectionType->populations()->exists()) {
            //     return redirect()->route('algorithm-control.selection-types.index')->with('error', 'Cannot delete: This method is used in historical data.');
            // }
            $selectionType->delete();
            return redirect()->route('algorithm-control.selection-types.index')->with('success', 'Selection method deleted successfully.');
        } catch (Exception $e) {
            Log::error("Selection Type Deletion Failed for ID {$selectionType->selection_type_id}: " . $e->getMessage());
            return redirect()->route('algorithm-control.selection-types.index')->with('error', 'Failed to delete selection method.');
        }
    }
}
--------------------------------------------------------------------------------------------------------
app\Http\Controllers\DataEntry\SubjectCategoryController.php
<?php

namespace App\Http\Controllers\DataEntry;

use App\Http\Controllers\Controller;
use App\Models\SubjectCategory; // تم استيراده
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Log;
use Illuminate\Validation\Rule;
use Exception;
use Illuminate\Support\Facades\Validator;
use Maatwebsite\Excel\Facades\Excel;

class SubjectCategoryController extends Controller
{
    // =============================================
    //            Web Controller Methods
    // =============================================

    /**
     * Display a listing of the subject categories.
     */
    public function index()
    {
        try {
            // تغيير اسم المتغير والموديل والـ view
            $subjectCategories = SubjectCategory::latest('id')->paginate(15);
            return view('dashboard.data-entry.subject-categories', compact('subjectCategories'));
        } catch (Exception $e) {
            Log::error('Error fetching subject categories: ' . $e->getMessage());
            return redirect()->back()->with('error', 'Could not load subject categories.');
        }
    }

    /**
     * Store a newly created subject category in storage.
     */
    public function store(Request $request)
    {
        // 1. Validation (تغيير اسم الحقل والجدول)
        $validatedData = $request->validate([
            'subject_category_name' => 'required|string|max:100|unique:subjects_categories,subject_category_name',
        ]);

        // 2. Prepare Data
        $data = $validatedData;

        // 3. Add to Database
        try {
            SubjectCategory::create($data);
            // 4. Redirect (تغيير الـ route والرسالة)
            return redirect()->route('data-entry.subject-categories.index')
                ->with('success', 'Subject Category created successfully.');
        } catch (Exception $e) {
            Log::error('Subject Category Creation Failed: ' . $e->getMessage());
            return redirect()->back()
                ->with('error', 'Failed to create subject category.')
                ->withInput();
        }
    }

    /**
     * Update the specified subject category in storage.
     */
    public function update(Request $request, SubjectCategory $subjectCategory) // تغيير المتغير
    {
        // 1. Validation (تغيير اسم الحقل والجدول والمتغير)
        $validatedData = $request->validate([
            'subject_category_name' => [
                'required',
                'string',
                'max:100',
                Rule::unique('subjects_categories')->ignore($subjectCategory->id),
            ],
        ]);

        // 2. Prepare Data
        $data = $validatedData;

        // 3. Update Database
        try {
            $subjectCategory->update($data);
            // 4. Redirect (تغيير الـ route والرسالة)
            return redirect()->route('data-entry.subject-categories.index')
                ->with('success', 'Subject Category updated successfully.');
        } catch (Exception $e) {
            Log::error('Subject Category Update Failed: ' . $e->getMessage());
            return redirect()->back()
                ->with('error', 'Failed to update subject category.')
                ->withInput();
        }
    }

    /**
     * Remove the specified subject category from storage.
     */
    public function destroy(SubjectCategory $subjectCategory) // تغيير المتغير
    {
        // التحقق من المواد المرتبطة
        if ($subjectCategory->subjects()->exists()) {
            return redirect()->route('data-entry.subject-categories.index')
                ->with('error', 'Cannot delete category. It is assigned to subjects.');
        }

        // 1. Delete
        try {
            $subjectCategory->delete();
            // 2. Redirect (تغيير الـ route والرسالة)
            return redirect()->route('data-entry.subject-categories.index')
                ->with('success', 'Subject Category deleted successfully.');
        } catch (Exception $e) {
            Log::error('Subject Category Deletion Failed: ' . $e->getMessage());
            return redirect()->route('data-entry.subject-categories.index')
                ->with('error', 'Failed to delete subject category.');
        }
    }


    /**
     * Handle bulk upload of subject categories from Excel file for Web.
     */
    public function bulkUpload(Request $request)
    {
        $request->validate([
            'subject_category_excel_file' => 'required|file|mimes:xlsx,xls,csv|max:2048',
        ], [], ['subject_category_excel_file' => 'Excel file']);

        try {
            $rows = Excel::toCollection(collect(), $request->file('subject_category_excel_file'))->first();

            if ($rows->isEmpty() || $rows->count() <= 1) {
                return redirect()->route('data-entry.subject-categories.index')
                                 ->with('error', 'Uploaded Excel file is empty or has no data rows after the header.');
            }

            $createdCount = 0;
            $skippedCount = 0;
            $skippedDetails = [];
            $processedNames = collect(); // لتتبع الأسماء التي تمت معالجتها من الملف الحالي

            // الحصول على الصف الأول كعناوين (بتحويلها لـ snake_case)
            // هذا يفترض أن اسم العمود في الإكسل هو "subject_category_name" أو ما يشبهه
            $header = $rows->first()->map(fn ($item) => strtolower(str_replace([' ', '-'], '_', $item ?? '')));
            $dataRows = $rows->slice(1); // إزالة صف العناوين

            foreach ($dataRows as $rowKey => $rowArray) {
                // تحويل الصف الحالي لمصفوفة باستخدام العناوين كمفاتيح
                $row = $header->combine($rowArray->map(fn($val) => trim($val ?? '')));
                $currentRowNumber = $rowKey + 2; // رقم الصف الفعلي في الإكسل

                $categoryName = $row->get('subject_category_name', ''); // جلب القيمة

                // 1. تجاهل الأسطر الفارغة
                if (empty($categoryName)) {
                    $skippedCount++;
                    $skippedDetails[] = "Row {$currentRowNumber}: Skipped because subject_category_name is empty.";
                    continue;
                }

                // 2. فحص التكرار داخل الملف نفسه
                if ($processedNames->contains($categoryName)) {
                    $skippedCount++;
                    $skippedDetails[] = "Row {$currentRowNumber}: Skipped duplicate category name '{$categoryName}' from within this file.";
                    continue;
                }

                // 3. التحقق من وجود الاسم في قاعدة البيانات (أسماء الفئات يجب أن تكون فريدة)
                $existingCategory = SubjectCategory::where('subject_category_name', $categoryName)->first();

                if ($existingCategory) {
                    // الفئة موجودة بالفعل، تجاهلها (لا نقوم بالتحديث هنا عادةً)
                    $skippedCount++;
                    $skippedDetails[] = "Row {$currentRowNumber}: Subject category '{$categoryName}' already exists in the system.";
                    $processedNames->push($categoryName); // اعتبره معالجاً
                    continue;
                }

                // 4. إنشاء فئة مادة جديدة
                SubjectCategory::create([
                    'subject_category_name' => $categoryName,
                ]);
                $createdCount++;
                $processedNames->push($categoryName);
            }

            $message = "Subject Categories bulk upload processed. ";
            if ($createdCount > 0) $message .= "{$createdCount} new categories created. ";
            if ($skippedCount > 0) $message .= "{$skippedCount} rows skipped. ";

            if (!empty($skippedDetails)) {
                // استخدام session flash لتمرير تفاصيل الصفوف المتجاهلة
                session()->flash('skipped_details', $skippedDetails);
            }

            return redirect()->route('data-entry.subject-categories.index')->with('success', trim($message));

        } catch (Exception $e) {
            Log::error('Subject Category Bulk Upload Failed: ' . $e->getMessage() . ' at ' . $e->getFile() . ':' . $e->getLine());
            return redirect()->route('data-entry.subject-categories.index')
                             ->with('error', 'An error occurred during bulk upload: ' . $e->getMessage());
        }
    }

    // =============================================
    //             API Controller Methods
    // =============================================
    public function apiIndex()
    {
        try {
            $categories = SubjectCategory::latest('id')->get(['id', 'subject_category_name']);
            return response()->json(['success' => true, 'data' => $categories], 200);
        } catch (Exception $e) { /* ... */
            return response()->json(['success' => false, 'message' => 'Server Error'], 500);
        }
    }
    public function apiStore(Request $request)
    {
        $validatedData = $request->validate(['subject_category_name' => 'required|string|max:100|unique:subjects_categories,subject_category_name']);
        try {
            $category = SubjectCategory::create($validatedData);
            return response()->json(['success' => true, 'data' => $category, 'message' => 'Category created.'], 201);
        } catch (Exception $e) { /* ... */
            return response()->json(['success' => false, 'message' => 'Failed to create.'], 500);
        }
    }
    public function apiShow(SubjectCategory $subjectCategory)
    {
        return response()->json(['success' => true, 'data' => $subjectCategory], 200);
    }
    public function apiUpdate(Request $request, SubjectCategory $subjectCategory)
    {
        $validatedData = $request->validate(['subject_category_name' => ['required', 'string', 'max:100', Rule::unique('subjects_categories')->ignore($subjectCategory->id)]]);
        try {
            $subjectCategory->update($validatedData);
            return response()->json(['success' => true, 'data' => $subjectCategory, 'message' => 'Category updated.'], 200);
        } catch (Exception $e) { /* ... */
            return response()->json(['success' => false, 'message' => 'Failed to update.'], 500);
        }
    }
    public function apiDestroy(SubjectCategory $subjectCategory)
    {
        if ($subjectCategory->subjects()->exists()) {
            return response()->json(['success' => false, 'message' => 'Cannot delete: assigned.'], 409);
        }
        try {
            $subjectCategory->delete();
            return response()->json(['success' => true, 'message' => 'Category deleted.'], 200);
        } catch (Exception $e) { /* ... */
            return response()->json(['success' => false, 'message' => 'Failed to delete.'], 500);
        }
    }

    /**
     * Handle bulk upload of subject categories from Excel file via API.
     */
    public function apiBulkUpload(Request $request)
    {
        // 1. التحقق من الملف المرفوع
        $validator = Validator::make($request->all(), [
            'subject_category_excel_file' => 'required|file|mimes:xlsx,xls,csv|max:2048',
        ], [], ['subject_category_excel_file' => 'Excel file']);

        if ($validator->fails()) {
            return response()->json([
                'success' => false,
                'message' => 'Validation failed for uploaded file.',
                'errors' => $validator->errors()
            ], 422); // Unprocessable Entity
        }

        try {
            // 2. قراءة البيانات من ملف الإكسل
            $rows = Excel::toCollection(collect(), $request->file('subject_category_excel_file'))->first();

            if ($rows->isEmpty() || $rows->count() <= 1) {
                return response()->json([
                    'success' => false,
                    'message' => 'The uploaded Excel file is empty or contains no data rows after the header.'
                ], 400); // Bad Request
            }

            $createdCount = 0;
            $skippedCount = 0;
            $skippedDetails = [];
            $processedNames = collect();

            $header = $rows->first()->map(fn ($item) => strtolower(str_replace([' ', '-'], '_', $item ?? '')));
            $dataRows = $rows->slice(1);

            foreach ($dataRows as $rowKey => $rowArray) {
                $row = $header->combine($rowArray->map(fn($val) => trim($val ?? '')));
                $currentRowNumber = $rowKey + 2;
                $categoryName = $row->get('subject_category_name', '');

                if (empty($categoryName)) {
                    $skippedCount++; $skippedDetails[] = "Row {$currentRowNumber}: Skipped (empty name)."; continue;
                }
                if ($processedNames->contains($categoryName)) {
                    $skippedCount++; $skippedDetails[] = "Row {$currentRowNumber}: Skipped (duplicate '{$categoryName}' in file)."; continue;
                }
                if (SubjectCategory::where('subject_category_name', $categoryName)->exists()) {
                    $skippedCount++; $skippedDetails[] = "Row {$currentRowNumber}: Category '{$categoryName}' already exists.";
                    $processedNames->push($categoryName); continue;
                }

                SubjectCategory::create(['subject_category_name' => $categoryName]);
                $createdCount++; $processedNames->push($categoryName);
            }

            // 3. بناء الاستجابة
            $summaryMessage = "Subject Categories bulk upload processed via API.";
            $responseData = [
                'created_count' => $createdCount,
                'skipped_count' => $skippedCount,
                'skipped_details' => $skippedDetails,
            ];

            return response()->json([
                'success' => true,
                'message' => $summaryMessage,
                'data' => $responseData
            ], 200); // OK

        } catch (Exception $e) {
            Log::error('API Subject Category Bulk Upload Failed: ' . $e->getMessage());
            return response()->json([
                'success' => false,
                'message' => 'An error occurred during API bulk upload.',
                'error_details' => $e->getMessage() // للمطور
            ], 500); // Internal Server Error
        }
    }
}
---------------------------------------------------------------------------------------------------------
app\Http\Controllers\DataEntry\SubjectController.php
<?php

namespace App\Http\Controllers\DataEntry;

use App\Http\Controllers\Controller;
use App\Imports\SubjectsImport; // *** تفعيل هذا ***
use Maatwebsite\Excel\Facades\Excel; // *** تفعيل هذا ***
use Maatwebsite\Excel\Validators\ValidationException; // *** لاستقبال أخطاء التحقق من Excel ***
use App\Models\Department;
use App\Models\Subject;
use App\Models\SubjectCategory;
use App\Models\SubjectType;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Log; // اختياري
use Illuminate\Validation\Rule;
use Exception;
use Illuminate\Support\Facades\Validator;

class SubjectController extends Controller
{
    // =============================================
    //            Web Controller Methods
    // =============================================

    /**
     * Display a listing of the subjects (Web View) with Pagination.
     * عرض قائمة المواد لصفحة الويب مع تقسيم الصفحات (الأحدث أولاً)
     */
    public function index()
    {
        try {
            // جلب المواد مرتبة بالأحدث مع العلاقات وتقسيم الصفحات
            $subjects = Subject::with(['subjectType', 'subjectCategory', 'department'])
                ->latest('id') // Order by newest first based on ID
                ->paginate(15); // Paginate results

            // جلب البيانات للقوائم المنسدلة
            $subjectTypes = SubjectType::orderBy('subject_type_name')->get();
            $subjectCategories = SubjectCategory::orderBy('subject_category_name')->get();
            $departments = Department::orderBy('department_name')->get();

            return view('dashboard.data-entry.subjects', compact('subjects', 'subjectTypes', 'subjectCategories', 'departments'));
        } catch (Exception $e) {
            Log::error('Error fetching subjects for web view: ' . $e->getMessage());
            return redirect()->back()->with('error', 'Could not load subjects.');
        }
    }

    /**
     * Store a newly created subject from web request.
     * تخزين مادة جديدة قادمة من طلب ويب
     */
    public function store(Request $request)
    {
        // 1. Validation
        $validatedData = $request->validate([
            'subject_no' => 'required|string|max:20|unique:subjects,subject_no',
            'subject_name' => 'required|string|max:255',
            'subject_load' => 'required|integer|min:0',
            'theoretical_hours' => 'required|integer|min:0',
            'practical_hours' => 'required|integer|min:0',
            'load_theoretical_section' => 'nullable|integer|min:1', // nullable للسماح بالقيمة الافتراضية
            'load_practical_section' => 'nullable|integer|min:1',
            'subject_type_id' => 'required|integer|exists:subjects_types,id',
            'subject_category_id' => 'required|integer|exists:subjects_categories,id',
            'department_id' => 'required|integer|exists:departments,id',
        ]);

        // 2. Prepare Data (validatedData جاهزة)
        $data = $validatedData;
        if (!isset($validatedData['load_theoretical_section']) || is_null($validatedData['load_theoretical_section'])) {
            // القيمة الافتراضية من قاعدة البيانات ستُستخدم إذا كان الحقل nullable
            // أو يمكنك تعيينها هنا صراحة إذا أردت:
            $dataToCreate['load_theoretical_section'] = 50;
        }
        if (!isset($validatedData['load_practical_section']) || is_null($validatedData['load_practical_section'])) {
            $dataToCreate['load_practical_section'] = 25;
        }
        // 3. Add to Database
        try {
            Subject::create($data);
            // 4. Redirect
            return redirect()->route('data-entry.subjects.index') // تأكد من اسم الروت
                ->with('success', 'Subject created successfully.');
        } catch (Exception $e) {
            Log::error('Subject Creation Failed (Web): ' . $e->getMessage());
            return redirect()->back()
                ->with('error', 'Failed to create subject.')
                ->withInput();
        }
    }

    /**
     * Update the specified subject from web request.
     * تحديث مادة محددة قادمة من طلب ويب
     */
    public function update(Request $request, Subject $subject)
    {
        // 1. Validation
        $validatedData = $request->validate([
            'subject_no' => 'required|string|max:20|unique:subjects,subject_no,' . $subject->id,
            'subject_name' => 'required|string|max:255',
            'subject_load' => 'required|integer|min:0',
            'theoretical_hours' => 'required|integer|min:0',
            'practical_hours' => 'required|integer|min:0',
            'load_theoretical_section' => 'nullable|integer|min:1',
            'load_practical_section' => 'nullable|integer|min:1',
            'subject_type_id' => 'required|integer|exists:subjects_types,id',
            'subject_category_id' => 'required|integer|exists:subjects_categories,id',
            'department_id' => 'required|integer|exists:departments,id',
        ]);

        // 2. Prepare Data (validatedData جاهزة)
        $data = $validatedData;
        // إذا أرسل المستخدم قيمة فارغة، يجب أن نخزن NULL وليس string فارغ (إذا كان الحقل يقبل NULL)
        $dataToUpdate['load_theoretical_section'] = $request->filled('load_theoretical_section') ? $request->input('load_theoretical_section') : null;
        $dataToUpdate['load_practical_section'] = $request->filled('load_practical_section') ? $request->input('load_practical_section') : null;

        // 3. Update Database
        try {
            $subject->update($data);
            // 4. Redirect
            return redirect()->route('data-entry.subjects.index') // تأكد من اسم الروت
                ->with('success', 'Subject updated successfully.');
        } catch (Exception $e) {
            Log::error('Subject Update Failed (Web): ' . $e->getMessage());
            return redirect()->back()
                ->with('error', 'Failed to update subject.')
                ->withInput();
        }
    }

    /**
     * Remove the specified subject from web request.
     * حذف مادة محددة قادمة من طلب ويب
     */
    public function destroy(Subject $subject)
    {
        // (اختياري) التحقق من الارتباطات
        if ($subject->planSubjectEntries()->exists()) {
            return redirect()->route('data-entry.subjects.index') // تأكد من اسم الروت
                ->with('error', 'Cannot delete subject. It is included in academic plans.');
        }

        // 1. Delete from Database
        try {
            $subject->delete();
            // 2. Redirect
            return redirect()->route('data-entry.subjects.index') // تأكد من اسم الروت
                ->with('success', 'Subject deleted successfully.');
        } catch (Exception $e) {
            Log::error('Subject Deletion Failed (Web): ' . $e->getMessage());
            return redirect()->route('data-entry.subjects.index') // تأكد من اسم الروت
                ->with('error', 'Failed to delete subject.');
        }
    }

  /**
     * Helper function to normalize Arabic text.
     */
    private function normalizeArabicString($string)
    {
        if (is_null($string)) return null;
        $search = array('أ', 'إ', 'آ', 'ى', 'ة');
        $replace = array('ا', 'ا', 'ا', 'ي', 'ه'); // تطبيع بسيط
        return str_replace($search, $replace, $string);
    }

    /**
     * Helper function to find related ID by name or use ID if numeric.
     */
    private function findRelatedId($modelClass, $nameColumn, $valueFromExcel, &$skippedDetails, $rowNum, $attributeFriendlyName, $searchByIdColumn = 'id')
    {
        if (is_numeric($valueFromExcel)) {
            if ($modelClass::where($searchByIdColumn, $valueFromExcel)->exists()) {
                return (int)$valueFromExcel;
            } else {
                $skippedDetails[] = "Row {$rowNum}: Invalid {$attributeFriendlyName} ID '{$valueFromExcel}'. Record skipped.";
                return null;
            }
        } elseif (!empty($valueFromExcel)) {
            $normalizedValue = $this->normalizeArabicString(strtolower(trim($valueFromExcel)));
            $record = $modelClass::all()->first(function ($item) use ($nameColumn, $normalizedValue) {
                return $this->normalizeArabicString(strtolower(trim($item->$nameColumn))) === $normalizedValue;
            });
            if ($record) {
                return $record->id;
            } else {
                $skippedDetails[] = "Row {$rowNum}: {$attributeFriendlyName} '{$valueFromExcel}' not found. Record skipped.";
                return null;
            }
        }
        // إذا كانت القيمة فارغة ولم تكن مطلوبة، قد نرجع null بدون تسجيل خطأ، أو نسجل خطأ إذا كانت مطلوبة
        // $skippedDetails[] = "Row {$rowNum}: {$attributeFriendlyName} is empty. Record skipped."; // إذا كان الحقل مطلوباً
        return null; // إذا كان الحقل اختيارياً والقيمة فارغة
    }


    /**
     * Handle bulk upload of subjects from Excel file for Web.
     */
    public function bulkUpload(Request $request)
    {
        $request->validate([
            'subject_excel_file' => 'required|file|mimes:xlsx,xls,csv|max:5120',
        ], [], ['subject_excel_file' => 'Excel file']);

        try {
            $rows = Excel::toCollection(collect(), $request->file('subject_excel_file'))->first();

            if ($rows->isEmpty() || $rows->count() <= 1) {
                return redirect()->route('data-entry.subjects.index')->with('error', 'Uploaded Excel file is empty or has no data rows.');
            }

            $createdCount = 0;
            $updatedCount = 0;
            $skippedCount = 0;
            $skippedDetails = [];
            $processedSubjectNos = collect();

            $header = $rows->first()->map(fn($item) => strtolower(str_replace([' ', '-'], '_', $item ?? '')));
            $dataRows = $rows->slice(1);

            foreach ($dataRows as $rowKey => $rowArray) {
                $row = $header->combine($rowArray->map(fn($val) => trim($val ?? '')));
                $currentRowNumber = $rowKey + 2;

                $subjectNo = $row->get('subject_no');
                $subjectName = $row->get('subject_name');

                if (empty($subjectNo) && empty($subjectName)) {
                    $skippedCount++;
                    $skippedDetails[] = "Row {$currentRowNumber}: Skipped (empty subject_no & name).";
                    continue;
                }
                if (empty($subjectNo) || empty($subjectName)) {
                    $skippedCount++;
                    $skippedDetails[] = "Row {$currentRowNumber}: Skipped (missing subject_no or name).";
                    continue;
                }
                if ($processedSubjectNos->contains($subjectNo)) {
                    $skippedCount++;
                    $skippedDetails[] = "Row {$currentRowNumber}: Skipped (duplicate subject_no '{$subjectNo}' in file).";
                    continue;
                }

                $subjectTypeId = $this->findRelatedId(SubjectType::class, 'subject_type_name', $row->get('subject_type_id'), $skippedDetails, $currentRowNumber, 'Subject Type');
                if (is_null($subjectTypeId) && !empty($row->get('subject_type_id'))) {
                    $skippedCount++;
                    continue;
                } // إذا كان هناك قيمة ولم يتم العثور عليها

                $subjectCategoryId = $this->findRelatedId(SubjectCategory::class, 'subject_category_name', $row->get('subject_category_id'), $skippedDetails, $currentRowNumber, 'Subject Category');
                if (is_null($subjectCategoryId) && !empty($row->get('subject_category_id'))) {
                    $skippedCount++;
                    continue;
                }

                $departmentId = $this->findRelatedId(Department::class, 'department_name', $row->get('department_id'), $skippedDetails, $currentRowNumber, 'Department');
                if (is_null($departmentId) && !empty($row->get('department_id'))) {
                    $skippedCount++;
                    continue;
                }


                $dataToValidate = [
                    'subject_no' => $subjectNo,
                    'subject_name' => $subjectName,
                    'subject_load' => $row->get('subject_load'),
                    'theoretical_hours' => $row->get('theoretical_hours'),
                    'practical_hours' => $row->get('practical_hours'),
                    'capacity_theoretical_section' => $row->get('capacity_theoretical_section'),
                    'capacity_practical_section' => $row->get('capacity_practical_section'),
                    'subject_type_id' => $subjectTypeId,
                    'subject_category_id' => $subjectCategoryId,
                    'department_id' => $departmentId,
                ];

                $validator = Validator::make($dataToValidate, [
                    'subject_no' => 'required|string|max:20',
                    'subject_name' => 'required|string|max:255',
                    'subject_load' => 'required|integer|min:0',
                    'theoretical_hours' => 'required|integer|min:0',
                    'practical_hours' => 'required|integer|min:0',
                    'capacity_theoretical_section' => 'nullable|integer|min:1',
                    'capacity_practical_section' => 'nullable|integer|min:1',
                    'subject_type_id' => 'required|integer|exists:subjects_types,id',
                    'subject_category_id' => 'required|integer|exists:subjects_categories,id',
                    'department_id' => 'required|integer|exists:departments,id',
                ]);

                if ($validator->fails()) {
                    $skippedCount++;
                    $errors = implode(', ', $validator->errors()->all());
                    $skippedDetails[] = "Row {$currentRowNumber} (SubjectNo: {$subjectNo}): Skipped - Validation: {$errors}";
                    continue;
                }
                $validatedData = $validator->validated();
                // استخدام القيم الافتراضية إذا كانت السعات null بعد التحقق
                $validatedData['capacity_theoretical_section'] = $validatedData['capacity_theoretical_section'] ?? 50;
                $validatedData['capacity_practical_section'] = $validatedData['capacity_practical_section'] ?? 25;


                $subject = Subject::where('subject_no', $validatedData['subject_no'])->first();
                if ($subject) {
                    $subject->update($validatedData);
                    $updatedCount++;
                } else {
                    Subject::create($validatedData);
                    $createdCount++;
                }
                $processedSubjectNos->push($subjectNo);
            }

            $message = "Subjects bulk upload processed. ";
            if ($createdCount > 0) $message .= "{$createdCount} new created. ";
            if ($updatedCount > 0) $message .= "{$updatedCount} updated. ";
            if ($skippedCount > 0) $message .= "{$skippedCount} skipped. ";
            if (!empty($skippedDetails)) {
                session()->flash('skipped_details', $skippedDetails);
            }
            return redirect()->route('data-entry.subjects.index')->with('success', trim($message));
        } catch (Exception $e) {
            Log::error('Subject Bulk Upload Failed: ' . $e->getMessage() . ' at ' . $e->getFile() . ':' . $e->getLine());
            return redirect()->route('data-entry.subjects.index')->with('error', 'Upload error: ' . $e->getMessage());
        }
    }


    // =============================================
    //             API Controller Methods
    // =============================================

    /**
     * Display a listing of the subjects (API).
     * عرض قائمة المواد للـ API (بدون Pagination أو فلترة حالياً)
     */
    public function apiIndex(Request $request) // أبقينا على Request إذا احتجناها لاحقاً
    {
        try {
            $query = Subject::with([
                'subjectType:id,subject_type_name',
                'subjectCategory:id,subject_category_name',
                'department:id,department_name'
            ]);

            // --- إزالة كود الفلترة ---

            // --- الخيار 1: جلب كل المواد (الحالة الحالية) ---
            $subjects = $query->latest('id') // الترتيب بالأحدث
                ->get();

            // --- الخيار 2: كود الـ Pagination للـ API (معطل حالياً) ---
            /*
            $perPage = $request->query('per_page', 15);
            $subjectsPaginated = $query->latest('id')
                                       ->paginate($perPage);

            return response()->json([
                'success' => true,
                'data' => $subjectsPaginated->items(),
                'pagination' => [
                    'total' => $subjectsPaginated->total(),
                    'per_page' => $subjectsPaginated->perPage(),
                    'current_page' => $subjectsPaginated->currentPage(),
                    'last_page' => $subjectsPaginated->lastPage(),
                ]
            ], 200);
            */
            // --- نهاية كود الـ Pagination المعطل ---


            return response()->json(['success' => true, 'data' => $subjects], 200);
        } catch (Exception $e) {
            Log::error('API Error fetching subjects: ' . $e->getMessage());
            return response()->json(['success' => false, 'message' => 'Server Error'], 500);
        }
    }

    /**
     * Store a newly created subject from API request.
     * تخزين مادة جديدة قادمة من طلب API
     */
    public function apiStore(Request $request)
    {
        // 1. Validation
        $validatedData = $request->validate([
            'subject_no' => 'required|string|max:20|unique:subjects,subject_no',
            'subject_name' => 'required|string|max:255',
            'subject_load' => 'required|integer|min:0',
            'theoretical_hours' => 'required|integer|min:0',
            'practical_hours' => 'required|integer|min:0',
            'subject_type_id' => 'required|integer|exists:subjects_types,id',
            'subject_category_id' => 'required|integer|exists:subjects_categories,id',
            'department_id' => 'required|integer|exists:departments,id',
        ]);

        // 2. Add to Database
        try {
            $subject = Subject::create($validatedData);
            $subject->load(['subjectType:id,subject_type_name', 'subjectCategory:id,subject_category_name', 'department:id,department_name']);
            // 3. Return Success JSON Response
            return response()->json([
                'success' => true,
                'data' => $subject,
                'message' => 'Subject created successfully.'
            ], 201);
        } catch (Exception $e) {
            Log::error('API Subject Creation Failed: ' . $e->getMessage());
            return response()->json(['success' => false, 'message' => 'Failed to create subject.'], 500);
        }
    }

    /**
     * Display the specified subject (API).
     * عرض مادة محددة للـ API
     */
    public function apiShow(Subject $subject)
    {
        $subject->load(['subjectType:id,subject_type_name', 'subjectCategory:id,subject_category_name', 'department:id,department_name']);
        return response()->json(['success' => true, 'data' => $subject], 200);
    }

    /**
     * Update the specified subject from API request.
     * تحديث مادة محددة قادمة من طلب API
     */
    public function apiUpdate(Request $request, Subject $subject)
    {
        // 1. Validation
        $validatedData = $request->validate([
            'subject_no' => [
                'sometimes',
                'required',
                'string',
                'max:20',
                'unique:subjects,subject_no,' . $subject->id,
            ],
            'subject_name' => 'sometimes|required|string|max:255',
            'subject_load' => 'sometimes|required|integer|min:0',
            'theoretical_hours' => 'sometimes|required|integer|min:0',
            'practical_hours' => 'sometimes|required|integer|min:0',
            'subject_type_id' => 'sometimes|required|integer|exists:subjects_types,id',
            'subject_category_id' => 'sometimes|required|integer|exists:subjects_categories,id',
            'department_id' => 'sometimes|required|integer|exists:departments,id',
        ]);

        // 2. Update Database
        try {
            $subject->update($validatedData);
            $subject->load(['subjectType:id,subject_type_name', 'subjectCategory:id,subject_category_name', 'department:id,department_name']);
            // 3. Return Success JSON Response
            return response()->json([
                'success' => true,
                'data' => $subject,
                'message' => 'Subject updated successfully.'
            ], 200);
        } catch (Exception $e) {
            Log::error('API Subject Update Failed: ' . $e->getMessage());
            return response()->json(['success' => false, 'message' => 'Failed to update subject.'], 500);
        }
    }

    /**
     * Remove the specified subject from API request.
     * حذف مادة محددة قادمة من طلب API
     */
    public function apiDestroy(Subject $subject)
    {
        // (اختياري) التحقق من الارتباطات
        if ($subject->planSubjectEntries()->exists()) {
            return response()->json([
                'success' => false,
                'message' => 'Cannot delete subject. It is included in academic plans.'
            ], 409);
        }

        // 1. Delete from Database
        try {
            $subject->delete();
            // 2. Return Success JSON Response
            return response()->json([
                'success' => true,
                'message' => 'Subject deleted successfully.'
            ], 200);
        } catch (Exception $e) {
            Log::error('API Subject Deletion Failed: ' . $e->getMessage());
            return response()->json(['success' => false, 'message' => 'Failed to delete subject.'], 500);
        }
    }

  public function apiBulkUpload(Request $request)
    {
        $validator = Validator::make($request->all(), ['subject_excel_file' => 'required|file|mimes:xlsx,xls,csv|max:5120']);
        if ($validator->fails()) {
            return response()->json(['success' => false, 'message' => 'File validation failed.', 'errors' => $validator->errors()], 422);
        }

        try {
            $rows = Excel::toCollection(collect(), $request->file('subject_excel_file'))->first();
            if ($rows->isEmpty() || $rows->count() <= 1) {
                return response()->json(['success' => false, 'message' => 'File empty or no data rows.'], 400);
            }

            $createdCount = 0;
            $updatedCount = 0;
            $skippedCount = 0;
            $skippedDetails = [];
            $processedSubjectNos = collect();
            $header = $rows->first()->map(fn($item) => strtolower(str_replace([' ', '-'], '_', $item ?? '')));
            $dataRows = $rows->slice(1);

            foreach ($dataRows as $rowKey => $rowArray) {
                $row = $header->combine($rowArray->map(fn($val) => trim($val ?? '')));
                $currentRowNumber = $rowKey + 2;
                $subjectNo = $row->get('subject_no');
                $subjectName = $row->get('subject_name');

                if (empty($subjectNo) && empty($subjectName)) {
                    $skippedCount++;
                    $skippedDetails[] = "Row {$currentRowNumber}: Skipped (empty).";
                    continue;
                }
                if (empty($subjectNo) || empty($subjectName)) {
                    $skippedCount++;
                    $skippedDetails[] = "Row {$currentRowNumber}: Skipped (missing no or name).";
                    continue;
                }
                if ($processedSubjectNos->contains($subjectNo)) {
                    $skippedCount++;
                    $skippedDetails[] = "Row {$currentRowNumber}: Skipped (duplicate no '{$subjectNo}' in file).";
                    continue;
                }

                $subjectTypeId = $this->findRelatedId(SubjectType::class, 'subject_type_name', $row->get('subject_type_id'), $skippedDetails, $currentRowNumber, 'Type');
                if (is_null($subjectTypeId) && !empty($row->get('subject_type_id'))) {
                    $skippedCount++;
                    continue;
                }
                $subjectCategoryId = $this->findRelatedId(SubjectCategory::class, 'subject_category_name', $row->get('subject_category_id'), $skippedDetails, $currentRowNumber, 'Category');
                if (is_null($subjectCategoryId) && !empty($row->get('subject_category_id'))) {
                    $skippedCount++;
                    continue;
                }
                $departmentId = $this->findRelatedId(Department::class, 'department_name', $row->get('department_id'), $skippedDetails, $currentRowNumber, 'Department');
                if (is_null($departmentId) && !empty($row->get('department_id'))) {
                    $skippedCount++;
                    continue;
                }

                // $dataToValidate = [ /* ... نفس مصفوفة dataToValidate من دالة الويب ... */ ];
                $dataToValidate = [
                    'subject_no' => $subjectNo,
                    'subject_name' => $subjectName,
                    'subject_load' => $row->get('subject_load'),
                    'theoretical_hours' => $row->get('theoretical_hours'),
                    'practical_hours' => $row->get('practical_hours'),
                    'capacity_theoretical_section' => $row->get('capacity_theoretical_section'),
                    'capacity_practical_section' => $row->get('capacity_practical_section'),
                    'subject_type_id' => $subjectTypeId,
                    'subject_category_id' => $subjectCategoryId,
                    'department_id' => $departmentId,
                ];

                $validator = Validator::make($dataToValidate, [
                    'subject_no' => 'required|string|max:20',
                    'subject_name' => 'required|string|max:255',
                    'subject_load' => 'required|integer|min:0',
                    'theoretical_hours' => 'required|integer|min:0',
                    'practical_hours' => 'required|integer|min:0',
                    'capacity_theoretical_section' => 'nullable|integer|min:1',
                    'capacity_practical_section' => 'nullable|integer|min:1',
                    'subject_type_id' => 'required|integer|exists:subjects_types,id',
                    'subject_category_id' => 'required|integer|exists:subjects_categories,id',
                    'department_id' => 'required|integer|exists:departments,id',
                ]);
                // $validator = Validator::make($dataToValidate, [ /* ... نفس قواعد الـ validation ... */ ]);
                // if ($validator->fails()) { /* ... تجاهل وتسجيل ... */ continue; }
                if ($validator->fails()) {
                    $skippedCount++;
                    $errors = implode(', ', $validator->errors()->all());
                    $skippedDetails[] = "Row {$currentRowNumber} (SubjectNo: {$subjectNo}): Skipped - Validation: {$errors}";
                    continue;
                }
                $validatedData = $validator->validated();
                $validatedData['capacity_theoretical_section'] = $validatedData['capacity_theoretical_section'] ?? 50;
                $validatedData['capacity_practical_section'] = $validatedData['capacity_practical_section'] ?? 25;

                $subject = Subject::updateOrCreate(['subject_no' => $validatedData['subject_no']], $validatedData);
                if ($subject->wasRecentlyCreated) {
                    $createdCount++;
                } elseif ($subject->wasChanged()) {
                    $updatedCount++;
                } else {
                    $skippedCount++;
                    $skippedDetails[] = "Row {$currentRowNumber} (No: {$subjectNo}): Data already up-to-date.";
                }
                $processedSubjectNos->push($subjectNo);
            }

            return response()->json(['success' => true, 'message' => "Subjects uploaded.", 'data' => compact('createdCount', 'updatedCount', 'skippedCount', 'skippedDetails')], 200);
        } catch (Exception $e) {
            Log::error('API Subject Bulk Upload Failed: ' . $e->getMessage());
            return response()->json(['success' => false, 'message' => 'Upload error.', 'error' => $e->getMessage()], 500);
        }
    }
}

-----------------------------------------------------------------------------------------------------
app\Http\Controllers\DataEntry\SubjectTypeController.php
<?php

namespace App\Http\Controllers\DataEntry;

use App\Http\Controllers\Controller;
use App\Models\SubjectType;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Log;
use Illuminate\Validation\Rule;
use Exception;
use Illuminate\Support\Facades\Validator;
use Maatwebsite\Excel\Facades\Excel;

class SubjectTypeController extends Controller
{
    // =============================================
    //            Web Controller Methods
    // =============================================

    /**
     * Display a listing of the subject types (Web View) with Pagination.
     */
    public function index()
    {
        try {
            // استخدام latest('id') و paginate
            $subjectTypes = SubjectType::latest('id')->paginate(15);
            // توجيه للـ view الجديد
            return view('dashboard.data-entry.subject-types', compact('subjectTypes'));
        } catch (Exception $e) {
            Log::error('Error fetching subject types: ' . $e->getMessage());
            return redirect()->back()->with('error', 'Could not load subject types.');
        }
    }

    /**
     * Store a newly created subject type in storage.
     */
    public function store(Request $request)
    {
        // 1. Validation
        $validatedData = $request->validate([ // استخدام validatedData
            'subject_type_name' => 'required|string|max:100|unique:subjects_types,subject_type_name',
        ]);

        // 2. Prepare Data (validatedData جاهزة)
        $data = $validatedData;

        // 3. Add to Database
        try {
            SubjectType::create($data);
            // 4. Redirect to the new index route
            return redirect()->route('data-entry.subject-types.index') // توجيه للـ index
                ->with('success', 'Subject Type created successfully.');
        } catch (Exception $e) {
            Log::error('Subject Type Creation Failed: ' . $e->getMessage());
            return redirect()->back()
                ->with('error', 'Failed to create subject type.')
                ->withInput();
        }
    }

    /**
     * Update the specified subject type in storage.
     */
    public function update(Request $request, SubjectType $subjectType)
    {
        // 1. Validation
        $validatedData = $request->validate([ // استخدام validatedData
            'subject_type_name' => [
                'required',
                'string',
                'max:100',
                Rule::unique('subjects_types')->ignore($subjectType->id),
            ],
        ]);

        // 2. Prepare Data (validatedData جاهزة)
        $data = $validatedData;

        // 3. Update Database
        try {
            $subjectType->update($data);
            // 4. Redirect
            return redirect()->route('data-entry.subject-types.index') // توجيه للـ index
                ->with('success', 'Subject Type updated successfully.');
        } catch (Exception $e) {
            Log::error('Subject Type Update Failed: ' . $e->getMessage());
            return redirect()->back()
                ->with('error', 'Failed to update subject type.')
                ->withInput();
        }
    }

    /**
     * Remove the specified subject type from storage.
     */
    public function destroy(SubjectType $subjectType)
    {
        // التحقق من وجود مواد مرتبطة
        if ($subjectType->subjects()->exists()) {
            return redirect()->route('data-entry.subject-types.index') // توجيه للـ index
                ->with('error', 'Cannot delete: assigned to subjects.');
        }

        // 1. Delete from Database
        try {
            $subjectType->delete();
            // 2. Redirect
            return redirect()->route('data-entry.subject-types.index') // توجيه للـ index
                ->with('success', 'Subject Type deleted successfully.');
        } catch (Exception $e) {
            Log::error('Subject Type Deletion Failed: ' . $e->getMessage());
            return redirect()->route('data-entry.subject-types.index') // توجيه للـ index
                ->with('error', 'Failed to delete subject type.');
        }
    }


    /**
     * Handle bulk upload of subject types from Excel file.
     */
    public function bulkUpload(Request $request)
    {
        $request->validate([
            'subject_type_excel_file' => 'required|file|mimes:xlsx,xls,csv|max:2048',
        ], [], ['subject_type_excel_file' => 'Excel file']);

        try {
            $rows = Excel::toCollection(collect(), $request->file('subject_type_excel_file'))->first();

            if ($rows->isEmpty() || $rows->count() <= 1) {
                return redirect()->route('data-entry.subject-types.index')
                                 ->with('error', 'Uploaded Excel file is empty or has no data rows.');
            }

            $createdCount = 0;
            $skippedCount = 0;
            $skippedDetails = [];
            $processedNames = collect();

            $header = $rows->first()->map(fn ($item) => strtolower(str_replace(' ', '_', $item ?? '')));
            $dataRows = $rows->slice(1);

            foreach ($dataRows as $rowKey => $rowArray) {
                $row = $header->combine($rowArray->map(fn($val) => trim($val ?? '')));
                $currentRowNumber = $rowKey + 2;

                $subjectTypeName = $row->get('subject_type_name', '');

                // 1. تجاهل الأسطر الفارغة
                if (empty($subjectTypeName)) {
                    $skippedCount++;
                    $skippedDetails[] = "Row {$currentRowNumber}: Skipped because subject_type_name is empty.";
                    continue;
                }

                // 2. فحص التكرار داخل الملف نفسه
                if ($processedNames->contains($subjectTypeName)) {
                    $skippedCount++;
                    $skippedDetails[] = "Row {$currentRowNumber}: Skipped duplicate name '{$subjectTypeName}' from within this file.";
                    continue;
                }

                // 3. التحقق من وجود الاسم في قاعدة البيانات
                // بما أن أسماء أنواع المواد يجب أن تكون فريدة، إذا وجد، نتجاهله
                $existingType = SubjectType::where('subject_type_name', $subjectTypeName)->first();

                if ($existingType) {
                    $skippedCount++;
                    $skippedDetails[] = "Row {$currentRowNumber}: Subject type '{$subjectTypeName}' already exists in the system.";
                    $processedNames->push($subjectTypeName);
                    continue;
                }

                // 4. إنشاء نوع مادة جديد
                SubjectType::create([
                    'subject_type_name' => $subjectTypeName,
                ]);
                $createdCount++;
                $processedNames->push($subjectTypeName);
            }

            $message = "Subject Types bulk upload processed. ";
            if ($createdCount > 0) $message .= "{$createdCount} new types created. ";
            if ($skippedCount > 0) $message .= "{$skippedCount} rows skipped. ";

            if (!empty($skippedDetails)) {
                session()->flash('skipped_details', $skippedDetails);
            }

            return redirect()->route('data-entry.subject-types.index')->with('success', trim($message));

        } catch (Exception $e) {
            Log::error('Subject Type Bulk Upload Failed: ' . $e->getMessage());
            return redirect()->route('data-entry.subject-types.index')
                             ->with('error', 'An error occurred during bulk upload: ' . $e->getMessage());
        }
    }

    // =============================================
    //             API Controller Methods
    // =============================================
    public function apiIndex()
    {
        try {
            $types = SubjectType::latest('id')->get(['id', 'subject_type_name']);
            return response()->json(['success' => true, 'data' => $types], 200);
        } catch (Exception $e) { /* ... error handling ... */
            return response()->json(['success' => false, 'message' => 'Server Error'], 500);
        }
    }

    public function apiStore(Request $request)
    {
        $validatedData = $request->validate(['subject_type_name' => 'required|string|max:100|unique:subjects_types,subject_type_name']);
        try {
            $type = SubjectType::create($validatedData);
            return response()->json(['success' => true, 'data' => $type, 'message' => 'Subject Type created.'], 201);
        } catch (Exception $e) { /* ... error handling ... */
            return response()->json(['success' => false, 'message' => 'Failed to create.'], 500);
        }
    }

    public function apiShow(SubjectType $subjectType)
    { // Route Model Binding
        return response()->json(['success' => true, 'data' => $subjectType], 200);
    }

    public function apiUpdate(Request $request, SubjectType $subjectType)
    {
        $validatedData = $request->validate(['subject_type_name' => ['required', 'string', 'max:100', Rule::unique('subjects_types')->ignore($subjectType->id)]]);
        try {
            $subjectType->update($validatedData);
            return response()->json(['success' => true, 'data' => $subjectType, 'message' => 'Subject Type updated.'], 200);
        } catch (Exception $e) { /* ... error handling ... */
            return response()->json(['success' => false, 'message' => 'Failed to update.'], 500);
        }
    }

    public function apiDestroy(SubjectType $subjectType)
    {
        if ($subjectType->subjects()->exists()) {
            return response()->json(['success' => false, 'message' => 'Cannot delete: assigned to subjects.'], 409);
        }
        try {
            $subjectType->delete();
            return response()->json(['success' => true, 'message' => 'Subject Type deleted.'], 200);
        } catch (Exception $e) { /* ... error handling ... */
            return response()->json(['success' => false, 'message' => 'Failed to delete.'], 500);
        }
    }

    /**
     * Handle bulk upload of subject types from Excel file via API.
     */
    public function apiBulkUpload(Request $request)
    {
        // 1. التحقق من الملف المرفوع
        $validator = Validator::make($request->all(), [
            'subject_type_excel_file' => 'required|file|mimes:xlsx,xls,csv|max:2048',
        ], [], ['subject_type_excel_file' => 'Excel file']); // اسم مخصص للحقل في رسائل الخطأ

        if ($validator->fails()) {
            return response()->json([
                'success' => false,
                'message' => 'Validation failed for uploaded file.',
                'errors' => $validator->errors()
            ], 422); // Unprocessable Entity
        }

        try {
            // 2. قراءة البيانات من ملف الإكسل
            $rows = Excel::toCollection(collect(), $request->file('subject_type_excel_file'))->first();

            if ($rows->isEmpty() || $rows->count() <= 1) { // <= 1 للتحقق من وجود صف بيانات واحد على الأقل بعد الهيدر
                return response()->json([
                    'success' => false,
                    'message' => 'The uploaded Excel file is empty or contains no data rows after the header.'
                ], 400); // Bad Request
            }

            $createdCount = 0;
            $skippedCount = 0;
            $skippedDetails = [];
            $processedNames = collect(); // لتتبع الأسماء التي تمت معالجتها من الملف

            // الحصول على الصف الأول كعناوين (بتحويلها لـ snake_case)
            $header = $rows->first()->map(fn ($item) => strtolower(str_replace(' ', '_', $item ?? '')));
            // إزالة صف العناوين من البيانات
            $dataRows = $rows->slice(1);

            foreach ($dataRows as $rowKey => $rowArray) {
                // تحويل الصف الحالي لمصفوفة باستخدام العناوين كمفاتيح
                $row = $header->combine($rowArray->map(fn($val) => trim($val ?? '')));
                $currentRowNumber = $rowKey + 2; // رقم الصف الفعلي في الإكسل (مع الهيدر)

                // العمود B هو 'subject_type_name' (بافتراض تطابق اسم الهيدر بعد تحويله)
                $subjectTypeName = $row->get('subject_type_name', '');

                // 1. تجاهل الأسطر الفارغة (إذا كان subject_type_name فارغاً)
                if (empty($subjectTypeName)) {
                    $skippedCount++;
                    $skippedDetails[] = "Row {$currentRowNumber}: Skipped because subject_type_name is empty.";
                    continue;
                }

                // 2. فحص التكرار داخل الملف نفسه
                if ($processedNames->contains($subjectTypeName)) {
                    $skippedCount++;
                    $skippedDetails[] = "Row {$currentRowNumber}: Skipped duplicate name '{$subjectTypeName}' from within this file.";
                    continue;
                }

                // 3. التحقق من وجود الاسم في قاعدة البيانات
                // بما أن أسماء أنواع المواد يجب أن تكون فريدة، إذا وجد، نتجاهله
                $existingType = SubjectType::where('subject_type_name', $subjectTypeName)->first();

                if ($existingType) {
                    $skippedCount++;
                    $skippedDetails[] = "Row {$currentRowNumber}: Subject type '{$subjectTypeName}' already exists in the system.";
                    $processedNames->push($subjectTypeName); // اعتبره معالجاً
                    continue;
                }

                // 4. إنشاء نوع مادة جديد (التحقق من الصحة تم ضمنياً)
                SubjectType::create([
                    'subject_type_name' => $subjectTypeName,
                ]);
                $createdCount++;
                $processedNames->push($subjectTypeName);
            }

            // 5. بناء الاستجابة
            $summaryMessage = "Subject Types bulk upload processed via API.";
            $responseData = [
                'created_count' => $createdCount,
                'skipped_count' => $skippedCount,
                'skipped_details' => $skippedDetails,
            ];

            return response()->json([
                'success' => true,
                'message' => $summaryMessage,
                'data' => $responseData
            ], 200); // OK

        } catch (Exception $e) {
            Log::error('API Subject Type Bulk Upload Failed: ' . $e->getMessage() . ' at ' . $e->getFile() . ':' . $e->getLine());
            return response()->json([
                'success' => false,
                'message' => 'An error occurred during API bulk upload.',
                'error_details' => $e->getMessage() // للمطور
            ], 500); // Internal Server Error
        }
    }
}
-----------------------------------------------------------------------------------------------------------
app\Http\Controllers\DataEntry\TimeslotController.php
<?php

namespace App\Http\Controllers\DataEntry;

use App\Http\Controllers\Controller;
use App\Models\Timeslot;
use Carbon\Carbon;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Log;
use Illuminate\Validation\Rule;
use Illuminate\Support\Facades\Validator; // لاستخدام Validator يدوياً
use Exception;
use Illuminate\Support\Facades\DB;

class TimeslotController extends Controller
{
    // أيام الأسبوع المستخدمة في النظام
    const DAYS_OF_WEEK = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];

    // =============================================
    //            Web Controller Methods
    // =============================================

    /**
     * Display a listing of the timeslots.
     */
    public function index()
    {
        try {
            $timeslots = Timeslot::withCount('scheduleEntries')
                ->orderByRaw("FIELD(day, '" . implode("','", self::DAYS_OF_WEEK) . "')")
                ->orderBy('start_time')
                ->paginate(30); // عرض عدد أكبر للفترات

            return view('dashboard.data-entry.timeslots', compact('timeslots'));
        } catch (Exception $e) {
            Log::error('Error fetching timeslots: ' . $e->getMessage());
            return redirect()->back()->with('error', 'Could not load timeslots.');
        }
    }

    /**
     * Generate standard weekly timeslots based on user input.
     */
    public function generateStandard(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'working_days' => 'required|array|min:1',
            'working_days.*' => ['required', Rule::in(self::DAYS_OF_WEEK)],
            'overall_start_time' => 'required|date_format:H:i',
            'overall_end_time' => 'required|date_format:H:i|after:overall_start_time',
            'lecture_duration' => 'required|integer|min:15', // أقل مدة محاضرة 15 دقيقة
            'break_duration' => 'required|integer|min:0',   // الاستراحة يمكن أن تكون 0
        ]);

        if ($validator->fails()) {
            return redirect()->route('data-entry.timeslots.index')
                ->withErrors($validator, 'generateStandardModal') // error bag مخصص
                ->withInput()
                ->with('open_generate_modal', true); // لإعادة فتح المودال
        }

        try {
            DB::transaction(function () use ($request) { // استخدام transaction لضمان سلامة البيانات
                // 1. حذف كل الفترات القديمة
                // Timeslot::truncate(); // يحذف كل السجلات ويُعيد الـ auto-increment (كن حذراً)
                Timeslot::query()->delete(); // إذا كنت لا تريد إعادة الـ auto-increment
                Log::info('Old timeslots deleted for standard generation.');

                // 2. إنشاء الفترات الجديدة
                $newTimeslots = [];
                $workingDays = $request->input('working_days');
                $startTime = Carbon::createFromTimeString($request->input('overall_start_time'));
                $endTime = Carbon::createFromTimeString($request->input('overall_end_time'));
                $lectureDurationMinutes = (int)$request->input('lecture_duration');
                $breakDurationMinutes = (int)$request->input('break_duration');

                foreach ($workingDays as $day) {
                    $currentTime = $startTime->copy();
                    while ($currentTime->copy()->addMinutes($lectureDurationMinutes)->lte($endTime)) {
                        $slotEndTime = $currentTime->copy()->addMinutes($lectureDurationMinutes);
                        $newTimeslots[] = [
                            'day' => $day,
                            'start_time' => $currentTime->format('H:i:s'),
                            'end_time' => $slotEndTime->format('H:i:s'),
                            'created_at' => now(),
                            'updated_at' => now(),
                        ];
                        $currentTime = $slotEndTime->copy()->addMinutes($breakDurationMinutes);
                    }
                }

                if (!empty($newTimeslots)) {
                    Timeslot::insert($newTimeslots); // إدخال جماعي
                    Log::info(count($newTimeslots) . ' new standard timeslots generated.');
                }
            });

            return redirect()->route('data-entry.timeslots.index')
                ->with('success', 'Standard weekly timeslots generated successfully.');
        } catch (Exception $e) {
            Log::error('Failed to generate standard timeslots: ' . $e->getMessage());
            return redirect()->route('data-entry.timeslots.index')
                ->with('error', 'Failed to generate timeslots: ' . $e->getMessage());
        }
    }


    /**
     * Store a newly created timeslot in storage.
     */
    public function store(Request $request)
    {
        $errorBagName = 'addTimeslotModal';
        $validator = Validator::make($request->all(), [
            'day' => ['required', Rule::in(self::DAYS_OF_WEEK)],
            'start_time' => 'required|date_format:H:i',
            'end_time' => 'required|date_format:H:i|after:start_time',
        ]);

        // التحقق من التفرد والتداخل
        $validator->after(function ($validator) use ($request) {
            if (!$validator->errors()->hasAny()) {
                $this->validateTimeslotUniquenessAndOverlap(
                    $validator,
                    $request->input('day'),
                    $request->input('start_time'),
                    $request->input('end_time')
                );
            }
        });

        if ($validator->fails()) {
            return redirect()->back()
                ->withErrors($validator, $errorBagName)
                ->withInput()
                ->with('open_modal_on_error', $errorBagName)
                ->with('error', 'This timeslot overlaps with an existing timeslot on the same day.');
        }

        try {
            Timeslot::create($validator->validated());
            return redirect()->route('data-entry.timeslots.index')
                ->with('success', 'Timeslot created successfully.');
        } catch (Exception $e) {
            Log::error('Timeslot Creation Failed: ' . $e->getMessage());
            return redirect()->back()
                ->with('error', 'Failed to create timeslot.')
                ->withInput();
        }
    }

    /**
     * Update the specified timeslot in storage.
     */
    public function update(Request $request, Timeslot $timeslot)
    {
        $errorBagName = 'editTimeslotModal_' . $timeslot->id;
        $validator = Validator::make($request->all(), [
            'day' => ['required', Rule::in(self::DAYS_OF_WEEK)],
            'start_time' => 'required|date_format:H:i',
            'end_time' => 'required|date_format:H:i|after:start_time',
        ]);

        // التحقق من التفرد والتداخل (مع تجاهل الفترة الحالية)
        $validator->after(function ($validator) use ($request, $timeslot) {
            if (!$validator->errors()->hasAny()) {
                $this->validateTimeslotUniquenessAndOverlap(
                    $validator,
                    $request->input('day'),
                    $request->input('start_time'),
                    $request->input('end_time'),
                    $timeslot->id // ID الفترة الحالية لاستثنائها
                );
            }
        });

        if ($validator->fails()) {
            return redirect()->back()->withErrors($validator, $errorBagName)->withInput()
                ->with('open_modal_on_error', $errorBagName)
                ->with('error_modal_id', $timeslot->id)
                ->with('error', 'This timeslot overlaps with an existing timeslot on the same day.');
        }
        try {
            $timeslot->update($validator->validated());
            return redirect()->route('data-entry.timeslots.index')->with('success', 'Timeslot updated successfully.');
        } catch (Exception $e) {
            Log::error('Timeslot Update Failed: ' . $e->getMessage());
            return redirect()->back()
                // إرجاع الأخطاء للـ error bag الصحيح
                ->withErrors(['update_error' => 'Failed to update timeslot.'], 'update_' . $timeslot->id)
                ->withInput();
        }
    }

    /**
     * Helper function to validate timeslot uniqueness and overlap.
     * دالة مساعدة للتحقق من تفرد الفترة وعدم تداخلها
     */
    private function validateTimeslotUniquenessAndOverlap($validator, $day, $startTime, $endTime, $excludeId = null)
    {
        $startTimeCarbon = Carbon::parse($startTime);
        $endTimeCarbon = Carbon::parse($endTime);

        // 1. التحقق من التفرد (نفس الفترة بالضبط)
        $query = Timeslot::where('day', $day)
            ->where('start_time', $startTimeCarbon->format('H:i:s')) // قارن بالتنسيق الكامل
            ->where('end_time', $endTimeCarbon->format('H:i:s'));
        if ($excludeId) {
            $query->where('id', '!=', $excludeId);
        }
        if ($query->exists()) {
            $validator->errors()->add('time_unique', 'This exact timeslot (day, start, end) already exists.');
            return; // لا داعي للتحقق من التداخل إذا كانت متطابقة
        }

        // 2. التحقق من التداخل
        // فترة جديدة: [S1, E1]
        // فترة موجودة: [S2, E2]
        // يحدث تداخل إذا: (S1 < E2) AND (E1 > S2)
        $overlapping = Timeslot::where('day', $day)
            ->where(function ($q) use ($startTimeCarbon, $endTimeCarbon) {
                $q->where(function ($subQ) use ($startTimeCarbon, $endTimeCarbon) { // Period 1 overlaps Period 2
                    $subQ->where('start_time', '<', $endTimeCarbon->format('H:i:s'))
                        ->where('end_time', '>', $startTimeCarbon->format('H:i:s'));
                });
                // يمكنك إضافة شروط أخرى إذا أردت أن تكون الفترات متلاصقة مسموحة أو ممنوعة
                // ->orWhere('start_time', '=', $endTimeCarbon->format('H:i:s')) // متلاصقة في النهاية
                // ->orWhere('end_time', '=', $startTimeCarbon->format('H:i:s')); // متلاصقة في البداية
            });

        if ($excludeId) {
            $overlapping->where('id', '!=', $excludeId);
        }

        if ($overlapping->exists()) {
            $validator->errors()->add('time_overlap', 'This timeslot overlaps with an existing timeslot on the same day.');
        }
    }

    /**
     * Remove the specified timeslot from storage.
     */
    public function destroy(Timeslot $timeslot)
    {
        // التحقق من وجود جداول مرتبطة
        if ($timeslot->scheduleEntries()->exists()) {
            return redirect()->route('data-entry.timeslots.index')
                ->with('error', 'Cannot delete timeslot. It is used in generated schedules.');
        }

        // 1. Delete
        try {
            $timeslot->delete();
            return redirect()->route('data-entry.timeslots.index')
                ->with('success', 'Timeslot deleted successfully.');
        } catch (Exception $e) {
            Log::error('Timeslot Deletion Failed: ' . $e->getMessage());
            return redirect()->route('data-entry.timeslots.index')
                ->with('error', 'Failed to delete timeslot.');
        }
    }

    // =============================================
    //             API Controller Methods
    // =============================================
    /**
     * Display a listing of the timeslots (API).
     */
    public function apiIndex(Request $request) // إضافة Request للفلترة المحتملة
    {
        try {
            $query = Timeslot::query(); // ابدأ بإنشاء query builder

            // (اختياري) فلترة بسيطة
            if ($request->has('day')) {
                $query->where('day', $request->day);
            }
            // يمكنك إضافة فلترة حسب الوقت هنا إذا احتجت

            // جلب الفترات مرتبة باليوم ثم الوقت
            // وتحديد الحقول المطلوبة
            $timeslots = $query->orderByRaw("FIELD(day, 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday')") // ترتيب مخصص للأيام
                ->orderBy('start_time')
                ->get(['id', 'day', 'start_time', 'end_time']);

            // --- كود الـ Pagination (معطل) ---
            /*
            $perPage = $request->query('per_page', 50); // عرض عدد أكبر في الصفحة للـ timeslots
            $timeslotsPaginated = $query->orderByRaw(...) // نفس الترتيب
                                         ->orderBy('start_time')
                                         ->paginate($perPage, ['id', 'day', 'start_time', 'end_time']);

            return response()->json([
                'success' => true,
                'data' => $timeslotsPaginated->items(),
                'pagination' => [ 'total' => $timeslotsPaginated->total(), ... ]
            ], 200);
            */

            return response()->json(['success' => true, 'data' => $timeslots], 200);
        } catch (Exception $e) {
            Log::error('API Error fetching timeslots: ' . $e->getMessage());
            return response()->json(['success' => false, 'message' => 'Server Error'], 500);
        }
    }

    /**
     * Store a newly created timeslot from API request.
     */

    public function apiStore(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'day' => ['required', Rule::in(self::DAYS_OF_WEEK)],
            'start_time' => 'required|date_format:H:i', // H:i for 24-hour format
            'end_time' => 'required|date_format:H:i|after:start_time',
        ]);

        $validator->after(function ($validator) use ($request) {
            if (!$validator->errors()->hasAny()) {
                $this->validateTimeslotUniquenessAndOverlap(
                    $validator,
                    $request->input('day'),
                    $request->input('start_time'),
                    $request->input('end_time')
                );
            }
        });

        if ($validator->fails()) {
            return response()->json(['success' => false, 'errors' => $validator->errors()], 422);
        }

        try {
            $timeslot = Timeslot::create($validator->validated());
            return response()->json(['success' => true, 'data' => $timeslot, 'message' => 'Timeslot created successfully.'], 201);
        } catch (Exception $e) {
            Log::error('API Timeslot Creation Failed: ' . $e->getMessage());
            return response()->json(['success' => false, 'message' => 'Failed to create timeslot.'], 500);
        }
    }

    /**
     * Generate standard weekly timeslots from API request.
     */
    public function apiGenerateStandard(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'working_days' => 'required|array|min:1',
            'working_days.*' => ['required', Rule::in(self::DAYS_OF_WEEK)],
            'overall_start_time' => 'required|date_format:H:i',
            'overall_end_time' => 'required|date_format:H:i|after:overall_start_time',
            'lecture_duration' => 'required|integer|min:15',
            'break_duration' => 'required|integer|min:0',
        ]);

        if ($validator->fails()) {
            return response()->json(['success' => false, 'errors' => $validator->errors()], 422);
        }

        try {
            DB::transaction(function () use ($request) {
                Timeslot::query()->delete();
                // Timeslot::truncate(); // أو
                Log::info('Old timeslots deleted for standard API generation.');

                $newTimeslots = [];
                $workingDays = $request->input('working_days');
                $startTime = Carbon::createFromTimeString($request->input('overall_start_time'));
                $endTime = Carbon::createFromTimeString($request->input('overall_end_time'));
                $lectureDurationMinutes = (int)$request->input('lecture_duration');
                $breakDurationMinutes = (int)$request->input('break_duration');

                foreach ($workingDays as $day) {
                    $currentTime = $startTime->copy();
                    while ($currentTime->copy()->addMinutes($lectureDurationMinutes)->lte($endTime)) {
                        $slotEndTime = $currentTime->copy()->addMinutes($lectureDurationMinutes);
                        $newTimeslots[] = [
                            'day' => $day,
                            'start_time' => $currentTime->format('H:i:s'),
                            'end_time' => $slotEndTime->format('H:i:s'),
                            'created_at' => now(),
                            'updated_at' => now(),
                        ];
                        $currentTime = $slotEndTime->copy()->addMinutes($breakDurationMinutes);
                    }
                }
                if (!empty($newTimeslots)) {
                    Timeslot::insert($newTimeslots);
                }
            });

            $generatedCount = Timeslot::count(); // عدد الفترات التي تم إنشاؤها
            return response()->json(['success' => true, 'message' => "{$generatedCount} standard timeslots generated successfully."], 200);
        } catch (Exception $e) {
            Log::error('API Failed to generate standard timeslots: ' . $e->getMessage());
            return response()->json(['success' => false, 'message' => 'Failed to generate timeslots: ' . $e->getMessage()], 500);
        }
    }


    /**
     * Display the specified timeslot (API).
     */
    public function apiShow(Timeslot $timeslot)
    {
        // يمكنك إضافة ->loadCount('scheduleEntries') هنا إذا أردت عرض عدد المحاضرات
        // $timeslot->loadCount('scheduleEntries');
        return response()->json(['success' => true, 'data' => $timeslot], 200);
    }

    /**
     * Update the specified timeslot from API request.
     */
    public function apiUpdate(Request $request, Timeslot $timeslot)
    {
        $validator = Validator::make($request->all(), [
            'day' => ['sometimes', 'required', Rule::in(self::DAYS_OF_WEEK)],
            'start_time' => 'sometimes|required|date_format:H:i',
            'end_time' => 'sometimes|required|date_format:H:i|after:start_time',
        ]);

        $validator->after(function ($validator) use ($request, $timeslot) {
            if (!$validator->errors()->hasAny()) {
                // جلب القيم للتأكد (إذا لم يتم إرسالها، استخدم القيمة الحالية)
                $day = $request->input('day', $timeslot->day);
                $startTime = $request->input('start_time', $timeslot->start_time);
                $endTime = $request->input('end_time', $timeslot->end_time);

                $this->validateTimeslotUniquenessAndOverlap(
                    $validator,
                    $day,
                    $startTime,
                    $endTime,
                    $timeslot->id
                );
            }
        });

        if ($validator->fails()) {
            return response()->json(['success' => false, 'errors' => $validator->errors()], 422);
        }
        try {
            $timeslot->update($validator->validated()); // استخدام البيانات التي تم التحقق منها فقط
            return response()->json(['success' => true, 'data' => $timeslot, 'message' => 'Timeslot updated successfully.'], 200);
        } catch (Exception $e) {
            Log::error('API Timeslot Update Failed: ' . $e->getMessage());
            return response()->json(['success' => false, 'message' => 'Failed to update timeslot.'], 500);
        }
    }

    /**
     * Remove the specified timeslot (API).
     */
    public function apiDestroy(Timeslot $timeslot)
    {
        // ... (نفس كود الحذف من الويب، ولكن يرجع JSON) ...
        if ($timeslot->scheduleEntries()->exists()) {
            return response()->json(['success' => false, 'message' => 'Cannot delete: used in schedules.'], 409);
        }
        try {
            $timeslot->delete();
            return response()->json(['success' => true, 'message' => 'Timeslot deleted.'], 200);
        } catch (Exception $e) {
            return response()->json(['success' => false, 'message' => 'Failed to delete.'], 500);
        }
    }
}
----------------------------------------------------------------------------------------------------------
app\Http\Controllers\DataEntry\UserController.php
<?php

namespace App\Http\Controllers\DataEntry;

use App\Http\Controllers\Controller;
use App\Models\Role;
use App\Models\User;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Log; // اختياري
use Illuminate\Validation\Rules\Password; // للتحقق المعقد (اختياري)
use Illuminate\Validation\Rule;
use Exception;

class UserController extends Controller
{
    // =============================================
    //            Web Controller Methods
    // =============================================

    /**
     * Display a listing of the users (Web View) with Pagination.
     */
    public function index()
    {
        try {
            // جلب المستخدمين مرتبين بالأحدث مع الدور وتقسيم الصفحات
            $users = User::with('role')->latest()->paginate(15);

            $roles = Role::orderBy('display_name')->get();

            return view('dashboard.data-entry.users', compact('users', 'roles'));
        } catch (Exception $e) {
            Log::error('Error fetching users for web view: ' . $e->getMessage());
            return redirect()->back()->with('error', 'Could not load users.');
        }
    }

    /**
     * Store a newly created user from web request.
     */
    public function store(Request $request)
    {
        // 1. Validation
        $validatedData = $request->validate([
            'name' => 'required|string|max:255',
            'email' => 'required|string|email|max:255|unique:users,email',
            'password' => 'required|string|min:8|confirmed', // أبسط قاعدة
            // 'password' => ['required', 'confirmed', Password::min(8)], // قاعدة أبسط باستخدام Rule
            'role_id' => 'required|integer|exists:roles,id',
            'verify_email' => 'sometimes|boolean', // استخدام sometimes
        ]);

        // 2. Prepare Data
        $data = [
            'name' => $validatedData['name'],
            'email' => $validatedData['email'],
            'password' => Hash::make($validatedData['password']),
            'role_id' => $validatedData['role_id'],
            'email_verified_at' => isset($validatedData['verify_email']) && $validatedData['verify_email'] ? now() : null,
        ];

        // 3. Add to Database
        try {
            User::create($data);
            // 4. Redirect
            return redirect()->route('data-entry.users.index')
                ->with('success', 'User created successfully.');
        } catch (Exception $e) {
            Log::error('User Creation Failed (Web): ' . $e->getMessage());
            return redirect()->back()
                ->with('error', 'Failed to create user.')
                ->withInput();
        }
    }

    /**
     * Update the specified user from web request.
     */
    public function update(Request $request, User $user)
    {
        // منع تعديل الأدمن الأول
        if ($user->id === 1 && auth()->id() !== 1) {
            return redirect()->route('data-entry.users.index')
                ->with('error', 'Unauthorized action.');
        }

        // 1. Validation
        $validatedData = $request->validate([
            'name' => 'required|string|max:255',
            'email' => 'required|string|email|max:255|unique:users,email,' . $user->id,
            'password' => 'nullable|string|min:8|confirmed', // كلمة المرور اختيارية عند التحديث
            // 'password' => ['nullable', 'confirmed', Password::min(8)],
            'role_id' => [
                'required',
                'integer',
                'exists:roles,id',
                // دالة التحقق لمنع تغيير دور الأدمن الأول
                function ($attribute, $value, $fail) use ($user) {
                    if ($user->id === 1 && Role::find($value)?->name !== 'admin') {
                        $fail('The primary admin role cannot be changed.');
                    }
                },
            ],
            'verify_email' => 'sometimes|boolean',
            'unverify_email' => 'sometimes|boolean',
        ]);

        // 2. Prepare Data for Update
        $data = [
            'name' => $validatedData['name'],
            'email' => $validatedData['email'],
        ];

        // إضافة الدور فقط إذا لم يكن الأدمن الأول أو لم يتغير دوره
        if ($user->id !== 1 || $validatedData['role_id'] == $user->role_id) {
            $data['role_id'] = $validatedData['role_id'];
        } else {
            // تجاهل تغيير الدور للأدمن الأول (يمكن إضافة رسالة تحذير)
            session()->flash('warning', 'Primary admin role cannot be changed.');
        }

        // إضافة كلمة المرور فقط إذا تم إدخالها
        if (!empty($validatedData['password'])) {
            $data['password'] = Hash::make($validatedData['password']);
        }

        // تحديث حالة تأكيد الإيميل
        if (isset($validatedData['unverify_email']) && $validatedData['unverify_email']) {
            $data['email_verified_at'] = null;
        } elseif (isset($validatedData['verify_email']) && $validatedData['verify_email']) {
            $data['email_verified_at'] = now();
        }

        // 3. Update Database
        try {
            $user->update($data);
            // 4. Redirect
            return redirect()->route('data-entry.users.index') // تأكد من اسم الروت
                ->with('success', 'User updated successfully.');
        } catch (Exception $e) {
            Log::error('User Update Failed (Web): ' . $e->getMessage());
            return redirect()->back()
                ->with('error', 'Failed to update user.')
                ->withInput();
        }
    }

    /**
     * Remove the specified user from web request.
     */
    public function destroy(User $user)
    {
        // منع حذف الأدمن الأول أو المستخدم الحالي
        if ($user->id === 1) {
            return redirect()->route('data-entry.users.index')
                ->with('error', 'The primary admin user cannot be deleted.');
        }
        if ($user->id === auth()->id()) {
            return redirect()->route('data-entry.users.index')
                ->with('error', 'You cannot delete your own account.');
        }

        // 1. Delete from Database
        try {
            $user->delete(); // هذا سيضبط user_id في instructors إلى null بسبب onDelete('set null')
            // 2. Redirect
            return redirect()->route('data-entry.users.index')
                ->with('success', 'User deleted successfully.');
        } catch (Exception $e) {
            Log::error('User Deletion Failed (Web): ' . $e->getMessage());
            return redirect()->route('data-entry.users.index')
                ->with('error', 'Failed to delete user.');
        }
    }


    // =============================================
    //             API Controller Methods
    // =============================================

    /**
     * Display a listing of the users (API).
     * عرض قائمة المستخدمين للـ API (بدون Pagination حالياً)
     */
    public function apiIndex(Request $request)
    {
        try {
            $query = User::with('role:id,name,display_name'); // تحميل الدور مع حقول محددة

            // (اختياري) فلترة
            if ($request->has('role_id')) {
                $query->where('role_id', $request->role_id);
            }
            // if ($request->has('q')) { // بحث بالاسم أو الإيميل
            //     $searchTerm = $request->q;
            //     $query->where(function ($q) use ($searchTerm) {
            //         $q->where('name', 'like', "%{$searchTerm}%")
            //           ->orWhere('email', 'like', "%{$searchTerm}%");
            //     });
            // }

            // --- الخيار 1: جلب كل المستخدمين (الحالة الحالية) ---
            $users = $query->latest('id') // الترتيب بالأحدث
                ->get(['id', 'name', 'email', 'role_id', 'email_verified_at', 'created_at']); // تحديد الحقول

            // --- الخيار 2: كود الـ Pagination للـ API (معطل حالياً) ---
            /*
            $perPage = $request->query('per_page', 15);
            $usersPaginated = $query->latest('id')
                                    ->paginate($perPage, ['id', 'name', 'email', 'role_id', 'email_verified_at', 'created_at']);

            // نحتاج لتحميل الدور يدوياً بعد الـ pagination
            // $usersPaginated->load('role:id,name,display_name');

            return response()->json([
                'success' => true,
                'data' => $usersPaginated->items(),
                'pagination' => [
                    'total' => $usersPaginated->total(),
                    'per_page' => $usersPaginated->perPage(),
                    'current_page' => $usersPaginated->currentPage(),
                    'last_page' => $usersPaginated->lastPage(),
                ]
            ], 200);
            */
            // --- نهاية كود الـ Pagination المعطل ---


            return response()->json(['success' => true, 'data' => $users], 200);
        } catch (Exception $e) {
            Log::error('API Error fetching users: ' . $e->getMessage());
            return response()->json(['success' => false, 'message' => 'Server Error'], 500);
        }
    }

    /**
     * Store a newly created user from API request.
     * تخزين مستخدم جديد قادم من طلب API
     */
    public function apiStore(Request $request)
    {
        // 1. Validation
        $validatedData = $request->validate([
            'name' => 'required|string|max:255',
            'email' => 'required|string|email|max:255|unique:users,email',
            'password' => 'required|string|min:8', // لا نحتاج confirmed في الـ API عادةً
            'role_id' => 'required|integer|exists:roles,id',
            'verify_email' => 'sometimes|boolean',
        ]);

        // 2. Prepare Data
        $data = [
            'name' => $validatedData['name'],
            'email' => $validatedData['email'],
            'password' => Hash::make($validatedData['password']),
            'role_id' => $validatedData['role_id'],
            'email_verified_at' => isset($validatedData['verify_email']) && $validatedData['verify_email'] ? now() : null,
        ];

        // 3. Add to Database
        try {
            $user = User::create($data);
            $user->load('role:id,name,display_name'); // تحميل الدور لعرضه
            // 4. Return Success JSON Response
            return response()->json([
                'success' => true,
                'data' => $user,
                'message' => 'User created successfully.'
            ], 201);
        } catch (Exception $e) {
            Log::error('API User Creation Failed: ' . $e->getMessage());
            return response()->json(['success' => false, 'message' => 'Failed to create user.'], 500);
        }
    }

    /**
     * Display the specified user (API).
     */
    public function apiShow(User $user)
    {
        $user->load('role:id,name,display_name'); // تحميل الدور
        // $user->load('instructor:id,instructor_no');
        return response()->json([
            'success' => true,
            'data' => $user,
        ], 200);
    }

    /**
     * Update the specified user from API request.
     */
    public function apiUpdate(Request $request, User $user)
    {
        // منع تعديل الأدمن الأول (حماية بسيطة)
        if ($user->id === 1 && auth()->id() !== 1) { // افترض أن المصادقة تعمل
            return response()->json(['success' => false, 'message' => 'Unauthorized action.'], 403); // 403 Forbidden
        }

        // 1. Validation
        $validatedData = $request->validate([
            'name' => 'sometimes|required|string|max:255',
            'email' => [
                'sometimes',
                'required',
                'string',
                'email',
                'max:255',
                'unique:users,email,' . $user->id,
            ],
            'password' => 'sometimes|nullable|string|min:8', // كلمة المرور اختيارية
            'role_id' => [
                'sometimes',
                'required',
                'integer',
                'exists:roles,id',
                function ($attribute, $value, $fail) use ($user) {
                    if ($user->id === 1 && Role::find($value)?->name !== 'admin') {
                        $fail('The primary admin role cannot be changed.');
                    }
                },
            ],
            'verify_email' => 'sometimes|boolean',
            'unverify_email' => 'sometimes|boolean',
        ]);

        // 2. Prepare Data for Update
        $data = [];
        if (isset($validatedData['name'])) $data['name'] = $validatedData['name'];
        if (isset($validatedData['email'])) $data['email'] = $validatedData['email'];
        if (isset($validatedData['role_id']) && ($user->id !== 1 || $validatedData['role_id'] == $user->role_id)) {
            $data['role_id'] = $validatedData['role_id'];
        }
        if (!empty($validatedData['password'])) {
            $data['password'] = Hash::make($validatedData['password']);
        }
        if (isset($validatedData['unverify_email']) && $validatedData['unverify_email']) {
            $data['email_verified_at'] = null;
        } elseif (isset($validatedData['verify_email']) && $validatedData['verify_email']) {
            $data['email_verified_at'] = now();
        }


        // 3. Update Database
        try {
            // فقط قم بالتحديث إذا كان هناك بيانات للتحديث
            if (!empty($data)) {
                $user->update($data);
            }
            $user->load('role:id,name,display_name'); // تحميل الدور بعد التحديث
            // 4. Return Success JSON Response
            return response()->json([
                'success' => true,
                'data' => $user,
                'message' => 'User updated successfully.'
            ], 200);
        } catch (Exception $e) {
            Log::error('API User Update Failed: ' . $e->getMessage());
            return response()->json(['success' => false, 'message' => 'Failed to update user.'], 500);
        }
    }

    /**
     * Remove the specified user from API request.
     */
    public function apiDestroy(User $user)
    {
        // منع حذف الأدمن الأول أو المستخدم الحالي (إذا كانت المصادقة مفعلة)
        if ($user->id === 1) {
            return response()->json(['success' => false, 'message' => 'Primary admin cannot be deleted.'], 403);
        }
        if ($user->id === auth()->id()) { // افترض أن المصادقة تعمل
            return response()->json(['success' => false, 'message' => 'You cannot delete your own account.'], 403);
        }

        // 1. Delete from Database
        try {
            $user->delete();
            // 2. Return Success JSON Response
            return response()->json([
                'success' => true,
                'message' => 'User deleted successfully.'
            ], 200);
        } catch (Exception $e) {
            Log::error('API User Deletion Failed: ' . $e->getMessage());
            return response()->json(['success' => false, 'message' => 'Failed to delete user.'], 500);
        }
    }
}


<?php

namespace App\Services;

use App\Models\Population;
use App\Models\Chromosome;
use App\Models\Gene;
use App\Models\Section;
use App\Models\Instructor;
use App\Models\Room;
use App\Models\Timeslot;
use Illuminate\Support\Collection;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Str;
use Exception;

class GeneticAlgorithmService
{
    private array $settings;
    private Population $populationRun;
    private Collection $sections;
    private Collection $instructors;
    private Collection $rooms;
    private Collection $timeslots;

    public function __construct(array $settings, Population $populationRun)
    {
        $this->settings = $settings;
        $this->populationRun = $populationRun;
        Log::info("GA Service initialized for Population Run ID: {$this->populationRun->population_id}");
    }

    public function run()
    {
        try {
            $this->populationRun->update(['status' => 'running', 'start_time' => now()]);
            $this->loadInitialData();

            // إنشاء وتقييم الجيل الأول
            $currentGenerationNumber = 1;
            $currentPopulation = $this->createInitialPopulation($currentGenerationNumber);
            $this->evaluateFitness($currentPopulation);

            // حلقة الأجيال
            $maxGenerations = $this->settings['max_generations'];
            while ($currentGenerationNumber < $maxGenerations) {
                Log::info("---------- Starting Generation #{$currentGenerationNumber} ----------");
                $bestChromosomeInGen = $currentPopulation->sortBy('penalty_value')->first();
                if ($bestChromosomeInGen->penalty_value == 0 && ($this->settings['stop_at_first_valid'] ?? false)) {
                    Log::info("Optimal solution found in Generation #{$currentGenerationNumber}! Stopping.");
                    $this->populationRun->update(['best_chromosome_id' => $bestChromosomeInGen->chromosome_id]);
                    break;
                }

                // اختيار الآباء
                $parents = $this->selectParents($currentPopulation);
                Log::info("Selected " . count($parents) . " parents for next generation using Tournament Selection.");

                // التزاوج والطفرة لإنشاء الجيل الجديد
                $currentGenerationNumber++;
                $currentPopulation = $this->crossoverAndMutate($parents, $currentGenerationNumber);

                // تقييم الجيل الجديد
                $this->evaluateFitness($currentPopulation);
                Log::info("Generation #{$currentGenerationNumber} fitness evaluated.");
            }

            // تحديث الحالة النهائية
            $finalBestChromosome = Chromosome::where('population_id', $this->populationRun->population_id)->orderBy('penalty_value', 'asc')->first();
            $this->populationRun->update([
                'status' => 'completed',
                'end_time' => now(),
                'best_chromosome_id' => $finalBestChromosome ? $finalBestChromosome->chromosome_id : null
            ]);
            Log::info("GA Run ID: {$this->populationRun->population_id} completed.");
        } catch (Exception $e) {
            Log::error("GA Run failed: " . $e->getMessage() . " in " . $e->getFile() . " on line " . $e->getLine());
            $this->populationRun->update(['status' => 'failed']);
            throw $e;
        }
        // try {
        //     $this->populationRun->update(['status' => 'running', 'start_time' => now()]);
        //     $this->loadInitialData();

        //     // إنشاء الجيل الأول
        //     $currentGenerationNumber = 1;
        //     $currentPopulation = $this->createInitialPopulation($currentGenerationNumber);
        //     $this->evaluateFitness($currentPopulation);

        //     // --- حلقة الأجيال ---
        //     $maxGenerations = $this->settings['max_generations'];
        //     while ($currentGenerationNumber < $maxGenerations) {
        //         Log::info("---------- Starting Generation #{$currentGenerationNumber} ----------");

        //         // التحقق من شرط التوقف
        //         $bestChromosomeInGeneration = $currentPopulation->sortBy('penalty_value')->first();
        //         if ($bestChromosomeInGeneration->penalty_value == 0 && ($this->settings['stop_at_first_valid'] ?? false)) {
        //             Log::info("Optimal solution found in Generation #{$currentGenerationNumber}! Stopping run.");
        //             $this->populationRun->update(['best_chromosome_id' => $bestChromosomeInGeneration->chromosome_id]);
        //             break;
        //         }

        //         // اختيار الآباء للجيل القادم
        //         $parents = $this->selectParents($currentPopulation);

        //         //     // التزاوج والطفرة لإنشاء الجيل الجديد
        //         $currentGenerationNumber++; // الانتقال للجيل التالي
        //         //     $currentPopulation = $this->crossoverAndMutate($parents, $currentGenerationNumber);

        //         //     // تقييم الجيل الجديد
        //         //     $this->evaluateFitness($currentPopulation);
        //         //     Log::info("Generation #{$currentGenerationNumber} fitness evaluated.");
        //         // }
        //         // التزاوج والطفرة لإنشاء الجيل الجديد
        //         $currentPopulation = $this->crossoverAndMutate($parents, $currentGenerationNumber);
        //         Log::info("New generation #" . ($currentGenerationNumber) . " created with " . $currentPopulation->count() . " chromosomes.");


        //         // تقييم الجيل الجديد
        //         $this->evaluateFitness($currentPopulation);
        //         Log::info("Generation #{$currentGenerationNumber} fitness evaluated.");
        //     }

        //     // تحديث حالة التشغيل النهائية
        //     $finalBestChromosome = Chromosome::where('population_id', $this->populationRun->population_id)->orderBy('penalty_value', 'asc')->first();
        //     $this->populationRun->update([
        //         'status' => 'completed',
        //         'end_time' => now(),
        //         'best_chromosome_id' => $finalBestChromosome ? $finalBestChromosome->chromosome_id : null
        //     ]);
        //     Log::info("GA Run ID: {$this->populationRun->population_id} completed.");
        // } catch (Exception $e) {
        //     Log::error("GA Run failed for Population Run ID: {$this->populationRun->population_id}. Error: " . $e->getMessage() . " in " . $e->getFile() . " on line " . $e->getLine());
        //     $this->populationRun->update(['status' => 'failed']);
        //     throw $e; // Throw exception to fail the job
        // }
    }


    private function loadInitialData()
    {
        Log::info("Loading initial data for GA...");
        $this->sections = Section::all();
        $this->instructors = Instructor::all();
        $this->rooms = Room::all();
        $this->timeslots = Timeslot::all();
        if ($this->sections->isEmpty() || $this->instructors->isEmpty() || $this->rooms->isEmpty() || $this->timeslots->isEmpty()) {
            throw new Exception("Not enough data to run the algorithm.");
        }
        Log::info("Data loaded: " . $this->sections->count() . " sections.");
    }

    private function createInitialPopulation(int $generationNumber)
    {
        Log::info("Creating initial population (Generation #{$generationNumber}) of size: " . $this->settings['population_size']);
        $newChromosomes = [];

        for ($i = 0; $i < $this->settings['population_size']; $i++) {
            $chromosome = Chromosome::create([
                'population_id' => $this->populationRun->population_id,
                'penalty_value' => 999999,
                'generation_number' => $generationNumber,
            ]);

            $genesData = [];
            foreach ($this->sections as $section) {
                $genesData[] = [
                    'chromosome_id' => $chromosome->chromosome_id,
                    'section_id' => $section->id,
                    'instructor_id' => $this->instructors->random()->id,
                    'room_id' => $this->rooms->random()->id,
                    'timeslot_id' => $this->timeslots->random()->id,
                ];
            }
            Gene::insert($genesData);
            $newChromosomes[] = $chromosome;
        }

        Log::info("Initial population created successfully.");
        return collect($newChromosomes);
    }

    private function evaluateFitness(Collection $chromosomes)
    {
        Log::info("Evaluating fitness for " . $chromosomes->count() . " chromosomes...");
        foreach ($chromosomes as $chromosome) {
            $genes = Gene::where('chromosome_id', $chromosome->chromosome_id)->get();
            $totalPenalty = 0;
            $genesByTimeslot = $genes->groupBy('timeslot_id');
            foreach ($genesByTimeslot as $genesInSlot) {
                if ($genesInSlot->count() > 1) {
                    $totalPenalty += ($genesInSlot->count() - $genesInSlot->pluck('instructor_id')->unique()->count()) * 1000;
                    $totalPenalty += ($genesInSlot->count() - $genesInSlot->pluck('room_id')->unique()->count()) * 1000;
                    $totalPenalty += ($genesInSlot->count() - $genesInSlot->pluck('section_id')->unique()->count()) * 1000;
                }
            }
            // ... (باقي حسابات الـ penalty للسعة والنوع) ...
            $chromosome->update(['penalty_value' => $totalPenalty]);
        }
        Log::info("Fitness evaluation completed.");
    }

    /**
     * اختيار الآباء (سنثبتها على Tournament Selection الآن)
     */
    private function selectParents(Collection $population)
    {
        Log::info("Using Tournament Selection.");
        $parents = [];
        $populationSize = $this->settings['population_size'];
        $tournamentSize = 3;
        for ($i = 0; $i < $populationSize; $i++) {
            $tournamentContestants = $population->random($tournamentSize);
            $winner = $tournamentContestants->sortBy('penalty_value')->first();
            $parents[] = $winner;
        }
        return $parents;
    }


    /**
     * تنفيذ التزاوج والطفرة لإنشاء جيل جديد
     */
    private function crossoverAndMutate(array $parents, int $nextGenerationNumber)
    {
        $newChromosomes = [];
        $populationSize = $this->settings['population_size'];

        for ($i = 0; $i < $populationSize; $i += 2) {
            // اختيار أبوين
            $parent1 = $parents[array_rand($parents)];
            $parent2 = $parents[array_rand($parents)];

            // تنفيذ عملية التزاوج (Single-Point Crossover)
            [$child1GenesData, $child2GenesData] = $this->performSinglePointCrossover($parent1, $parent2);

            // تنفيذ عملية الطفرة
            $child1GenesData = $this->performMutation($child1GenesData);
            $child2GenesData = $this->performMutation($child2GenesData);

            // حفظ الأبناء الجدد في قاعدة البيانات
            $newChromosomes[] = $this->saveChildChromosome($child1GenesData, $nextGenerationNumber);
            if (count($newChromosomes) < $populationSize) {
                $newChromosomes[] = $this->saveChildChromosome($child2GenesData, $nextGenerationNumber);
            }
        }

        return collect($newChromosomes);
    }

    /**
     * *** الطريقة الجديدة والأكثر أماناً للتزاوج (Single-Point Crossover) ***
     */
    private function performSinglePointCrossover(Chromosome $parent1, Chromosome $parent2)
    {
        // 1. جلب الجينات كمصفوفات ترابطية (key = section_id)
        $p1Genes = $parent1->genes()->get()->keyBy('section_id');
        $p2Genes = $parent2->genes()->get()->keyBy('section_id');

        $child1GenesData = [];
        $child2GenesData = [];
        $geneCount = $this->sections->count();
        $crossoverPoint = rand(1, $geneCount - 1);
        $currentIndex = 0;

        // 2. المرور على كل الشعب التي يجب جدولتها
        foreach ($this->sections as $section) {
            $sectionId = $section->id;

            // 3. تحديد الأب المصدر لكل ابن
            $sourceForChild1 = ($currentIndex < $crossoverPoint) ? $p1Genes : $p2Genes;
            $sourceForChild2 = ($currentIndex < $crossoverPoint) ? $p2Genes : $p1Genes;

            // 4. استخراج الجين من المصدر المحدد
            $geneForChild1 = $sourceForChild1->get($sectionId);
            $geneForChild2 = $sourceForChild2->get($sectionId);

            // 5. *** التحقق من وجود الجين (الحل للمشكلة) ***
            // إذا لم يكن الجين موجوداً في المصدر الأول (حالة نادرة جداً)، خذه من المصدر الثاني
            if (!$geneForChild1) {
                Log::warning("Gene for section {$sectionId} missing in primary parent, taking from secondary.");
                $geneForChild1 = $p2Genes->get($sectionId);
            }
            if (!$geneForChild2) {
                Log::warning("Gene for section {$sectionId} missing in primary parent, taking from secondary.");
                $geneForChild2 = $p1Genes->get($sectionId);
            }

            // 6. إذا كان لا يزال null (حالة شبه مستحيلة)، أنشئ جيناً عشوائياً كبديل نهائي
            if (!$geneForChild1) {
                Log::error("Gene for section {$sectionId} is NULL in BOTH parents. Creating random gene.");
                $child1GenesData[] = $this->createRandomGeneData($sectionId);
            } else {
                $child1GenesData[] = $this->extractGeneData($geneForChild1);
            }

            if (!$geneForChild2) {
                Log::error("Gene for section {$sectionId} is NULL in BOTH parents. Creating random gene.");
                $child2GenesData[] = $this->createRandomGeneData($sectionId);
            } else {
                $child2GenesData[] = $this->extractGeneData($geneForChild2);
            }

            $currentIndex++;
        }

        return [$child1GenesData, $child2GenesData];
    }


    /**
     * تنفيذ عملية الطفرة
     */
    private function performMutation(array $genes)
    {
        $mutationRate = $this->settings['mutation_rate'];
        foreach ($genes as $index => &$geneData) { // استخدام & لتعديل المصفوفة الأصلية
            if (lcg_value() < $mutationRate) {
                Log::info("Mutation on gene for section ID: {$geneData['section_id']}");
                // تغيير الفترة الزمنية بشكل عشوائي
                $geneData['timeslot_id'] = $this->timeslots->random()->id;
            }
        }
        return $genes;
    }

    /**
     * دالة مساعدة لحفظ كروموسوم ابن جديد مع جيناته.
     */
    private function saveChildChromosome(array $genes, int $generationNumber)
    {
        $chromosome = Chromosome::create([
            'population_id' => $this->populationRun->population_id,
            'penalty_value' => 999999,
            'generation_number' => $generationNumber,
        ]);
        foreach ($genes as &$geneData) {
            $geneData['chromosome_id'] = $chromosome->chromosome_id;
        }
        Gene::insert($genes);
        return $chromosome;
    }

    /**
     * دالة مساعدة لاستخراج البيانات اللازمة من كائن الجين.
     */
    private function extractGeneData(Gene $gene)
    {
        return [
            'section_id' => $gene->section_id,
            'instructor_id' => $gene->instructor_id,
            'room_id' => $gene->room_id,
            'timeslot_id' => $gene->timeslot_id,
        ];
    }

    /**
     * دالة مساعدة لإنشاء جين عشوائي في الحالات الطارئة.
     */
    private function createRandomGeneData(int $sectionId)
    {
        return [
            'section_id' => $sectionId,
            'instructor_id' => $this->instructors->random()->id,
            'room_id' => $this->rooms->random()->id,
            'timeslot_id' => $this->timeslots->random()->id,
        ];
    }

    // private function selectParents(Collection $population)
    // {
    //     $parents = [];
    //     $populationSize = $this->settings['population_size'];
    //     $tournamentSize = 3;
    //     for ($i = 0; $i < $populationSize; $i++) {
    //         $tournamentContestants = $population->random($tournamentSize);
    //         $winner = $tournamentContestants->sortBy('penalty_value')->first();
    //         $parents[] = $winner;
    //     }
    //     return $parents;
    // }

    // /**
    //  * *** الدالة المعدلة والنهائية للتزاوج والطفرة ***
    //  */
    // private function crossoverAndMutate(array $parents, int $nextGenerationNumber): Collection
    // {
    //     $newChromosomes = collect();
    //     $populationSize = $this->settings['population_size'];

    //     // التأكد من أن الآباء ليسوا فارغين
    //     if (empty($parents)) {
    //         Log::error("Parents array is empty. Cannot perform crossover.");
    //         return $newChromosomes;
    //     }

    //     // جلب جينات كل الآباء مرة واحدة لتحسين الأداء
    //     $parentIds = collect($parents)->pluck('chromosome_id')->unique();
    //     $allParentGenes = Gene::whereIn('chromosome_id', $parentIds)->get()->groupBy('chromosome_id');

    //     // إنشاء الجيل الجديد
    //     for ($i = 0; $i < $populationSize; $i++) {
    //         // اختيار أبوين
    //         $parent1 = $parents[array_rand($parents)];
    //         $parent2 = $parents[array_rand($parents)];

    //         // جلب جينات الأبوين من المجموعة التي حملناها مسبقاً
    //         $parent1Genes = $allParentGenes->get($parent1->chromosome_id);
    //         $parent2Genes = $allParentGenes->get($parent2->chromosome_id);

    //         // إذا لم يتم العثور على جينات لأي سبب، تخطى
    //         if (!$parent1Genes || !$parent2Genes) {
    //             Log::warning("Could not find genes for one of the parents. Skipping this crossover.");
    //             // يمكننا إضافة كروموسوم عشوائي بدلاً من التخطي
    //             continue;
    //         }

    //         // *** عملية تزاوج وطفرة أكثر أماناً ***
    //         $childGenesData = $this->performCrossoverAndMutation(
    //             $parent1Genes->keyBy('section_id'),
    //             $parent2Genes->keyBy('section_id')
    //         );

    //         // إنشاء الكروموسوم الابن
    //         $childChromosome = Chromosome::create([
    //             'population_id' => $this->populationRun->population_id,
    //             'penalty_value' => 999999,
    //             'generation_number' => $nextGenerationNumber,
    //         ]);

    //         // إضافة chromosome_id لكل جين وحفظها
    //         $genesToInsert = collect($childGenesData)->map(function ($gene) use ($childChromosome) {
    //             $gene['chromosome_id'] = $childChromosome->chromosome_id;
    //             // تأكد من عدم وجود created_at/updated_at إذا لم تكن في $fillable
    //             // unset($gene['created_at'], $gene['updated_at']);
    //             return $gene;
    //         })->toArray();

    //         Gene::insert($genesToInsert);

    //         $newChromosomes->push($childChromosome);
    //     }

    //     return $newChromosomes;
    // }

    // /**
    //  * *** دالة مساعدة جديدة تجمع التزاوج والطفرة ***
    //  */
    // private function performCrossoverAndMutation(Collection $parent1Genes, Collection $parent2Genes): array
    // {
    //     $childGenesData = [];
    //     $mutationRate = $this->settings['mutation_rate'];

    //     // نمر على كل شعبة يجب جدولتها
    //     foreach ($this->sections as $section) {
    //         $sectionId = $section->id;

    //         // --- التزاوج (Uniform Crossover) ---
    //         // نختار بشكل عشوائي من أي أب سنأخذ الجين لهذه الشعبة
    //         $geneSourceParent = (rand(0, 1) == 0) ? $parent1Genes : $parent2Genes;
    //         $sourceGene = $geneSourceParent->get($sectionId); // البحث عن الجين بالـ section_id

    //         // إذا وجدنا الجين، نأخذ بياناته
    //         if ($sourceGene) {
    //             $childGene = [
    //                 'section_id' => $sourceGene->section_id,
    //                 'instructor_id' => $sourceGene->instructor_id,
    //                 'room_id' => $sourceGene->room_id,
    //                 'timeslot_id' => $sourceGene->timeslot_id,
    //             ];
    //         } else {
    //             // إذا لم نجد الجين (حالة نادرة)، ننشئ جيناً عشوائياً كبديل آمن
    //             $childGene = [
    //                 'section_id' => $sectionId,
    //                 'instructor_id' => $this->instructors->random()->id,
    //                 'room_id' => $this->rooms->random()->id,
    //                 'timeslot_id' => $this->timeslots->random()->timeslot_id,
    //             ];
    //             Log::warning("Gene for section {$sectionId} not found in parent, created random gene.");
    //         }

    //         // --- الطفرة ---
    //         if (lcg_value() < $mutationRate) {
    //             Log::info("Mutation occurred on gene for section ID: {$sectionId}");
    //             // تغيير الفترة الزمنية بشكل عشوائي
    //             $childGene['timeslot_id'] = $this->timeslots->random()->timeslot_id;
    //             // يمكنك إضافة طفرات أخرى هنا (تغيير المدرس، القاعة...)
    //         }

    //         $childGenesData[] = $childGene;
    //     }

    //     return $childGenesData;
    // }
}

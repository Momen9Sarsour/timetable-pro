database\migrations\2011_04_18_083751_create_roles_table.php
Schema::create('roles', function (Blueprint $table) {
            $table->id();

            $table->string('name')->unique(); // اسم الدور (مثل 'admin', 'instructor') - فريد
            $table->string('display_name')->nullable(); // اسم الدور للعرض (مثل 'مدير النظام', 'مدرس') - اختياري
            $table->text('description')->nullable(); // وصف للدور وصلاحياته - اختياري
            
            $table->timestamps();
        });
----------------------------------------------------------------------------------------------------------
database\migrations\2014_10_12_000000_create_users_table.php
Schema::create('users', function (Blueprint $table) {
            $table->id();
            $table->string('name');
            $table->string('email')->unique();
            $table->timestamp('email_verified_at')->nullable();
            $table->string('password');

            $table->foreignId('role_id') // المفتاح الأجنبي لجدول roles
                  ->nullable() // قد نسمح بأن يكون فارغاً مؤقتاً أو للمستخدمين غير النشطين
                  ->constrained('roles') // يربط بجدول roles ويتحقق من وجود الـ id
                  ->onUpdate('cascade') // إذا تغير id الدور، يتغير هنا
                  ->onDelete('set null'); // إذا حذف الدور، اجعل role_id هنا NULL (أو restrict لمنع الحذف)

            $table->rememberToken();
            $table->timestamps();
        });
---------------------------------------------------------------------------------------------------------
database\migrations\2025_04_18_084003_create_departments_table.php
Schema::create('departments', function (Blueprint $table) {
            $table->id();

            $table->string('department_no')->unique(); // رقم القسم (يفضل أن يكون فريداً)
            $table->string('department_name'); // اسم القسم
            // يمكن إضافة حقول أخرى لاحقاً إذا لزم الأمر (مثل رئيس القسم كـ user_id)
            
            $table->timestamps();
        });
-----------------------------------------------------------------------------------------------------------
database\migrations\2025_04_18_084122_create_subjects_types_table.php
Schema::create('subjects_types', function (Blueprint $table) {
            $table->id();

            $table->string('subject_type_name')->unique(); // اسم نوع المادة (فريد)
            
            $table->timestamps();
        });
---------------------------------------------------------------------------------------------------------
database\migrations\2025_04_18_084236_create_subjects_categories_table.php
Schema::create('subjects_categories', function (Blueprint $table) {
            $table->id();
            
            $table->string('subject_category_name')->unique(); // اسم فئة المادة (فريد)

            $table->timestamps();
        });
----------------------------------------------------------------------------------------------------------
database\migrations\2025_04_18_084339_create_rooms_types_table.php
Schema::create('rooms_types', function (Blueprint $table) {
            $table->id();

            $table->string('room_type_name')->unique(); // اسم نوع القاعة (فريد)
            
            $table->timestamps();
        });
----------------------------------------------------------------------------------------------------------
database\migrations\2025_04_18_084434_create_instructors_table.php
Schema::create('instructors', function (Blueprint $table) {
            $table->id();

            $table->string('instructor_no')->unique(); // الرقم الوظيفي للمدرس (فريد)
            $table->string('instructor_name'); // اسم المدرس
            $table->string('academic_degree')->nullable(); // الدرجة العلمية (مثل 'دكتور', 'ماجستير', 'بكالوريوس') - مهم لتحديد النصاب

            $table->foreignId('user_id')
                ->nullable() // نسمح بأن يكون فارغاً في البداية أو إذا كان المدرس لا يملك حساب دخول
                ->constrained('users') // يربط بجدول users
                ->onUpdate('cascade')
                ->onDelete('set null'); // إذا حذف اليوزر، يصبح هذا الحقل null

            $table->foreignId('department_id') // المفتاح الأجنبي لقسم المدرس
                ->nullable() // قد يكون هناك مدرسون غير مرتبطين بقسم مؤقتاً؟ أو نجعله required؟
                ->constrained('departments') // يربط بجدول departments
                ->onUpdate('cascade')
                ->onDelete('set null'); // إذا حذف القسم، اجعل department_id هنا NULL (أو restrict)

            // حقل لتخزين تفضيلات الوقت (اختياري في البداية، يمكن جعله JSON أو جدول منفصل لاحقاً)
            $table->json('availability_preferences')->nullable();
            // مثال للـ JSON: {"preferred": ["Sunday 8-10", "Monday 10-12"], "unavailable": ["Wednesday afternoon"]}

            // حقل لتحديد الحد الأقصى للساعات الأسبوعية (النصاب) - يمكن حسابه من الدرجة العلمية أو وضعه مباشرة
            $table->unsignedTinyInteger('max_weekly_hours')->nullable();

            // $table->string('office_location')->nullable(); // موقع المكتب
            // $table->text('office_hours')->nullable(); // الساعات المكتبية (كنص لوصفها)

            $table->timestamps();
        });
---------------------------------------------------------------------------------------------------------
database\migrations\2025_04_18_084547_create_subjects_table.php
Schema::create('subjects', function (Blueprint $table) {
            $table->id();

            $table->string('subject_no')->unique(); // رقم المادة أو رمزها (فريد)
            $table->string('subject_name'); // اسم المادة
            $table->unsignedTinyInteger('subject_load'); // العبء الدراسي للمادة (إجمالي الساعات المعتمدة)

            // ساعات نظرية وعملية منفصلة (مهم للجدولة وتحديد نوع القاعة)
            $table->unsignedTinyInteger('theoretical_hours')->default(0); // عدد الساعات النظرية الأسبوعية
            $table->unsignedTinyInteger('practical_hours')->default(0); // عدد الساعات العملية الأسبوعية

            // $table->integer('load_theoretical_section')->nullable(); // عدد الشعب النظرية
            // $table->Integer('load_practical_section')->nullable(); // عدد الشعب العملية
            // *** الحقول الجديدة لسعة الشعب ***
            $table->unsignedInteger('load_theoretical_section')->nullable()->default(50)->comment('Default/Max students in one theoretical section');
            $table->unsignedInteger('load_practical_section')->nullable()->default(25)->comment('Default/Max students in one practical section');

            $table->foreignId('subject_type_id') // نوع المادة (إجبارية، اختيارية..)
                ->nullable()
                ->constrained('subjects_types')
                ->onUpdate('cascade')
                ->onDelete('set null');

            $table->foreignId('subject_category_id') // فئة المادة (نظرية، عملية..)
                ->nullable()
                ->constrained('subjects_categories')
                ->onUpdate('cascade')
                ->onDelete('set null');

            // هل المادة تتبع قسماً معيناً بشكل أساسي؟ (حتى لو كانت تدرس في أقسام أخرى كمتطلب)
            $table->foreignId('department_id') // القسم الذي يقدم المادة بشكل أساسي
                ->nullable() // قد تكون مادة مشتركة (متطلب جامعة مثلاً) لا تتبع قسماً محدداً
                ->constrained('departments')
                ->onUpdate('cascade')
                ->onDelete('set null');

            // هل تحتاج المادة لنوع قاعة معين؟ (مثل مختبر حاسوب) - اختياري، يمكن تحديده عند الجدولة
            $table->foreignId('required_room_type_id')->nullable()->constrained('rooms_types');

            // تأكيد أن مجموع الساعات النظرية والعملية منطقي (يمكن إضافته كـ Check Constraint إذا كانت قاعدة البيانات تدعم)
            // أو يتم التحقق منه في الكود
            // DB::statement('ALTER TABLE subjects ADD CONSTRAINT chk_hours CHECK (theoretical_hours + practical_hours > 0);');

            $table->timestamps();
        });
----------------------------------------------------------------------------------------------------------
database\migrations\2025_04_18_084727_create_rooms_table.php
 Schema::create('rooms', function (Blueprint $table) {
            $table->id();

            $table->string('room_no')->unique(); // رقم القاعة أو اسمها المختصر (فريد)
            $table->string('room_name')->nullable(); // اسم القاعة الوصفي (اختياري)
            $table->unsignedSmallInteger('room_size'); // سعة القاعة (عدد المقاعد)

            // تخصيص القاعة حسب الجنس (إذا كانت الكلية تفصل)
            $table->enum('room_gender', ['Male', 'Female', 'Mixed'])->default('Mixed');

            // فرع الكلية (إذا كان هناك أكثر من فرع جغرافي)
            $table->string('room_branch')->nullable();

            $table->foreignId('room_type_id') // نوع القاعة (محاضرات، مختبر..)
                ->constrained('rooms_types') // الربط بجدول أنواع القاعات
                ->onUpdate('cascade')
                ->onDelete('cascade'); // إذا حذف نوع القاعة، قد يكون من المنطقي حذف القاعات التابعة له؟ أو restrict

            // $table->json('equipment')->nullable(); // لتخزين قائمة المعدات كـ JSON, e.g., ["projector", "whiteboard", "computers"]

            // هل القاعة متاحة طوال الوقت أم لها أوقات محددة؟ (اختياري)
            // $table->json('availability_schedule')->nullable();

            $table->timestamps();
        });
---------------------------------------------------------------------------------------------------------
database\migrations\2025_04_18_084820_create_plans_table.php
Schema::create('plans', function (Blueprint $table) {
            $table->id();

            $table->string('plan_no')->unique(); // رقم الخطة أو رمزها (فريد)
            $table->string('plan_name'); // اسم الخطة الوصفي (مثل 'دبلوم برمجة وقواعد بيانات - 2023')
            $table->year('year'); // سنة اعتماد الخطة
            $table->unsignedSmallInteger('plan_hours'); // إجمالي الساعات المعتمدة للخطة بالكامل
            $table->boolean('is_active')->default(true); // هل الخطة الدراسية فعالة حالياً؟

            // يمكن ربط الخطة بقسم معين إذا كانت كل خطة تتبع قسماً واحداً
            $table->foreignId('department_id')
                  ->nullable() // أو اجعلها required إذا كانت دائماً مرتبطة بقسم
                  ->constrained('departments')
                  ->onUpdate('cascade')
                  ->onDelete('set null'); // أو restrict

            $table->timestamps();
        });
-------------------------------------------------------------------------------------------------------
database\migrations\2025_04_18_084909_create_plan_subjects_table.php
 Schema::create('plan_subjects', function (Blueprint $table) {
            $table->id();

            $table->foreignId('plan_id') // ربط بالخطة الدراسية
                  ->constrained('plans')
                  ->onUpdate('cascade')
                  ->onDelete('cascade'); // إذا حذفت الخطة، تحذف موادها من هذا الجدول

            $table->foreignId('subject_id') // ربط بالمادة الدراسية
                  ->constrained('subjects')
                  ->onUpdate('cascade')
                  ->onDelete('cascade'); // إذا حذفت المادة، تحذف من الخطط المرتبطة بها

            $table->unsignedTinyInteger('plan_level'); // المستوى الدراسي (مثل 1 للسنة الأولى، 2 للسنة الثانية)
            $table->unsignedTinyInteger('plan_semester'); // الفصل الدراسي (مثل 1 للفصل الأول، 2 للفصل الثاني، 3 للصيفي إن وجد)

            // يمكن إضافة حقل لتحديد ما إذا كانت المادة متطلب سابق لمادة أخرى في نفس الخطة (Prerequisite)
            // $table->unsignedBigInteger('prerequisite_plan_subject_id')->nullable();
            // $table->foreign('prerequisite_plan_subject_id')->references('id')->on('plan_subjects')->onDelete('set null');

            // لضمان عدم تكرار نفس المادة بنفس المستوى والفصل في نفس الخطة
            $table->unique(['plan_id', 'subject_id', 'plan_level', 'plan_semester'], 'plan_subject_level_semester_unique');

            $table->timestamps();
        });
---------------------------------------------------------------------------------------------------------
database\migrations\2025_04_18_085020_create_plan_expected_counts_table.php
Schema::create('plan_expected_counts', function (Blueprint $table) {
            $table->id();
            $table->foreignId('plan_id') // ربط بالخطة الدراسية
                  ->constrained('plans')
                  ->onUpdate('cascade')
                  ->onDelete('cascade');

            $table->unsignedTinyInteger('plan_level'); // المستوى الدراسي
            $table->unsignedTinyInteger('plan_semester'); // الفصل الدراسي

            // تمييز الأعداد حسب الجنس (إذا كانت الشعب ستفصل)
            $table->unsignedSmallInteger('male_count')->default(0); // عدد الطلاب الذكور المتوقع
            $table->unsignedSmallInteger('female_count')->default(0); // عدد الطلاب الإناث المتوقع

            // تمييز الأعداد حسب الفرع (إذا كانت هناك فروع)
            $table->string('branch')->nullable(); // اسم الفرع (يجب أن يتطابق مع القيم في جدول rooms.room_branch)

            // يمكن إضافة حقل للسنة الأكاديمية التي ينطبق عليها هذا العدد المتوقع
            $table->year('academic_year');

            // لضمان عدم تكرار إدخال العدد لنفس المجموعة (خطة، مستوى، فصل، فرع، سنة)
            $table->unique(['plan_id', 'plan_level', 'plan_semester', 'branch', 'academic_year'], 'plan_expected_counts_unique');

            $table->timestamps();
        });
-------------------------------------------------------------------------------------------------------
database\migrations\2025_04_18_085328_create_sections_table.php
Schema::create('sections', function (Blueprint $table) {
            $table->id();

            // ربط الشعبة بالمادة المحددة في الخطة الدراسية
            // الطريقة 1: الربط بـ plan_subjects.id
            $table->foreignId('plan_subject_id')
                  ->constrained('plan_subjects')
                  ->onUpdate('cascade')
                  ->onDelete('cascade'); // إذا حذفت المادة من الخطة، تحذف شعبها

            // الطريقة 2: (بديلة) تخزين تفاصيل المادة والخطة هنا - قد يكون فيه تكرار
            // $table->foreignId('plan_id')->constrained('plans');
            // $table->foreignId('subject_id')->constrained('subjects');
            // $table->unsignedTinyInteger('plan_level');
            // $table->unsignedTinyInteger('plan_semester');

            $table->enum('activity_type', ['Theory', 'Practical'])->default('Theory'); // افتراضي Theory

            $table->unsignedTinyInteger('section_number'); // رقم الشعبة (1, 2, 3...) لنفس المادة في نفس المستوى/الفصل
            $table->unsignedSmallInteger('student_count'); // العدد الفعلي أو المخصص للطلاب في هذه الشعبة
            $table->enum('section_gender', ['Male', 'Female', 'Mixed'])->default('Mixed'); // جنس الطلاب في الشعبة
            $table->string('branch')->nullable(); // فرع الشعبة (إذا كانت الأعداد مقسمة حسب الفرع)

            // يمكن إضافة حقل للسنة الأكاديمية والفصل الدراسي لهذه الشعبة
            $table->year('academic_year');
            $table->unsignedTinyInteger('semester'); // (1=فصل أول, 2=فصل ثاني, 3=صيفي)

            // يمكن إضافة حقل لربط الشعبة بمدرس معين إذا تم التعيين مسبقاً (اختياري)
            // $table->foreignId('assigned_instructor_id')->nullable()->constrained('instructors')->onDelete('set null');

            // لضمان عدم تكرار نفس رقم الشعبة لنفس المادة في نفس السياق
            // (يعتمد على الطريقة المستخدمة لربط المادة - plan_subject_id أو التفاصيل)
            $table->unique(['plan_subject_id', 'section_number', 'academic_year', 'semester'], 'section_unique');
             // أو إذا استخدمت الطريقة 2:
            // $table->unique(['plan_id', 'subject_id', 'plan_level', 'plan_semester', 'section_number', 'branch', 'academic_year', 'semester'], 'section_details_unique');

            $table->unique([
                'plan_subject_id',
                'academic_year',
                'semester',
                'activity_type', // مضاف للقيد
                'section_number',
                'branch' // أضفت الفرع أيضاً للقيد ليكون أكثر دقة
            ], 'sections_unique_constraint'); // اسم جديد للقيد

            $table->timestamps();
        });
--------------------------------------------------------------------------------------------------------
database\migrations\2025_04_18_085621_create_notifications_table.php
Schema::create('notifications', function (Blueprint $table) {
            // $table->id();

            $table->uuid('id')->primary(); // استخدام UUID أفضل للتنبيهات
            $table->string('type'); // نوع كلاس التنبيه (مثل App\Notifications\ScheduleChanged)
            $table->morphs('notifiable'); // لربط التنبيه بالمستخدم (User) أو أي موديل آخر
            $table->text('data'); // بيانات التنبيه (مثل رسالة التنبيه، رابط للجدول) - بصيغة JSON
            $table->timestamp('read_at')->nullable(); // متى تم قراءة التنبيه

            $table->timestamps();
        });
--------------------------------------------------------------------------------------------------------
database\migrations\2025_04_18_085730_create_logs_table.php
Schema::create('logs', function (Blueprint $table) {
            $table->id();

            $table->foreignId('user_id')->nullable()->constrained('users')->onDelete('set null'); // المستخدم الذي قام بالفعل
            $table->string('action'); // وصف الفعل (e.g., 'updated_schedule', 'created_instructor', 'deleted_room')
            $table->morphs('loggable'); // لربط السجل بالشيء الذي تم التعديل عليه (Schedule, Instructor, Room...)
            $table->text('details')->nullable(); // تفاصيل إضافية (مثل القيم القديمة والجديدة) - JSON
            $table->ipAddress('ip_address')->nullable(); // عنوان IP للمستخدم
            $table->text('user_agent')->nullable(); // معلومات المتصفح
            
            $table->timestamps();
        });
---------------------------------------------------------------------------------------------------------
database\migrations\2025_05_05_083242_create_instructor_subject_table.php
Schema::create('instructor_subject', function (Blueprint $table) {
            // $table->id();

            // المفتاح الأجنبي لجدول المدرسين
            $table->foreignId('instructor_id')
                  ->constrained('instructors') // يربط بجدول instructors
                  ->onDelete('cascade'); // إذا حذف المدرس، احذف ارتباطاته بالمواد

            // المفتاح الأجنبي لجدول المواد
             $table->foreignId('subject_id')
                  ->constrained('subjects') // يربط بجدول subjects
                  ->onDelete('cascade'); // إذا حذفت المادة، احذف ارتباطاتها بالمدرسين

            // المفتاح الأساسي المركب لضمان عدم تكرار نفس المدرس مع نفس المادة
             $table->primary(['instructor_id', 'subject_id']);

            $table->timestamps();
        });
--------------------------------------------------------------------------------------------------------
database\migrations\2025_05_27_204829_create_instructor_section_table.php
Schema::create('instructor_section', function (Blueprint $table) {
            // $table->id();
            $table->foreignId('instructor_id')->constrained('instructors')->onDelete('cascade');
            $table->foreignId('section_id')->constrained('sections')->onDelete('cascade');
            $table->primary(['instructor_id', 'section_id']);
            // $table->timestamps();
        });
---------------------------------------------------------------------------------------------------------
database\migrations\2025_07_03_031343_create_crossover_types_table.php
 Schema::create('crossover_types', function (Blueprint $table) {
            $table->id('crossover_id');
            $table->string('name')->unique();
            $table->string('slug')->unique();
            $table->text('description')->nullable();
            $table->boolean('is_active')->default(true);
            $table->timestamps();
        });
--------------------------------------------------------------------------------------------------
database\migrations\2025_07_03_031457_create_selection_types_table.php
Schema::create('selection_types', function (Blueprint $table) {
            // $table->id();
            $table->id('selection_type_id'); // اسم الحقل PK كما طلبته (ملاحظة: الاسم يجب أن يكون فريداً)
            $table->string('name')->unique();
            $table->string('slug')->unique();
            $table->text('description')->nullable();
            $table->boolean('is_active')->default(true);
            $table->timestamps();
        });
--------------------------------------------------------------------------------------------------------
database\migrations\2025_07_03_093436_create_populations_table.php
 Schema::create('populations', function (Blueprint $table) {
            // $table->id();
            $table->id('population_id'); // اسم الحقل PK
            $table->unsignedBigInteger('parent_id')->nullable();
            $table->foreign('parent_id')->references('population_id')->on('populations')->onDelete('cascade');

            $table->year('academic_year')->default(2025);
            $table->unsignedTinyInteger('semester')->default(1);
            $table->unsignedTinyInteger('theory_credit_to_slots')->default(1);
            $table->unsignedTinyInteger('practical_credit_to_slots')->default(2);

            $table->unsignedInteger('population_size');
            $table->foreignId('crossover_id')->nullable()->constrained('crossover_types', 'crossover_id')->onDelete('set null');
            $table->foreignId('selection_id')->nullable()->constrained('selection_types', 'selection_type_id')->onDelete('set null');
            $table->decimal('mutation_rate', 5, 4); // (e.g., 0.0100)
            $table->unsignedInteger('max_generations')->default(10);
            $table->string('elitism_count')->nullable();
            $table->json('elite_chromosome_ids')->nullable();

            $table->decimal('crossover_rate', 5, 4)->default(0.95);
            $table->unsignedInteger('selection_size')->default(5);
            // $table->enum('mutation_type', ['random', 'smart', 'swap', 'smart_swap', 'adaptive'])
            //     ->default('random');
            $table->foreignId('mutation_id')->nullable()->constrained('mutation_types', 'mutation_id');

            $table->foreignId('best_chromosome_id')->nullable()->constrained('chromosomes', 'chromosome_id')->onDelete('set null');
            $table->boolean('stop_at_first_valid')->default(true);
            $table->timestamp('start_time')->nullable();
            $table->timestamp('end_time')->nullable();
            $table->enum('status', ['running', 'completed', 'stopped', 'failed'])->default('running');
            $table->timestamps();
        });
----------------------------------------------------------------------------------------------------------
database\migrations\2025_07_03_093437_create_chromosomes_table.php
Schema::create('chromosomes', function (Blueprint $table) {
            // $table->id();
            $table->id('chromosome_id');
            $table->foreignId('population_id')->constrained('populations', 'population_id')->onDelete('cascade');
            $table->unsignedInteger('generation_number');

            // الأعمدة الجديدة للعقوبات
            $table->integer('student_conflict_penalty')->default(0);
            $table->integer('teacher_conflict_penalty')->default(0);
            $table->integer('room_conflict_penalty')->default(0);
            $table->integer('capacity_conflict_penalty')->default(0);
            $table->integer('room_type_conflict_penalty')->default(0);
            $table->integer('teacher_eligibility_conflict_penalty')->default(0);

            // الأعمدة الإجمالية
            $table->integer('penalty_value')->default(-1);
            $table->double('fitness_value')->default(0.0);

            $table->boolean('is_best_of_generation')->default(false);
            $table->timestamps();
        });
----------------------------------------------------------------------------------------------------------
database\migrations\2025_07_03_093508_create_timeslots_table.php
Schema::create('timeslots', function (Blueprint $table) {
            $table->id();

            // تمثيل اليوم (0 = الأحد, 1 = الإثنين, ..., 6 = السبت) أو استخدام enum
            // $table->tinyInteger('day_of_week')->unsigned();
            $table->enum('day', [
                'Sunday',
                'Monday',
                'Tuesday',
                'Wednesday',
                'Thursday',
                'Friday',
                'Saturday'
            ]);
            // $table->foreignId('gene_id')->constrained('genes', 'gene_id')->onDelete('cascade')->nullable();
            $table->time('start_time'); // وقت بداية الفترة
            $table->time('end_time'); // وقت نهاية الفترة

            // هل هذه الفترة مخصصة لنوع معين من المحاضرات (نظري/عملي)؟ (اختياري)
            // $table->enum('slot_type', ['Theory', 'Practical', 'Any'])->default('Any');

            // هل هذه الفترة متاحة للجميع أم مقيدة (مثل فترات الصباح فقط)؟ (اختياري)
            // $table->boolean('is_generally_available')->default(true);


            // لضمان عدم تكرار نفس الفترة الزمنية بالضبط
            $table->unique(['day', 'start_time', 'end_time']);

            // يمكن إضافة قيود للتحقق من أن end_time > start_time
            // DB::statement('ALTER TABLE timeslots ADD CONSTRAINT chk_time_order CHECK (end_time > start_time);');

            $table->timestamps();
        });
--------------------------------------------------------------------------------------------------------
database\migrations\2025_07_03_093509_create_genes_table.php
Schema::create('genes', function (Blueprint $table) {
            // $table->id();
            $table->id('gene_id');
            $table->foreignId('chromosome_id')->constrained('chromosomes', 'chromosome_id')->onDelete('cascade');
            $table->string('lecture_unique_id')->nullable();
            $table->foreignId('section_id')->constrained('sections')->onDelete('cascade');
            $table->foreignId('instructor_id')->constrained('instructors')->onDelete('cascade');
            $table->foreignId('room_id')->constrained('rooms')->onDelete('cascade');
            // لاحظ أن timeslot_id هنا هو FK للجدول الرئيسي timeslots، وليس للجدول الجديد
            // $table->foreignId('timeslot_id')->constrained('timeslots')->onDelete('cascade');
            // سنزيل القيد الأجنبي (Foreign Key) لأننا سنخزن مصفوفة
            $table->json('timeslot_ids'); // تغيير النوع إلى JSON واسم الحقل

            $table->string('block_type')->nullable(); // 'theory' أو 'practical'
            $table->integer('block_duration')->nullable(); // مدة البلوك بالساعات
            $table->boolean('is_continuous')->default(true); // هل البلوك متصل
            // $table->integer('student_group_id')->nullable(); // رقم مجموعة الطلاب
            $table->json('student_group_id'); // تغيير النوع إلى JSON واسم الحقل

            $table->index('lecture_unique_id');

            $table->timestamps();
        });
---------------------------------------------------------------------------------------------------------
database\migrations\2025_07_09_103426_create_jobs_table.php
Schema::create('jobs', function (Blueprint $table) {
            $table->bigIncrements('id');
            $table->string('queue')->index();
            $table->longText('payload');
            $table->unsignedTinyInteger('attempts');
            $table->unsignedInteger('reserved_at')->nullable();
            $table->unsignedInteger('available_at');
            $table->unsignedInteger('created_at');
        });
------------------------------------------------------------------------------------------------------
database\migrations\2025_08_11_125510_create_gene_edits_table.php
Schema::create('gene_edits', function (Blueprint $table) {
            $table->id();
            // $table->foreignId('gene_id')->constrained('genes')->onDelete('cascade');
            $table->string('field'); // instructor or room
            $table->integer('old_value_id');
            $table->integer('new_value_id');
            $table->integer('changed_by'); // user_id
            $table->timestamp('changed_at');

            $table->timestamps();
        });
---------------------------------------------------------------------------------------------------------
database\migrations\2025_08_27_111416_create_mutation_types_table.php
Schema::create('mutation_types', function (Blueprint $table) {
            // $table->id();
            $table->id('mutation_id');
            $table->string('name')->unique();
            $table->string('slug')->unique();
            $table->text('description')->nullable();
            $table->boolean('is_active')->default(true);

            $table->timestamps();
        });
-------------------------------------------------------------------------------------------------------
database\migrations\2025_09_18_113603_create_plan_groups_table.php
Schema::create('plan_groups', function (Blueprint $table) {
            $table->id('group_id'); // Primary Key

            // معلومات السياق الأساسية
            $table->foreignId('plan_id')->constrained('plans')->onDelete('cascade');
            $table->unsignedTinyInteger('plan_level'); // مستوى الخطة (1,2,3,4...)
            $table->year('academic_year'); // السنة الأكاديمية
            $table->unsignedTinyInteger('semester'); // الفصل
            $table->string('branch')->nullable(); // الفرع (إن وجد)

            // ربط مع الشعبة
            $table->foreignId('section_id')->constrained('sections')->onDelete('cascade');

            // معلومات المجموعة
            $table->unsignedTinyInteger('group_no'); // رقم المجموعة (1,2,3...)
            $table->unsignedSmallInteger('group_size')->nullable(); // حجم المجموعة (اختياري)
            $table->enum('gender', ['Male', 'Female', 'Mixed'])->default('Mixed'); // جنس المجموعة

            // فهارس للأداء
            $table->index(['plan_id', 'plan_level', 'academic_year', 'semester', 'branch'], 'context_index');
            $table->index(['section_id', 'group_no'], 'section_group_index');

            // ضمان عدم التكرار للمجموعة الواحدة في نفس الشعبة
            $table->unique(['section_id', 'group_no'], 'unique_section_group');

            $table->timestamps();
        });
---------------------------------------------------------------------------------------------------------

<?php

namespace App\Services;

use Exception;
use App\Models\Gene;
use App\Models\Room;
use App\Models\Section;
use App\Models\Timeslot;
use App\Models\Crossover;
use App\Models\Chromosome;
use App\Models\Instructor;
use App\Models\Population;
use Illuminate\Support\Str;
use App\Models\SelectionType;
use Illuminate\Support\Collection;
use Illuminate\Support\Facades\Log;

class GeneticAlgorithmService
{
    private array $settings;
    private Population $populationRun;
    private $sections;
    private $instructors;
    private $rooms;
    private $timeslots;

    /**
     * تهيئة الـ Service مع الإعدادات ومعلومات التشغيل
     */
    public function __construct(array $settings, Population $populationRun)
    {
        $this->settings = $settings;
        $this->populationRun = $populationRun;
        Log::info("Genetic Algorithm Service initialized for Population Run ID: {$this->populationRun->population_id}");
    }

    /**
     * الدالة الرئيسية لتشغيل الخوارزمية
     */
    public function run()
    {
        try {
            // 1. تحديث حالة التشغيل إلى "running"
            $this->populationRun->update(['status' => 'running', 'start_time' => now()]);

            // 2. جلب كل البيانات اللازمة مرة واحدة (لتحسين الأداء)
            $this->loadInitialData();

            // // 3. إنشاء الجيل الأول العشوائي
            $currentGenerationChromosomes = $this->createInitialPopulation();
            $this->evaluateFitness($currentGenerationChromosomes);

            // 4. حلقة الأجيال (ستتم إضافتها لاحقاً)
            // for ($i = 0; $i < $this->settings['max_generations']; $i++) {
            //     $this->evaluateFitness();
            //     $this->selectParents();
            //     $this->crossoverAndMutate();
            // }

            // --- حلقة الأجيال ---
            // $maxGenerations = $this->settings['max_generations'];
            // for ($generationNumber = 1; $generationNumber <= $maxGenerations; $generationNumber++) {
            //     Log::info("---------- Starting Generation #{$generationNumber} ----------");

            //     // 1. تقييم الجيل الحالي
            //     // جلب كروموسومات الجيل الحالي
            //     $currentPopulation = $this->populationRun->chromosomes()
            //         ->where('generation_number', $generationNumber)
            //         ->get();
            //     $this->evaluateFitness($currentPopulation);
            //     Log::info("Generation #{$generationNumber} fitness evaluated.");

            //     // التحقق من شرط التوقف (هل وجدنا حلاً مثالياً؟)
            //     $bestChromosomeInGeneration = $currentPopulation->sortBy('penalty_value')->first();
            //     if ($bestChromosomeInGeneration->penalty_value == 0 && $this->settings['stop_at_first_valid']) {
            //         Log::info("Optimal solution found in Generation #{$generationNumber}! Stopping run.");
            //         $this->populationRun->update(['best_chromosome_id' => $bestChromosomeInGeneration->chromosome_id]);
            //         break; // اخرج من الحلقة
            //     }

            //     // 2. اختيار الآباء للجيل القادم
            //     $parents = $this->selectParents($currentPopulation);
            //     Log::info("Selected " . count($parents) . " parents for next generation.");

            //     // 3. التزاوج والطفرة لإنشاء الجيل الجديد (سنبنيها في الخطوة التالية)
            //     // $newGenerationChromosomes = $this->crossoverAndMutate($parents, $generationNumber + 1);

            //     // إذا وصلنا لآخر جيل، توقف
            //     if ($generationNumber == $maxGenerations) {
            //         Log::info("Reached max generations limit. Stopping run.");
            //         break;
            //     }

            //     // (مؤقتاً، سنوقف بعد أول جيل الآن)
            //     break;
            // }

            // --- حلقة الأجيال (الآن سنقوم بتفعيلها) ---
            $maxGenerations = $this->settings['max_generations'];
            for ($generationNumber = 1; $generationNumber <= $maxGenerations; $generationNumber++) {
                Log::info("---------- Starting Generation #{$generationNumber} ----------");

                // 1. تقييم الجيل الحالي
                $currentPopulation = $this->populationRun->chromosomes()
                    ->where('generation_number', $generationNumber)
                    ->get();
                $this->evaluateFitness($currentPopulation);
                Log::info("Generation #{$generationNumber} fitness evaluated.");

                // التحقق من شرط التوقف
                $bestChromosomeInGeneration = $currentPopulation->sortBy('penalty_value')->first();
                // dd([
                //     'this->populationRun' => $this->populationRun,
                //     '$this->loadInitialData()' => $this->loadInitialData(),
                //     '$this->sections->count()' => $this->sections->count(),
                //     '$this->instructors->count()' => $this->instructors->count(),
                //     '$this->rooms' => $this->rooms->count(),
                //     '$this->timeslots' => $this->timeslots->count(),
                //     'sections' => $this->sections->isEmpty(),
                //     'instructors' => $this->instructors->isEmpty(),
                //     'rooms' => $this->rooms->isEmpty(),
                //     'timeslots' => $this->timeslots->isEmpty(),
                //     'maxGenerations' => $maxGenerations,
                //     '$generationNumber' => $generationNumber,
                //     '$currentPopulation' => $currentPopulation,
                //     '$$this->evaluateFitness($currentPopulation)' => $this->evaluateFitness($currentPopulation),
                //     '$bestChromosomeInGeneration' => $bestChromosomeInGeneration,
                // ]);
                if ($bestChromosomeInGeneration->penalty_value == 0 && $this->settings['stop_at_first_valid']) {
                    Log::info("Optimal solution found in Generation #{$generationNumber}! Stopping run.");
                    $this->populationRun->update(['best_chromosome_id' => $bestChromosomeInGeneration->chromosome_id]);
                    break;
                }
                if ($generationNumber == $maxGenerations) {
                    Log::info("Reached max generations limit.");
                    break;
                }

                // 2. اختيار الآباء للجيل القادم
                $parents = $this->selectParents($currentPopulation);

                // 3. التزاوج والطفرة لإنشاء الجيل الجديد
                $this->crossoverAndMutate($parents, $generationNumber + 1);
                Log::info("New generation #" . ($generationNumber + 1) . " created.");
            }

            // تحديث حالة التشغيل إلى "completed"
            // (يمكنك تحديث best_chromosome_id هنا أيضاً بأفضل حل تم التوصل إليه)
            $finalBestChromosome = Chromosome::where('population_id', $this->populationRun->population_id)->orderBy('penalty_value', 'asc')->first();
            if ($finalBestChromosome) {
                $this->populationRun->update(['status' => 'completed', 'end_time' => now(), 'best_chromosome_id' => $finalBestChromosome->chromosome_id]);
            } else {
                $this->populationRun->update(['status' => 'completed', 'end_time' => now()]);
            }

            // 5. تحديث حالة التشغيل إلى "completed" (مؤقتاً)
            $this->populationRun->update(['status' => 'completed', 'end_time' => now()]);

            Log::info("Genetic Algorithm Run ID: {$this->populationRun->population_id} completed successfully.");
            Log::info(" best_chromosome_id {$finalBestChromosome->chromosome_id}");
        } catch (Exception $e) {
            // في حالة حدوث أي خطأ، سجل الخطأ وحدّث الحالة
            Log::error("Genetic Algorithm Run failed for Population Run ID: {$this->populationRun->population_id}. Error: " . $e->getMessage());
            $this->populationRun->update(['status' => 'failed']);
            // يمكنك إرسال إشعار أو أي إجراء آخر هنا
        }
    }

    /**
     * جلب البيانات الأساسية من قاعدة البيانات
     */
    private function loadInitialData()
    {
        Log::info("Loading initial data for GA...");
        // **مهم:** هنا يجب أن نحدد أي شعب ومدرسين وقاعات وأوقات سنستخدمها
        // الآن سنجلب كل شيء، لاحقاً يمكن فلترتها بناءً على سياق معين
        $this->sections = Section::all(); // يجب أن يكون لديك شعب منشأة
        $this->instructors = Instructor::all(); // أو المدرسون المعينون لمواد هذه الشعب
        $this->rooms = Room::all(); // أو القاعات المناسبة
        $this->timeslots = Timeslot::all(); // جدولنا الأساسي للأوقات

        // التحقق من وجود بيانات كافية
        if ($this->sections->isEmpty() || $this->instructors->isEmpty() || $this->rooms->isEmpty() || $this->timeslots->isEmpty()) {
            throw new Exception("Not enough data to run the algorithm. Please ensure sections, instructors, rooms, and timeslots are defined.");
        }
        Log::info("Data loaded: " . $this->sections->count() . " sections, " . $this->instructors->count() . " instructors.");
    }


    /**
     * إنشاء الجيل الأول (مجموعة من الجداول العشوائية)
     */
    private function createInitialPopulation()
    {
        Log::info("Creating initial population of size: " . $this->settings['population_size']);
        $chromosomes = [];

        for ($i = 0; $i < $this->settings['population_size']; $i++) {
            // إنشاء كروموسوم جديد (حل مقترح)
            $chromosome = Chromosome::create([
                'population_id' => $this->populationRun->population_id,
                'penalty_value' => 999999, // قيمة جزاء عالية مبدئياً
                'generation_number' => 1, // هذا هو الجيل الأول
                'is_best_of_generation' => false,
            ]);

            $genes = [];
            // لكل شعبة يجب جدولتها، أنشئ جيناً عشوائياً
            foreach ($this->sections as $section) {
                // اختيار مدرس، قاعة، ووقت عشوائي
                $randomInstructor = $this->instructors->random();
                $randomRoom = $this->rooms->random();
                $randomTimeslot = $this->timeslots->random();

                $genes[] = [
                    'chromosome_id' => $chromosome->chromosome_id,
                    'section_id' => $section->id,
                    'instructor_id' => $randomInstructor->id,
                    'room_id' => $randomRoom->id,
                    'timeslot_id' => $randomTimeslot->id,
                ];
            }

            // إدخال كل الجينات لهذا الكروموسوم دفعة واحدة
            Gene::insert($genes);

            $chromosomes[] = $chromosome;
        }

        Log::info("Initial population created successfully with " . count($chromosomes) . " chromosomes.");
        return $chromosomes;
    }

    // --- الدوال التالية سنقوم ببنائها لاحقاً ---

    /**
     * تقييم جودة كل الكروموسومات في الجيل الحالي
     */
    private function evaluateFitness($chromosomes)
    {
        // TODO: Implement fitness calculation logic
        // - Loop through each chromosome.
        // - Loop through its genes.
        // - Check for conflicts (hard constraints).
        // - Check for preferences (soft constraints).
        // - Calculate and update the penalty_value for each chromosome.
        Log::info("Evaluating fitness for " . count($chromosomes) . " chromosomes...");

        foreach ($chromosomes as $chromosome) {
            // جلب كل الجينات (المحاضرات) لهذا الكروموسوم مع تحميل العلاقات اللازمة
            // Eager loading is crucial for performance here
            $genes = Gene::where('chromosome_id', $chromosome->chromosome_id)
                ->with(['instructor', 'room', 'timeslot', 'section']) // تحميل العلاقات
                ->get();

            $totalPenalty = 0;

            // --- التحقق من التعارضات الصارمة (Hard Constraints) ---
            // سنستخدم Collection functions لتسهيل العملية

            // 1. التحقق من تعارض الوقت (نفس الفترة الزمنية محجوزة أكثر من مرة لمورد معين)
            // group by timeslot_id, then check counts for each resource
            $genesByTimeslot = $genes->groupBy('timeslot_id');

            foreach ($genesByTimeslot as $timeslotId => $genesInSlot) {
                // إذا كان هناك أكثر من محاضرة في نفس الفترة الزمنية، تحقق من وجود تعارض
                if ($genesInSlot->count() > 1) {
                    // تعارض المدرسين: هل هناك أي مدرس مكرر في هذه الفترة؟
                    $instructorsInSlot = $genesInSlot->pluck('instructor_id');
                    $totalPenalty += ($instructorsInSlot->count() - $instructorsInSlot->unique()->count()) * 1000; // 1000 نقطة عقوبة لكل تعارض

                    // تعارض القاعات: هل هناك أي قاعة مكررة في هذه الفترة؟
                    $roomsInSlot = $genesInSlot->pluck('room_id');
                    $totalPenalty += ($roomsInSlot->count() - $roomsInSlot->unique()->count()) * 1000;

                    // تعارض الشعب: هل هناك أي شعبة مكررة في هذه الفترة؟
                    $sectionsInSlot = $genesInSlot->pluck('section_id');
                    $totalPenalty += ($sectionsInSlot->count() - $sectionsInSlot->unique()->count()) * 1000;
                }
            }

            // 2. التحقق من سعة القاعة ونوعها (لكل جين على حدة)
            foreach ($genes as $gene) {
                // التحقق من سعة القاعة
                if ($gene->section && $gene->room && $gene->section->student_count > $gene->room->room_size) {
                    $totalPenalty += 500; // عقوبة 500 نقطة إذا كانت الشعبة أكبر من القاعة
                }

                // التحقق من نوع القاعة
                if ($gene->section && $gene->room && $gene->room->roomType && $gene->section->planSubject && $gene->section->planSubject->subject) {
                    $activityType = $gene->section->activity_type; // 'Theory' or 'Practical'
                    $roomTypeName = strtolower($gene->room->roomType->room_type_name);

                    // إذا كانت الشعبة عملية ولكن القاعة ليست مختبر
                    if ($activityType == 'Practical' && !Str::contains($roomTypeName, ['lab', 'مختبر', 'workshop', 'ورشة'])) {
                        $totalPenalty += 1000; // عقوبة كبيرة جداً
                    }

                    // إذا كانت الشعبة نظرية ولكن القاعة مختبر (أقل خطورة ولكن غير مفضل)
                    if ($activityType == 'Theory' && Str::contains($roomTypeName, ['lab', 'مختبر', 'workshop', 'ورشة'])) {
                        $totalPenalty += 200; // عقوبة متوسطة
                    }
                }
            }

            // --- التحقق من التعارضات المرنة (Soft Constraints) - سنضيفها لاحقاً ---
            // - إرهاق المدرسين (محاضرات متتالية)
            // - فراغات الطلاب
            // ...

            // تحديث قيمة العقوبة للكروموسوم
            $chromosome->update(['penalty_value' => $totalPenalty]);
        }

        Log::info("Fitness evaluation completed.");
    }

    /**
     * اختيار أفضل الآباء للجيل القادم
     */
    private function selectParents(Collection $population)
    {
        // TODO: Implement selection logic (e.g., roulette wheel, tournament)
        // الطريقة: اختيار البطولة (Tournament Selection)
        // فكرتها: نختار بشكل عشوائي "k" عدد من الكروموسومات (مثلاً 2 أو 3)
        // ونقارن بينهم، والأفضل في هذه المجموعة الصغيرة يفوز وينضم لمجموعة الآباء.
        // نكرر هذه العملية حتى نملأ مجموعة الآباء.

        $parents = [];
        $populationSize = $this->settings['population_size'];
        $tournamentSize = 3; // حجم البطولة (يمكن جعله إعداداً)

        for ($i = 0; $i < $populationSize; $i++) {
            // اختيار مجموعة عشوائية صغيرة للمنافسة
            $tournamentContestants = $population->random($tournamentSize);

            // البحث عن الفائز (صاحب أقل عقوبة) في هذه البطولة الصغيرة
            $winner = $tournamentContestants->sortBy('penalty_value')->first();

            $parents[] = $winner; // إضافة الفائز لمجموعة الآباء
        }

        return $parents;
    }

    private function crossoverAndMutate(array $parents, int $nextGenerationNumber)
    {
        $newPopulation = [];
        $populationSize = $this->settings['population_size'];

        // مزاوجة الآباء لإنشاء الأبناء
        for ($i = 0; $i < $populationSize; $i += 2) {
            // اختيار أبوين بشكل عشوائي من مجموعة الآباء
            $parent1 = $parents[array_rand($parents)];
            $parent2 = $parents[array_rand($parents)];

            // تنفيذ عملية التزاوج
            [$child1Genes, $child2Genes] = $this->performCrossover($parent1, $parent2);

            // تنفيذ عملية الطفرة على الأبناء
            $child1Genes = $this->performMutation($child1Genes);
            $child2Genes = $this->performMutation($child2Genes);

            // إضافة الأبناء (الجينات) للجيل الجديد
            $newPopulation[] = $child1Genes;
            if (count($newPopulation) < $populationSize) {
                $newPopulation[] = $child2Genes;
            }
        }

        // حفظ الجيل الجديد في قاعدة البيانات
        foreach ($newPopulation as $childGenes) {
            $chromosome = Chromosome::create([
                'population_id' => $this->populationRun->population_id,
                'penalty_value' => 999999, // سيتم تقييمها في بداية الحلقة التالية
                'generation_number' => $nextGenerationNumber,
            ]);
            // إدخال جينات الابن الجديد
            // يجب تعديل الجينات لتشمل chromosome_id الجديد
            foreach ($childGenes as &$gene) { // استخدام & لتمرير بالمرجع
                unset($gene['gene_id']); // إزالة الـ ID القديم
                $gene['chromosome_id'] = $chromosome->chromosome_id;
            }
            Gene::insert($childGenes);
        }
    }

    /**
     * تنفيذ عملية التزاوج (Single-Point Crossover)
     * @param Chromosome $parent1
     * @param Chromosome $parent2
     * @return array [مصفوفة جينات الابن الأول, مصفوفة جينات الابن الثاني]
     */
    private function performCrossover(Chromosome $parent1, Chromosome $parent2)
    {
        // جلب جينات الآباء (كمصفوفات لتسهيل التعامل)
        $parent1Genes = $parent1->genes->toArray();
        $parent2Genes = $parent2->genes->toArray();
        $geneCount = count($parent1Genes);

        // اختيار نقطة قص عشوائية
        $crossoverPoint = rand(1, $geneCount - 1);

        // إنشاء جينات الأبناء
        $child1Genes = array_merge(
            array_slice($parent1Genes, 0, $crossoverPoint),
            array_slice($parent2Genes, $crossoverPoint)
        );
        $child2Genes = array_merge(
            array_slice($parent2Genes, 0, $crossoverPoint),
            array_slice($parent1Genes, $crossoverPoint)
        );

        return [$child1Genes, $child2Genes];
    }

    /**
     * تنفيذ عملية الطفرة
     * @param array $genes مصفوفة الجينات للكروموسوم
     * @return array مصفوفة الجينات بعد الطفرة
     */
    private function performMutation(array $genes)
    {
        $mutationRate = $this->settings['mutation_rate'];

        foreach ($genes as $index => $gene) {
            // هل ستحدث طفرة؟ (بناءً على معدل الطفرة)
            if (lcg_value() < $mutationRate) {
                // حدثت طفرة! غير شيئاً في هذا الجين بشكل عشوائي
                Log::info("Mutation occurred on gene for section ID: {$gene['section_id']}");

                // مثال: تغيير الفترة الزمنية (timeslot) بشكل عشوائي
                $newRandomTimeslot = $this->timeslots->random();
                $genes[$index]['timeslot_id'] = $newRandomTimeslot->timeslot_id;

                // يمكنك إضافة طفرات أخرى هنا:
                // - تغيير المدرس (إذا كان هناك مدرسون آخرون متاحون لهذه المادة)
                // - تغيير القاعة
            }
        }
        return $genes;
    }

    /**
     * تنفيذ التزاوج والطفرة لإنشاء جيل جديد
     */
    // private function crossoverAndMutate(array $parents, int $nextGenerationNumber)
    // {
    //     $newPopulation = [];
    //     $populationSize = $this->settings['population_size'];

    //     // مزاوجة الآباء لإنشاء الأبناء
    //     for ($i = 0; $i < $populationSize; $i += 2) {
    //         // اختيار أبوين بشكل عشوائي من مجموعة الآباء
    //         $parent1 = $parents[array_rand($parents)];
    //         $parent2 = $parents[array_rand($parents)];

    //         // تنفيذ عملية التزاوج
    //         [$child1Genes, $child2Genes] = $this->performCrossover($parent1, $parent2);

    //         // تنفيذ عملية الطفرة على الأبناء
    //         $child1Genes = $this->performMutation($child1Genes);
    //         $child2Genes = $this->performMutation($child2Genes);

    //         // إضافة الأبناء (الجينات) للجيل الجديد
    //         $newPopulation[] = $child1Genes;
    //         if (count($newPopulation) < $populationSize) {
    //             $newPopulation[] = $child2Genes;
    //         }
    //     }

    //     // حفظ الجيل الجديد في قاعدة البيانات
    //     foreach ($newPopulation as $childGenes) {
    //         $chromosome = Chromosome::create([
    //             'population_id' => $this->populationRun->population_id,
    //             'penalty_value' => 999999, // سيتم تقييمها في بداية الحلقة التالية
    //             'generation_number' => $nextGenerationNumber,
    //         ]);
    //         // إدخال جينات الابن الجديد
    //         // يجب تعديل الجينات لتشمل chromosome_id الجديد
    //         foreach ($childGenes as &$gene) { // استخدام & لتمرير بالمرجع
    //             unset($gene['gene_id']); // إزالة الـ ID القديم
    //             $gene['chromosome_id'] = $chromosome->chromosome_id;
    //         }
    //         Gene::insert($childGenes);
    //     }
    // }

    // /**
    //  * تنفيذ عملية التزاوج (Single-Point Crossover)
    //  * @param Chromosome $parent1
    //  * @param Chromosome $parent2
    //  * @return array [مصفوفة جينات الابن الأول, مصفوفة جينات الابن الثاني]
    //  */
    // private function performCrossover(Chromosome $parent1, Chromosome $parent2)
    // {
    //     // جلب جينات الآباء (كمصفوفات لتسهيل التعامل)
    //     $parent1Genes = $parent1->genes->toArray();
    //     $parent2Genes = $parent2->genes->toArray();
    //     $geneCount = count($parent1Genes);

    //     // اختيار نقطة قص عشوائية
    //     $crossoverPoint = rand(1, $geneCount - 1);

    //     // إنشاء جينات الأبناء
    //     $child1Genes = array_merge(
    //         array_slice($parent1Genes, 0, $crossoverPoint),
    //         array_slice($parent2Genes, $crossoverPoint)
    //     );
    //     $child2Genes = array_merge(
    //         array_slice($parent2Genes, 0, $crossoverPoint),
    //         array_slice($parent1Genes, $crossoverPoint)
    //     );

    //     return [$child1Genes, $child2Genes];
    // }

    // /**
    //  * تنفيذ عملية الطفرة
    //  * @param array $genes مصفوفة الجينات للكروموسوم
    //  * @return array مصفوفة الجينات بعد الطفرة
    //  */
    // private function performMutation(array $genes)
    // {
    //     $mutationRate = $this->settings['mutation_rate'];

    //     foreach ($genes as $index => $gene) {
    //         // هل ستحدث طفرة؟ (بناءً على معدل الطفرة)
    //         if (lcg_value() < $mutationRate) {
    //             // حدثت طفرة! غير شيئاً في هذا الجين بشكل عشوائي
    //             Log::info("Mutation occurred on gene for section ID: {$gene['section_id']}");

    //             // مثال: تغيير الفترة الزمنية (timeslot) بشكل عشوائي
    //             $newRandomTimeslot = $this->timeslots->random();
    //             $genes[$index]['timeslot_id'] = $newRandomTimeslot->timeslot_id;

    //             // يمكنك إضافة طفرات أخرى هنا:
    //             // - تغيير المدرس (إذا كان هناك مدرسون آخرون متاحون لهذه المادة)
    //             // - تغيير القاعة
    //         }
    //     }
    //     return $genes;
    // }
}

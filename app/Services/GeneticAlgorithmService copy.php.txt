<?php

namespace App\Services\GeneticAlgorithm;

// استيراد الموديلات التي سنحتاجها
use App\Models\Population;
use App\Models\Chromosome;
use App\Models\Gene;
use App\Models\Section;
use App\Models\Instructor;
use App\Models\Room;
use App\Models\Timeslot;
use App\Models\CrossoverType;
use App\Models\SelectionType;
use App\Models\AlgorithmTimeslot; // الجدول الجديد للنتائج الزمنية
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\DB; // لاستخدامه في Transactions إذا لزم الأمر
use Exception;

class GeneticAlgorithmService
{
    // --- إعدادات الخوارزمية ---
    private int $populationSize;
    private float $mutationRate;
    private int $maxGenerations;
    private int $crossoverTypeId;
    private int $selectionTypeId;
    private bool $stopAtFirstValid;

    // --- بيانات التشغيل ---
    private $sections;        // كل الشعب التي يجب جدولتها
    private $instructors;     // كل المدرسين
    private $rooms;           // كل القاعات
    private $timeslots;       // كل الفترات الزمنية
    private Population $currentPopulation; // الجيل الحالي الذي نعمل عليه

    // --- ثوابت العقوبات (Penalties) ---
    private const INSTRUCTOR_CLASH_PENALTY = 1000;
    private const ROOM_CLASH_PENALTY       = 1000;
    private const SECTION_CLASH_PENALTY    = 1000;
    // ... (سنضيف باقي العقوبات هنا لاحقاً) ...
    

    /**
     * الدالة التي يتم استدعاؤها عند إنشاء كائن جديد من هذا الكلاس
     */
    public function __construct()
    {
        // ضبط الإعدادات الافتراضية الأولية
        $this->populationSize = 100;
        $this->mutationRate = 0.01;
        $this->maxGenerations = 500;
        $this->stopAtFirstValid = false;
        $this->crossoverTypeId = 1;
        $this->selectionTypeId = 1;
    }

    /**
     * دالة لتمرير الإعدادات من الكنترولر إلى الـ Service
     */
    public function setSettings(array $settings): self
    {
        $this->populationSize = $settings['population_size'] ?? $this->populationSize;
        $this->mutationRate = $settings['mutation_rate'] ?? $this->mutationRate;
        $this->maxGenerations = $settings['max_generations'] ?? $this->maxGenerations;
        $this->crossoverTypeId = $settings['crossover_type_id'] ?? $this->crossoverTypeId;
        $this->selectionTypeId = $settings['selection_type_id'] ?? $this->selectionTypeId;
        $this->stopAtFirstValid = $settings['stop_at_first_valid'] ?? $this->stopAtFirstValid;
        Log::info('GA Service settings configured.', (array) $this);
        return $this;
    }

    /**
     * الدالة الرئيسية التي تشغل الخوارزمية
     */
    public function run()
    {
        Log::info('--- GA RUN: START ---');
        $startTime = now();

        // 1. تحضير البيانات اللازمة (جلبها من قاعدة البيانات)
        $this->prepareData();
        if ($this->sections->isEmpty()) {
            Log::warning("GA RUN: No sections to schedule. Aborting.");
            // يمكنك إرجاع خطأ أو رسالة هنا
            throw new Exception("There are no defined sections to be scheduled. Please create sections first.");
        }

        // 2. إنشاء الجيل الأول العشوائي
        Log::info("GA RUN: Creating initial population...");
        $this->createInitialPopulation($startTime);

        // 3. تقييم الجيل الأول
        Log::info("GA RUN: Calculating fitness for initial population...");
        $this->calculateFitnessForAllChromosomes($this->currentPopulation);

        // 4. حلقة الأجيال (التطور)
        for ($i = 1; $i < $this->maxGenerations; $i++) {
            Log::info("--- GA RUN: EVOLVING GENERATION #{$i} ---");
            $this->evolveNewPopulation();
            Log::info("GA RUN: Calculating fitness for generation #{$this->currentPopulation->generation_number}...");
            $this->calculateFitnessForAllChromosomes($this->currentPopulation);
            // TODO: إضافة شرط التوقف المبكر
        }

        // 5. إنهاء عملية التشغيل
        $this->finalizeRun($startTime);
        Log::info('--- GA RUN: COMPLETED ---');
    }

    // =============================================
    // --- دوال مساعدة (سيتم ملؤها لاحقاً) ---
    // =============================================

    /**
     * جلب كل البيانات اللازمة من قاعدة البيانات
     */
    private function prepareData()
    {
        Log::info('Preparing data: Fetching Sections, Instructors, Rooms, Timeslots...');
        $this->sections = Section::all(); // TODO: يجب فلترة الشعب للسنة والفصل الحاليين فقط
        $this->instructors = Instructor::with('subjects', 'sections')->get(); // تحميل علاقات المدرسين
        $this->rooms = Room::all();
        $this->timeslots = Timeslot::all();
        Log::info('Data prepared.');
    }

    /**
     * إنشاء الجيل الأول العشوائي
     */
    private function createInitialPopulation($startTime)
    {
        Log::info('Creating Population record in DB...');
        // إنشاء سجل للجيل في جدول populations
        $this->currentPopulation = Population::create([
            'population_size' => $this->populationSize,
            'crossover_id' => $this->crossoverTypeId,
            'selection_id' => $this->selectionTypeId,
            'mutation_rate' => $this->mutationRate,
            'generations_count' => 0, // يبدأ من صفر
            'start_time' => $startTime,
            'status' => 'running',
        ]);
        Log::info("Population record created with ID: {$this->currentPopulation->population_id}");

        // TODO: كتابة منطق إنشاء الجداول العشوائية (الكروموسومات) والجينات
    }

    /**
     * حساب درجة الجودة لكل الكروموسومات في الجيل الحالي
     */
    private function calculateFitnessForAllChromosomes(Population $population)
    {
        Log::info("Calculating fitness for {$population->chromosomes->count()} chromosomes...");
        // TODO: كتابة منطق حساب الجودة
        // foreach ($population->chromosomes as $chromosome) {
        //     $this->calculateSingleChromosomeFitness($chromosome);
        // }
    }

    /**
     * إنشاء جيل جديد (تطور)
     */
    private function evolveNewPopulation()
    {
        Log::info('Evolving new population...');
        // TODO: كتابة منطق الاختيار والتزاوج والطفرة
    }

    /**
     * إنهاء عملية التشغيل
     */
    private function finalizeRun($startTime)
    {
        Log::info('Finalizing run...');
        // TODO: البحث عن أفضل حل وتحديث سجل الـ population
        $this->currentPopulation->update([
            'end_time' => now(),
            'status' => 'completed',
            'generations_count' => $this->maxGenerations,
            // 'best_chromosome_id' => ...
        ]);
    }
}
